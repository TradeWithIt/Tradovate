// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// #### Request an access token using your user credentials and API Key. 
    ///
    /// See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.
    ///
    /// ### Acquiring an Access Token
    ///
    /// ```js
    /// const URL = 'https://live.tradovateapi.com/v1'
    ///
    /// const credentials = {
    ///     name:       "Your credentials here",
    ///     password:   "Your credentials here",
    ///     appId:      "Sample App",
    ///     appVersion: "1.0",
    ///     cid:        0,
    ///     sec:        "Your API secret here"
    /// }
    ///
    /// async function getAccessToken() {
    ///     let response = await fetch(URL + '/auth/accessTokenRequest', {
    ///         method: 'POST',
    ///         headers: {
    ///             'Content-Type': 'application/json'
    ///         }
    ///     })
    ///     let result = await response.json()
    ///     return result // { accessToken, mdAccessToken, userId, ... }
    /// }
    ///
    /// //...
    ///
    /// async function main() {
    ///     const { accessToken, mdAccessToken, userId } = await getAccessToken()
    ///
    ///     //use access token
    /// }
    /// ```
    ///
    /// ### Using an Access Token
    ///
    /// ```js
    /// //use the Authorization: Bearer schema in API POST and GET requests
    ///
    /// //simple /account/list endpoint requires no body or query
    /// async function getAccounts() {
    ///     let response = await fetch(URL + '/account/list', {
    ///         method: 'GET',
    ///         headers: {
    ///             'Content-Type': 'application/json',
    ///             Authorization: `Bearer ${accessToken}` //Access Token use in HTTP requests
    ///         }
    ///     })
    ///     let result = await response.json()
    ///     return result
    /// }
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /auth/accesstokenrequest`.
    /// - Remark: Generated from `#/paths//auth/accesstokenrequest/post(accessTokenRequest)`.
    func accessTokenRequest(_ input: Operations.accessTokenRequest.Input) async throws -> Operations.accessTokenRequest.Output
    /// ### Shows Basic user data for the calling user.
    ///
    /// - Remark: HTTP `GET /auth/me`.
    /// - Remark: Generated from `#/paths//auth/me/get(me)`.
    func me(_ input: Operations.me.Input) async throws -> Operations.me.Output
    /// ### Used to exchange your OAuth code for an access token.
    /// Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
    ///
    /// - Remark: HTTP `POST /auth/oauthtoken`.
    /// - Remark: Generated from `#/paths//auth/oauthtoken/post(oAuthToken)`.
    func oAuthToken(_ input: Operations.oAuthToken.Input) async throws -> Operations.oAuthToken.Output
    /// ### Request a renewal for an existing access token.
    ///
    /// - Remark: HTTP `GET /auth/renewaccesstoken`.
    /// - Remark: Generated from `#/paths//auth/renewaccesstoken/get(renewAccessToken)`.
    func renewAccessToken(_ input: Operations.renewAccessToken.Input) async throws -> Operations.renewAccessToken.Output
    /// Retrieves all entities of Contract type related to ContractMaturity entity
    ///
    /// - Remark: HTTP `GET /contract/deps`.
    /// - Remark: Generated from `#/paths//contract/deps/get(contractDependents)`.
    func contractDependents(_ input: Operations.contractDependents.Input) async throws -> Operations.contractDependents.Output
    /// Retrieves an entity of Contract type by its name
    ///
    /// - Remark: HTTP `GET /contract/find`.
    /// - Remark: Generated from `#/paths//contract/find/get(contractFind)`.
    func contractFind(_ input: Operations.contractFind.Input) async throws -> Operations.contractFind.Output
    /// ### Query the a product's fee parameters.
    ///
    /// - Remark: HTTP `POST /contract/getproductfeeparams`.
    /// - Remark: Generated from `#/paths//contract/getproductfeeparams/post(getProductFeeParams)`.
    func getProductFeeParams(_ input: Operations.getProductFeeParams.Input) async throws -> Operations.getProductFeeParams.Output
    /// Retrieves an entity of Contract type by its id
    ///
    /// - Remark: HTTP `GET /contract/item`.
    /// - Remark: Generated from `#/paths//contract/item/get(contractItem)`.
    func contractItem(_ input: Operations.contractItem.Input) async throws -> Operations.contractItem.Output
    /// Retrieves multiple entities of Contract type by its ids
    ///
    /// - Remark: HTTP `GET /contract/items`.
    /// - Remark: Generated from `#/paths//contract/items/get(contractItems)`.
    func contractItems(_ input: Operations.contractItems.Input) async throws -> Operations.contractItems.Output
    /// Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
    ///
    /// - Remark: HTTP `GET /contract/ldeps`.
    /// - Remark: Generated from `#/paths//contract/ldeps/get(contractLDependents)`.
    func contractLDependents(_ input: Operations.contractLDependents.Input) async throws -> Operations.contractLDependents.Output
    /// ### Request the best upcoming maturity date for a given contract.
    ///
    /// - Remark: HTTP `POST /contract/rollcontract`.
    /// - Remark: Generated from `#/paths//contract/rollcontract/post(rollContract)`.
    func rollContract(_ input: Operations.rollContract.Input) async throws -> Operations.rollContract.Output
    /// - Remark: HTTP `POST /contract/rollcontracts`.
    /// - Remark: Generated from `#/paths//contract/rollcontracts/post(rollContracts)`.
    func rollContracts(_ input: Operations.rollContracts.Input) async throws -> Operations.rollContracts.Output
    /// Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /contract/suggest`.
    /// - Remark: Generated from `#/paths//contract/suggest/get(contractSuggest)`.
    func contractSuggest(_ input: Operations.contractSuggest.Input) async throws -> Operations.contractSuggest.Output
    /// Retrieves an entity of ContractGroup type by its name
    ///
    /// - Remark: HTTP `GET /contractGroup/find`.
    /// - Remark: Generated from `#/paths//contractGroup/find/get(contractGroupFind)`.
    func contractGroupFind(_ input: Operations.contractGroupFind.Input) async throws -> Operations.contractGroupFind.Output
    /// Retrieves an entity of ContractGroup type by its id
    ///
    /// - Remark: HTTP `GET /contractGroup/item`.
    /// - Remark: Generated from `#/paths//contractGroup/item/get(contractGroupItem)`.
    func contractGroupItem(_ input: Operations.contractGroupItem.Input) async throws -> Operations.contractGroupItem.Output
    /// Retrieves multiple entities of ContractGroup type by its ids
    ///
    /// - Remark: HTTP `GET /contractGroup/items`.
    /// - Remark: Generated from `#/paths//contractGroup/items/get(contractGroupItems)`.
    func contractGroupItems(_ input: Operations.contractGroupItems.Input) async throws -> Operations.contractGroupItems.Output
    /// Retrieves all entities of ContractGroup type
    ///
    /// - Remark: HTTP `GET /contractGroup/list`.
    /// - Remark: Generated from `#/paths//contractGroup/list/get(contractGroupList)`.
    func contractGroupList(_ input: Operations.contractGroupList.Input) async throws -> Operations.contractGroupList.Output
    /// Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /contractGroup/suggest`.
    /// - Remark: Generated from `#/paths//contractGroup/suggest/get(contractGroupSuggest)`.
    func contractGroupSuggest(_ input: Operations.contractGroupSuggest.Input) async throws -> Operations.contractGroupSuggest.Output
    /// Retrieves all entities of ContractMaturity type related to Product entity
    ///
    /// - Remark: HTTP `GET /contractMaturity/deps`.
    /// - Remark: Generated from `#/paths//contractMaturity/deps/get(contractMaturityDependents)`.
    func contractMaturityDependents(_ input: Operations.contractMaturityDependents.Input) async throws -> Operations.contractMaturityDependents.Output
    /// Retrieves an entity of ContractMaturity type by its id
    ///
    /// - Remark: HTTP `GET /contractMaturity/item`.
    /// - Remark: Generated from `#/paths//contractMaturity/item/get(contractMaturityItem)`.
    func contractMaturityItem(_ input: Operations.contractMaturityItem.Input) async throws -> Operations.contractMaturityItem.Output
    /// Retrieves multiple entities of ContractMaturity type by its ids
    ///
    /// - Remark: HTTP `GET /contractMaturity/items`.
    /// - Remark: Generated from `#/paths//contractMaturity/items/get(contractMaturityItems)`.
    func contractMaturityItems(_ input: Operations.contractMaturityItems.Input) async throws -> Operations.contractMaturityItems.Output
    /// Retrieves all entities of ContractMaturity type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /contractMaturity/ldeps`.
    /// - Remark: Generated from `#/paths//contractMaturity/ldeps/get(contractMaturityLDependents)`.
    func contractMaturityLDependents(_ input: Operations.contractMaturityLDependents.Input) async throws -> Operations.contractMaturityLDependents.Output
    /// Retrieves an entity of Currency type by its name
    ///
    /// - Remark: HTTP `GET /currency/find`.
    /// - Remark: Generated from `#/paths//currency/find/get(currencyFind)`.
    func currencyFind(_ input: Operations.currencyFind.Input) async throws -> Operations.currencyFind.Output
    /// Retrieves an entity of Currency type by its id
    ///
    /// - Remark: HTTP `GET /currency/item`.
    /// - Remark: Generated from `#/paths//currency/item/get(currencyItem)`.
    func currencyItem(_ input: Operations.currencyItem.Input) async throws -> Operations.currencyItem.Output
    /// Retrieves multiple entities of Currency type by its ids
    ///
    /// - Remark: HTTP `GET /currency/items`.
    /// - Remark: Generated from `#/paths//currency/items/get(currencyItems)`.
    func currencyItems(_ input: Operations.currencyItems.Input) async throws -> Operations.currencyItems.Output
    /// Retrieves all entities of Currency type
    ///
    /// - Remark: HTTP `GET /currency/list`.
    /// - Remark: Generated from `#/paths//currency/list/get(currencyList)`.
    func currencyList(_ input: Operations.currencyList.Input) async throws -> Operations.currencyList.Output
    /// Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /currency/suggest`.
    /// - Remark: Generated from `#/paths//currency/suggest/get(currencySuggest)`.
    func currencySuggest(_ input: Operations.currencySuggest.Input) async throws -> Operations.currencySuggest.Output
    /// Retrieves all entities of CurrencyRate type related to Currency entity
    ///
    /// - Remark: HTTP `GET /currencyRate/deps`.
    /// - Remark: Generated from `#/paths//currencyRate/deps/get(currencyRateDependents)`.
    func currencyRateDependents(_ input: Operations.currencyRateDependents.Input) async throws -> Operations.currencyRateDependents.Output
    /// Retrieves an entity of CurrencyRate type by its id
    ///
    /// - Remark: HTTP `GET /currencyRate/item`.
    /// - Remark: Generated from `#/paths//currencyRate/item/get(currencyRateItem)`.
    func currencyRateItem(_ input: Operations.currencyRateItem.Input) async throws -> Operations.currencyRateItem.Output
    /// Retrieves multiple entities of CurrencyRate type by its ids
    ///
    /// - Remark: HTTP `GET /currencyRate/items`.
    /// - Remark: Generated from `#/paths//currencyRate/items/get(currencyRateItems)`.
    func currencyRateItems(_ input: Operations.currencyRateItems.Input) async throws -> Operations.currencyRateItems.Output
    /// Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
    ///
    /// - Remark: HTTP `GET /currencyRate/ldeps`.
    /// - Remark: Generated from `#/paths//currencyRate/ldeps/get(currencyRateLDependents)`.
    func currencyRateLDependents(_ input: Operations.currencyRateLDependents.Input) async throws -> Operations.currencyRateLDependents.Output
    /// Retrieves all entities of CurrencyRate type
    ///
    /// - Remark: HTTP `GET /currencyRate/list`.
    /// - Remark: Generated from `#/paths//currencyRate/list/get(currencyRateList)`.
    func currencyRateList(_ input: Operations.currencyRateList.Input) async throws -> Operations.currencyRateList.Output
    /// Retrieves an entity of Exchange type by its name
    ///
    /// - Remark: HTTP `GET /exchange/find`.
    /// - Remark: Generated from `#/paths//exchange/find/get(exchangeFind)`.
    func exchangeFind(_ input: Operations.exchangeFind.Input) async throws -> Operations.exchangeFind.Output
    /// Retrieves an entity of Exchange type by its id
    ///
    /// - Remark: HTTP `GET /exchange/item`.
    /// - Remark: Generated from `#/paths//exchange/item/get(exchangeItem)`.
    func exchangeItem(_ input: Operations.exchangeItem.Input) async throws -> Operations.exchangeItem.Output
    /// Retrieves multiple entities of Exchange type by its ids
    ///
    /// - Remark: HTTP `GET /exchange/items`.
    /// - Remark: Generated from `#/paths//exchange/items/get(exchangeItems)`.
    func exchangeItems(_ input: Operations.exchangeItems.Input) async throws -> Operations.exchangeItems.Output
    /// Retrieves all entities of Exchange type
    ///
    /// - Remark: HTTP `GET /exchange/list`.
    /// - Remark: Generated from `#/paths//exchange/list/get(exchangeList)`.
    func exchangeList(_ input: Operations.exchangeList.Input) async throws -> Operations.exchangeList.Output
    /// Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /exchange/suggest`.
    /// - Remark: Generated from `#/paths//exchange/suggest/get(exchangeSuggest)`.
    func exchangeSuggest(_ input: Operations.exchangeSuggest.Input) async throws -> Operations.exchangeSuggest.Output
    /// Retrieves all entities of Product type related to Exchange entity
    ///
    /// - Remark: HTTP `GET /product/deps`.
    /// - Remark: Generated from `#/paths//product/deps/get(productDependents)`.
    func productDependents(_ input: Operations.productDependents.Input) async throws -> Operations.productDependents.Output
    /// Retrieves an entity of Product type by its name
    ///
    /// - Remark: HTTP `GET /product/find`.
    /// - Remark: Generated from `#/paths//product/find/get(productFind)`.
    func productFind(_ input: Operations.productFind.Input) async throws -> Operations.productFind.Output
    /// Retrieves an entity of Product type by its id
    ///
    /// - Remark: HTTP `GET /product/item`.
    /// - Remark: Generated from `#/paths//product/item/get(productItem)`.
    func productItem(_ input: Operations.productItem.Input) async throws -> Operations.productItem.Output
    /// Retrieves multiple entities of Product type by its ids
    ///
    /// - Remark: HTTP `GET /product/items`.
    /// - Remark: Generated from `#/paths//product/items/get(productItems)`.
    func productItems(_ input: Operations.productItems.Input) async throws -> Operations.productItems.Output
    /// Retrieves all entities of Product type related to multiple entities of Exchange type
    ///
    /// - Remark: HTTP `GET /product/ldeps`.
    /// - Remark: Generated from `#/paths//product/ldeps/get(productLDependents)`.
    func productLDependents(_ input: Operations.productLDependents.Input) async throws -> Operations.productLDependents.Output
    /// Retrieves all entities of Product type
    ///
    /// - Remark: HTTP `GET /product/list`.
    /// - Remark: Generated from `#/paths//product/list/get(productList)`.
    func productList(_ input: Operations.productList.Input) async throws -> Operations.productList.Output
    /// Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /product/suggest`.
    /// - Remark: Generated from `#/paths//product/suggest/get(productSuggest)`.
    func productSuggest(_ input: Operations.productSuggest.Input) async throws -> Operations.productSuggest.Output
    /// Retrieves all entities of ProductSession type related to Product entity
    ///
    /// - Remark: HTTP `GET /productSession/deps`.
    /// - Remark: Generated from `#/paths//productSession/deps/get(productSessionDependents)`.
    func productSessionDependents(_ input: Operations.productSessionDependents.Input) async throws -> Operations.productSessionDependents.Output
    /// Retrieves an entity of ProductSession type by its id
    ///
    /// - Remark: HTTP `GET /productSession/item`.
    /// - Remark: Generated from `#/paths//productSession/item/get(productSessionItem)`.
    func productSessionItem(_ input: Operations.productSessionItem.Input) async throws -> Operations.productSessionItem.Output
    /// Retrieves multiple entities of ProductSession type by its ids
    ///
    /// - Remark: HTTP `GET /productSession/items`.
    /// - Remark: Generated from `#/paths//productSession/items/get(productSessionItems)`.
    func productSessionItems(_ input: Operations.productSessionItems.Input) async throws -> Operations.productSessionItems.Output
    /// Retrieves all entities of ProductSession type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /productSession/ldeps`.
    /// - Remark: Generated from `#/paths//productSession/ldeps/get(productSessionLDependents)`.
    func productSessionLDependents(_ input: Operations.productSessionLDependents.Input) async throws -> Operations.productSessionLDependents.Output
    /// Retrieves an entity of SpreadDefinition type by its id
    ///
    /// - Remark: HTTP `GET /spreadDefinition/item`.
    /// - Remark: Generated from `#/paths//spreadDefinition/item/get(spreadDefinitionItem)`.
    func spreadDefinitionItem(_ input: Operations.spreadDefinitionItem.Input) async throws -> Operations.spreadDefinitionItem.Output
    /// Retrieves multiple entities of SpreadDefinition type by its ids
    ///
    /// - Remark: HTTP `GET /spreadDefinition/items`.
    /// - Remark: Generated from `#/paths//spreadDefinition/items/get(spreadDefinitionItems)`.
    func spreadDefinitionItems(_ input: Operations.spreadDefinitionItems.Input) async throws -> Operations.spreadDefinitionItems.Output
    /// Retrieves all entities of Command type related to Order entity
    ///
    /// - Remark: HTTP `GET /command/deps`.
    /// - Remark: Generated from `#/paths//command/deps/get(commandDependents)`.
    func commandDependents(_ input: Operations.commandDependents.Input) async throws -> Operations.commandDependents.Output
    /// Retrieves an entity of Command type by its id
    ///
    /// - Remark: HTTP `GET /command/item`.
    /// - Remark: Generated from `#/paths//command/item/get(commandItem)`.
    func commandItem(_ input: Operations.commandItem.Input) async throws -> Operations.commandItem.Output
    /// Retrieves multiple entities of Command type by its ids
    ///
    /// - Remark: HTTP `GET /command/items`.
    /// - Remark: Generated from `#/paths//command/items/get(commandItems)`.
    func commandItems(_ input: Operations.commandItems.Input) async throws -> Operations.commandItems.Output
    /// Retrieves all entities of Command type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /command/ldeps`.
    /// - Remark: Generated from `#/paths//command/ldeps/get(commandLDependents)`.
    func commandLDependents(_ input: Operations.commandLDependents.Input) async throws -> Operations.commandLDependents.Output
    /// Retrieves all entities of Command type
    ///
    /// - Remark: HTTP `GET /command/list`.
    /// - Remark: Generated from `#/paths//command/list/get(commandList)`.
    func commandList(_ input: Operations.commandList.Input) async throws -> Operations.commandList.Output
    /// Retrieves all entities of CommandReport type related to Command entity
    ///
    /// - Remark: HTTP `GET /commandReport/deps`.
    /// - Remark: Generated from `#/paths//commandReport/deps/get(commandReportDependents)`.
    func commandReportDependents(_ input: Operations.commandReportDependents.Input) async throws -> Operations.commandReportDependents.Output
    /// Retrieves an entity of CommandReport type by its id
    ///
    /// - Remark: HTTP `GET /commandReport/item`.
    /// - Remark: Generated from `#/paths//commandReport/item/get(commandReportItem)`.
    func commandReportItem(_ input: Operations.commandReportItem.Input) async throws -> Operations.commandReportItem.Output
    /// Retrieves multiple entities of CommandReport type by its ids
    ///
    /// - Remark: HTTP `GET /commandReport/items`.
    /// - Remark: Generated from `#/paths//commandReport/items/get(commandReportItems)`.
    func commandReportItems(_ input: Operations.commandReportItems.Input) async throws -> Operations.commandReportItems.Output
    /// Retrieves all entities of CommandReport type related to multiple entities of Command type
    ///
    /// - Remark: HTTP `GET /commandReport/ldeps`.
    /// - Remark: Generated from `#/paths//commandReport/ldeps/get(commandReportLDependents)`.
    func commandReportLDependents(_ input: Operations.commandReportLDependents.Input) async throws -> Operations.commandReportLDependents.Output
    /// Retrieves all entities of CommandReport type
    ///
    /// - Remark: HTTP `GET /commandReport/list`.
    /// - Remark: Generated from `#/paths//commandReport/list/get(commandReportList)`.
    func commandReportList(_ input: Operations.commandReportList.Input) async throws -> Operations.commandReportList.Output
    /// Retrieves all entities of ExecutionReport type related to Command entity
    ///
    /// - Remark: HTTP `GET /executionReport/deps`.
    /// - Remark: Generated from `#/paths//executionReport/deps/get(executionReportDependents)`.
    func executionReportDependents(_ input: Operations.executionReportDependents.Input) async throws -> Operations.executionReportDependents.Output
    /// Retrieves an entity of ExecutionReport type by its name
    ///
    /// - Remark: HTTP `GET /executionReport/find`.
    /// - Remark: Generated from `#/paths//executionReport/find/get(executionReportFind)`.
    func executionReportFind(_ input: Operations.executionReportFind.Input) async throws -> Operations.executionReportFind.Output
    /// Retrieves an entity of ExecutionReport type by its id
    ///
    /// - Remark: HTTP `GET /executionReport/item`.
    /// - Remark: Generated from `#/paths//executionReport/item/get(executionReportItem)`.
    func executionReportItem(_ input: Operations.executionReportItem.Input) async throws -> Operations.executionReportItem.Output
    /// Retrieves multiple entities of ExecutionReport type by its ids
    ///
    /// - Remark: HTTP `GET /executionReport/items`.
    /// - Remark: Generated from `#/paths//executionReport/items/get(executionReportItems)`.
    func executionReportItems(_ input: Operations.executionReportItems.Input) async throws -> Operations.executionReportItems.Output
    /// Retrieves all entities of ExecutionReport type related to multiple entities of Command type
    ///
    /// - Remark: HTTP `GET /executionReport/ldeps`.
    /// - Remark: Generated from `#/paths//executionReport/ldeps/get(executionReportLDependents)`.
    func executionReportLDependents(_ input: Operations.executionReportLDependents.Input) async throws -> Operations.executionReportLDependents.Output
    /// Retrieves all entities of ExecutionReport type
    ///
    /// - Remark: HTTP `GET /executionReport/list`.
    /// - Remark: Generated from `#/paths//executionReport/list/get(executionReportList)`.
    func executionReportList(_ input: Operations.executionReportList.Input) async throws -> Operations.executionReportList.Output
    /// Retrieves entities of ExecutionReport type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /executionReport/suggest`.
    /// - Remark: Generated from `#/paths//executionReport/suggest/get(executionReportSuggest)`.
    func executionReportSuggest(_ input: Operations.executionReportSuggest.Input) async throws -> Operations.executionReportSuggest.Output
    /// Retrieves all entities of Fill type related to Order entity
    ///
    /// - Remark: HTTP `GET /fill/deps`.
    /// - Remark: Generated from `#/paths//fill/deps/get(fillDependents)`.
    func fillDependents(_ input: Operations.fillDependents.Input) async throws -> Operations.fillDependents.Output
    /// Retrieves an entity of Fill type by its id
    ///
    /// - Remark: HTTP `GET /fill/item`.
    /// - Remark: Generated from `#/paths//fill/item/get(fillItem)`.
    func fillItem(_ input: Operations.fillItem.Input) async throws -> Operations.fillItem.Output
    /// Retrieves multiple entities of Fill type by its ids
    ///
    /// - Remark: HTTP `GET /fill/items`.
    /// - Remark: Generated from `#/paths//fill/items/get(fillItems)`.
    func fillItems(_ input: Operations.fillItems.Input) async throws -> Operations.fillItems.Output
    /// Retrieves all entities of Fill type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /fill/ldeps`.
    /// - Remark: Generated from `#/paths//fill/ldeps/get(fillLDependents)`.
    func fillLDependents(_ input: Operations.fillLDependents.Input) async throws -> Operations.fillLDependents.Output
    /// Retrieves all entities of Fill type
    ///
    /// - Remark: HTTP `GET /fill/list`.
    /// - Remark: Generated from `#/paths//fill/list/get(fillList)`.
    func fillList(_ input: Operations.fillList.Input) async throws -> Operations.fillList.Output
    /// Retrieves all entities of FillFee type related to Fill entity
    ///
    /// - Remark: HTTP `GET /fillFee/deps`.
    /// - Remark: Generated from `#/paths//fillFee/deps/get(fillFeeDependents)`.
    func fillFeeDependents(_ input: Operations.fillFeeDependents.Input) async throws -> Operations.fillFeeDependents.Output
    /// Retrieves an entity of FillFee type by its id
    ///
    /// - Remark: HTTP `GET /fillFee/item`.
    /// - Remark: Generated from `#/paths//fillFee/item/get(fillFeeItem)`.
    func fillFeeItem(_ input: Operations.fillFeeItem.Input) async throws -> Operations.fillFeeItem.Output
    /// Retrieves multiple entities of FillFee type by its ids
    ///
    /// - Remark: HTTP `GET /fillFee/items`.
    /// - Remark: Generated from `#/paths//fillFee/items/get(fillFeeItems)`.
    func fillFeeItems(_ input: Operations.fillFeeItems.Input) async throws -> Operations.fillFeeItems.Output
    /// Retrieves all entities of FillFee type related to multiple entities of Fill type
    ///
    /// - Remark: HTTP `GET /fillFee/ldeps`.
    /// - Remark: Generated from `#/paths//fillFee/ldeps/get(fillFeeLDependents)`.
    func fillFeeLDependents(_ input: Operations.fillFeeLDependents.Input) async throws -> Operations.fillFeeLDependents.Output
    /// Retrieves all entities of FillFee type
    ///
    /// - Remark: HTTP `GET /fillFee/list`.
    /// - Remark: Generated from `#/paths//fillFee/list/get(fillFeeList)`.
    func fillFeeList(_ input: Operations.fillFeeList.Input) async throws -> Operations.fillFeeList.Output
    /// ### Make a request to cancel an order.
    ///
    /// - Remark: HTTP `POST /order/cancelorder`.
    /// - Remark: Generated from `#/paths//order/cancelorder/post(cancelOrder)`.
    func cancelOrder(_ input: Operations.cancelOrder.Input) async throws -> Operations.cancelOrder.Output
    /// Retrieves all entities of Order type related to Account entity
    ///
    /// - Remark: HTTP `GET /order/deps`.
    /// - Remark: Generated from `#/paths//order/deps/get(orderDependents)`.
    func orderDependents(_ input: Operations.orderDependents.Input) async throws -> Operations.orderDependents.Output
    /// Retrieves an entity of Order type by its id
    ///
    /// - Remark: HTTP `GET /order/item`.
    /// - Remark: Generated from `#/paths//order/item/get(orderItem)`.
    func orderItem(_ input: Operations.orderItem.Input) async throws -> Operations.orderItem.Output
    /// Retrieves multiple entities of Order type by its ids
    ///
    /// - Remark: HTTP `GET /order/items`.
    /// - Remark: Generated from `#/paths//order/items/get(orderItems)`.
    func orderItems(_ input: Operations.orderItems.Input) async throws -> Operations.orderItems.Output
    /// Retrieves all entities of Order type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /order/ldeps`.
    /// - Remark: Generated from `#/paths//order/ldeps/get(orderLDependents)`.
    func orderLDependents(_ input: Operations.orderLDependents.Input) async throws -> Operations.orderLDependents.Output
    /// ### Send a request to cancel orders for a specific contract and close that position for the given account.
    /// This request initiates the cancellation process of open orders for an existing position held by this account.
    /// > Note: This is a request to cancel orders and close a position, not a guarantee. Any operation could fail for a number of reasons, ranging from Exchange rejection to incorrect parameterization.
    ///
    ///
    /// - Remark: HTTP `POST /order/liquidateposition`.
    /// - Remark: Generated from `#/paths//order/liquidateposition/post(liquidatePosition)`.
    func liquidatePosition(_ input: Operations.liquidatePosition.Input) async throws -> Operations.liquidatePosition.Output
    /// Retrieves all entities of Order type
    ///
    /// - Remark: HTTP `GET /order/list`.
    /// - Remark: Generated from `#/paths//order/list/get(orderList)`.
    func orderList(_ input: Operations.orderList.Input) async throws -> Operations.orderList.Output
    /// ### Make a request to modify the parameters of an order.
    /// You can request changes to an order, such as the trigger price for a Stop or Limit order.
    /// > *Note*: This is no guarantee that the order can be modified in the way requests. Market, exchange and logical rules apply. 
    ///
    /// - Remark: HTTP `POST /order/modifyorder`.
    /// - Remark: Generated from `#/paths//order/modifyorder/post(modifyOrder)`.
    func modifyOrder(_ input: Operations.modifyOrder.Input) async throws -> Operations.modifyOrder.Output
    /// ### Place a Order Cancels Order order strategy.
    /// OCO order strategies link 2 orders together such that if one order is filled, the other order is cancelled. You must provide an `other` parameter pertaining to the order linked to this one. The `other` must specify an `action` and an `orderType` which determines the other parameters that must be set. For example a Limit or Stop order must use the `price` parameter, but a Stop-Limit will require a `price` and a `stopPrice`. Below is an example of an OCO that either sells to take profit at 4200 points, or sells to stop loss at 4100 points.
    ///
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const limit = {
    ///     action: 'Sell',
    ///     orderType: 'Limit',
    ///     price: 4200.00
    /// }
    /// const oco = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MESM1",
    ///     orderQty: 1,
    ///     orderType: "Stop",
    ///     price: 4100.00
    ///     isAutomated: true, //must be true if this isn't an order made directly by a human
    ///     other: limit
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeoco', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(oco)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000, ocoId: 0000000 }
    /// ```
    ///
    /// - Remark: HTTP `POST /order/placeoco`.
    /// - Remark: Generated from `#/paths//order/placeoco/post(placeOCO)`.
    func placeOCO(_ input: Operations.placeOCO.Input) async throws -> Operations.placeOCO.Output
    /// ### Make a request to place an order. 
    /// Depending on the order type, the parameters vary. In the Trader application, you can see the details of placing a standard order ticket by adding the Order Ticket module to your workspace.
    ///
    /// #### *Market Order*
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const body = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MYMM1",
    ///     orderQty: 1,
    ///     orderType: "Market",
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeorder', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(body)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    ///
    /// ```
    ///
    /// #### *Sell Limit*
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const body = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Sell",
    ///     symbol: "MYMM1",
    ///     orderQty: 1,
    ///     orderType: "Limit",
    ///     price: 35000, //use for single value like limit or stop
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeorder', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(body)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    ///
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /order/placeorder`.
    /// - Remark: Generated from `#/paths//order/placeorder/post(placeOrder)`.
    func placeOrder(_ input: Operations.placeOrder.Input) async throws -> Operations.placeOrder.Output
    /// ### Place an Order Sends Order order strategy.
    /// In the Trader application, the details of OSO orders can be viewed by adding the Order Ticket module to your workspace and selecting the Advanced workspace options with Brackets enabled. OSO orders allow for the most complex multi-bracket trading strategies. As an example, imagine MESM1 is trading around 4175.00 points. You want to place a Buy order for 4150.00 points, buying below market. We place an OSO to take profits at 4200.00 points. If the initial order is filled, the `bracket1` order will be sent. Below is an example in JavaScript:
    ///
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    ///
    /// const oso = {
    ///     action: 'Sell',
    ///     orderType: 'Limit',
    ///     price: 4200.00,
    /// }
    ///
    /// const initial = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MESM1",
    ///     orderQty: 1,
    ///     orderType: "Limit",
    ///     price: 4150.00,
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    ///     bracket1: oso
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeOSO', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(initial)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    /// ```
    ///
    /// >*Note:* If you specify both `bracket1` and `bracket2` the two orders will be linked as an OCO, where filling one will cancel the other.
    ///
    /// - Remark: HTTP `POST /order/placeoso`.
    /// - Remark: Generated from `#/paths//order/placeoso/post(placeOSO)`.
    func placeOSO(_ input: Operations.placeOSO.Input) async throws -> Operations.placeOSO.Output
    /// Retrieves all entities of OrderStrategy type related to Account entity
    ///
    /// - Remark: HTTP `GET /orderStrategy/deps`.
    /// - Remark: Generated from `#/paths//orderStrategy/deps/get(orderStrategyDependents)`.
    func orderStrategyDependents(_ input: Operations.orderStrategyDependents.Input) async throws -> Operations.orderStrategyDependents.Output
    /// ### Stop a running multi-bracket strategy.
    ///
    /// - Remark: HTTP `POST /orderStrategy/interruptorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/interruptorderstrategy/post(interruptOrderStrategy)`.
    func interruptOrderStrategy(_ input: Operations.interruptOrderStrategy.Input) async throws -> Operations.interruptOrderStrategy.Output
    /// Retrieves an entity of OrderStrategy type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategy/item`.
    /// - Remark: Generated from `#/paths//orderStrategy/item/get(orderStrategyItem)`.
    func orderStrategyItem(_ input: Operations.orderStrategyItem.Input) async throws -> Operations.orderStrategyItem.Output
    /// Retrieves multiple entities of OrderStrategy type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategy/items`.
    /// - Remark: Generated from `#/paths//orderStrategy/items/get(orderStrategyItems)`.
    func orderStrategyItems(_ input: Operations.orderStrategyItems.Input) async throws -> Operations.orderStrategyItems.Output
    /// Retrieves all entities of OrderStrategy type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /orderStrategy/ldeps`.
    /// - Remark: Generated from `#/paths//orderStrategy/ldeps/get(orderStrategyLDependents)`.
    func orderStrategyLDependents(_ input: Operations.orderStrategyLDependents.Input) async throws -> Operations.orderStrategyLDependents.Output
    /// Retrieves all entities of OrderStrategy type
    ///
    /// - Remark: HTTP `GET /orderStrategy/list`.
    /// - Remark: Generated from `#/paths//orderStrategy/list/get(orderStrategyList)`.
    func orderStrategyList(_ input: Operations.orderStrategyList.Input) async throws -> Operations.orderStrategyList.Output
    /// ### Modify an existing Order Strategy
    ///
    /// - Remark: HTTP `POST /orderStrategy/modifyorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/modifyorderstrategy/post(modifyOrderStrategy)`.
    func modifyOrderStrategy(_ input: Operations.modifyOrderStrategy.Input) async throws -> Operations.modifyOrderStrategy.Output
    /// ### Start a multi-bracket trading strategy.
    /// This endpoint is used with a WebSocket. You can create any number of brackets and add them to `brackets` field on the `params` object as a JSON string.
    ///
    /// ```js
    ///
    /// const URL = 'wss://demo.tradovateapi.com/v1/websocket'
    ///
    /// const params = {
    ///     entryVersion: {
    ///         orderQty: 1,
    ///         orderType: "Market"
    ///     },
    ///     brackets: [{
    ///         qty: 1,
    ///         profitTarget: -30,
    ///         stopLoss: 15,
    ///         trailingStop: false
    ///     }]
    /// }
    ///
    /// const body = {
    ///     accountId: myAcctId,
    ///     accountSpec: name,
    ///     symbol: 'MESM1',
    ///     action: 'Sell',
    ///     orderStrategyTypeId: 2, //2 is 'multibracket', we currently only offer this strategy but more may exist in the future.
    ///     params: JSON.stringify(params)
    /// }
    ///
    /// const mySocket = new WebSocket(URL)
    ///
    /// //authorize socket using your access token
    /// mySocket.onopen = function() {
    ///     mySocket.send(`authorize\n0\n\n${accessToken}`)
    /// }
    ///
    /// mySocket.send(`orderstrategy/startorderstrategy\n4\n\n${JSON.stringify(body)}`)
    ///
    /// ```
    ///
    /// For more details about working with advanced order types, see [placeOrder](/#operation/placeOrder), [placeOCO](/#operation/placeOCO), and [placeOSO](/#operation/placeOSO). 
    ///
    ///
    /// - Remark: HTTP `POST /orderStrategy/startorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/startorderstrategy/post(startOrderStrategy)`.
    func startOrderStrategy(_ input: Operations.startOrderStrategy.Input) async throws -> Operations.startOrderStrategy.Output
    /// Retrieves all entities of OrderStrategyLink type related to OrderStrategy entity
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/deps`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/deps/get(orderStrategyLinkDependents)`.
    func orderStrategyLinkDependents(_ input: Operations.orderStrategyLinkDependents.Input) async throws -> Operations.orderStrategyLinkDependents.Output
    /// Retrieves an entity of OrderStrategyLink type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/item`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/item/get(orderStrategyLinkItem)`.
    func orderStrategyLinkItem(_ input: Operations.orderStrategyLinkItem.Input) async throws -> Operations.orderStrategyLinkItem.Output
    /// Retrieves multiple entities of OrderStrategyLink type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/items`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/items/get(orderStrategyLinkItems)`.
    func orderStrategyLinkItems(_ input: Operations.orderStrategyLinkItems.Input) async throws -> Operations.orderStrategyLinkItems.Output
    /// Retrieves all entities of OrderStrategyLink type related to multiple entities of OrderStrategy type
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/ldeps`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/ldeps/get(orderStrategyLinkLDependents)`.
    func orderStrategyLinkLDependents(_ input: Operations.orderStrategyLinkLDependents.Input) async throws -> Operations.orderStrategyLinkLDependents.Output
    /// Retrieves all entities of OrderStrategyLink type
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/list`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/list/get(orderStrategyLinkList)`.
    func orderStrategyLinkList(_ input: Operations.orderStrategyLinkList.Input) async throws -> Operations.orderStrategyLinkList.Output
    /// Retrieves all entities of OrderVersion type related to Order entity
    ///
    /// - Remark: HTTP `GET /orderVersion/deps`.
    /// - Remark: Generated from `#/paths//orderVersion/deps/get(orderVersionDependents)`.
    func orderVersionDependents(_ input: Operations.orderVersionDependents.Input) async throws -> Operations.orderVersionDependents.Output
    /// Retrieves an entity of OrderVersion type by its id
    ///
    /// - Remark: HTTP `GET /orderVersion/item`.
    /// - Remark: Generated from `#/paths//orderVersion/item/get(orderVersionItem)`.
    func orderVersionItem(_ input: Operations.orderVersionItem.Input) async throws -> Operations.orderVersionItem.Output
    /// Retrieves multiple entities of OrderVersion type by its ids
    ///
    /// - Remark: HTTP `GET /orderVersion/items`.
    /// - Remark: Generated from `#/paths//orderVersion/items/get(orderVersionItems)`.
    func orderVersionItems(_ input: Operations.orderVersionItems.Input) async throws -> Operations.orderVersionItems.Output
    /// Retrieves all entities of OrderVersion type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /orderVersion/ldeps`.
    /// - Remark: Generated from `#/paths//orderVersion/ldeps/get(orderVersionLDependents)`.
    func orderVersionLDependents(_ input: Operations.orderVersionLDependents.Input) async throws -> Operations.orderVersionLDependents.Output
    /// Retrieves all entities of OrderVersion type
    ///
    /// - Remark: HTTP `GET /orderVersion/list`.
    /// - Remark: Generated from `#/paths//orderVersion/list/get(orderVersionList)`.
    func orderVersionList(_ input: Operations.orderVersionList.Input) async throws -> Operations.orderVersionList.Output
    /// Retrieves all entities of FillPair type related to Position entity
    ///
    /// - Remark: HTTP `GET /fillPair/deps`.
    /// - Remark: Generated from `#/paths//fillPair/deps/get(fillPairDependents)`.
    func fillPairDependents(_ input: Operations.fillPairDependents.Input) async throws -> Operations.fillPairDependents.Output
    /// Retrieves an entity of FillPair type by its id
    ///
    /// - Remark: HTTP `GET /fillPair/item`.
    /// - Remark: Generated from `#/paths//fillPair/item/get(fillPairItem)`.
    func fillPairItem(_ input: Operations.fillPairItem.Input) async throws -> Operations.fillPairItem.Output
    /// Retrieves multiple entities of FillPair type by its ids
    ///
    /// - Remark: HTTP `GET /fillPair/items`.
    /// - Remark: Generated from `#/paths//fillPair/items/get(fillPairItems)`.
    func fillPairItems(_ input: Operations.fillPairItems.Input) async throws -> Operations.fillPairItems.Output
    /// Retrieves all entities of FillPair type related to multiple entities of Position type
    ///
    /// - Remark: HTTP `GET /fillPair/ldeps`.
    /// - Remark: Generated from `#/paths//fillPair/ldeps/get(fillPairLDependents)`.
    func fillPairLDependents(_ input: Operations.fillPairLDependents.Input) async throws -> Operations.fillPairLDependents.Output
    /// Retrieves all entities of FillPair type
    ///
    /// - Remark: HTTP `GET /fillPair/list`.
    /// - Remark: Generated from `#/paths//fillPair/list/get(fillPairList)`.
    func fillPairList(_ input: Operations.fillPairList.Input) async throws -> Operations.fillPairList.Output
    /// Retrieves all entities of Position type related to Account entity
    ///
    /// - Remark: HTTP `GET /position/deps`.
    /// - Remark: Generated from `#/paths//position/deps/get(positionDependents)`.
    func positionDependents(_ input: Operations.positionDependents.Input) async throws -> Operations.positionDependents.Output
    /// Retrieves an entity of Position type by its name
    ///
    /// - Remark: HTTP `GET /position/find`.
    /// - Remark: Generated from `#/paths//position/find/get(positionFind)`.
    func positionFind(_ input: Operations.positionFind.Input) async throws -> Operations.positionFind.Output
    /// Retrieves an entity of Position type by its id
    ///
    /// - Remark: HTTP `GET /position/item`.
    /// - Remark: Generated from `#/paths//position/item/get(positionItem)`.
    func positionItem(_ input: Operations.positionItem.Input) async throws -> Operations.positionItem.Output
    /// Retrieves multiple entities of Position type by its ids
    ///
    /// - Remark: HTTP `GET /position/items`.
    /// - Remark: Generated from `#/paths//position/items/get(positionItems)`.
    func positionItems(_ input: Operations.positionItems.Input) async throws -> Operations.positionItems.Output
    /// Retrieves all entities of Position type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /position/ldeps`.
    /// - Remark: Generated from `#/paths//position/ldeps/get(positionLDependents)`.
    func positionLDependents(_ input: Operations.positionLDependents.Input) async throws -> Operations.positionLDependents.Output
    /// Retrieves all entities of Position type
    ///
    /// - Remark: HTTP `GET /position/list`.
    /// - Remark: Generated from `#/paths//position/list/get(positionList)`.
    func positionList(_ input: Operations.positionList.Input) async throws -> Operations.positionList.Output
    /// Retrieves all entities of Account type related to User entity
    ///
    /// - Remark: HTTP `GET /account/deps`.
    /// - Remark: Generated from `#/paths//account/deps/get(accountDependents)`.
    func accountDependents(_ input: Operations.accountDependents.Input) async throws -> Operations.accountDependents.Output
    /// Retrieves an entity of Account type by its name
    ///
    /// - Remark: HTTP `GET /account/find`.
    /// - Remark: Generated from `#/paths//account/find/get(accountFind)`.
    func accountFind(_ input: Operations.accountFind.Input) async throws -> Operations.accountFind.Output
    /// Retrieves an entity of Account type by its id
    ///
    /// - Remark: HTTP `GET /account/item`.
    /// - Remark: Generated from `#/paths//account/item/get(accountItem)`.
    func accountItem(_ input: Operations.accountItem.Input) async throws -> Operations.accountItem.Output
    /// Retrieves multiple entities of Account type by its ids
    ///
    /// - Remark: HTTP `GET /account/items`.
    /// - Remark: Generated from `#/paths//account/items/get(accountItems)`.
    func accountItems(_ input: Operations.accountItems.Input) async throws -> Operations.accountItems.Output
    /// Retrieves all entities of Account type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /account/ldeps`.
    /// - Remark: Generated from `#/paths//account/ldeps/get(accountLDependents)`.
    func accountLDependents(_ input: Operations.accountLDependents.Input) async throws -> Operations.accountLDependents.Output
    /// Retrieves all entities of Account type
    ///
    /// - Remark: HTTP `GET /account/list`.
    /// - Remark: Generated from `#/paths//account/list/get(accountList)`.
    func accountList(_ input: Operations.accountList.Input) async throws -> Operations.accountList.Output
    /// ### Reset a demo account's state to a previous day
    /// Return 1 or more simulation accounts to their state at market open on the given TradeDate date. 
    ///
    /// - Remark: HTTP `POST /account/resetdemoaccountstate`.
    /// - Remark: Generated from `#/paths//account/resetdemoaccountstate/post(resetDemoAccountState)`.
    func resetDemoAccountState(_ input: Operations.resetDemoAccountState.Input) async throws -> Operations.resetDemoAccountState.Output
    /// Retrieves entities of Account type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /account/suggest`.
    /// - Remark: Generated from `#/paths//account/suggest/get(accountSuggest)`.
    func accountSuggest(_ input: Operations.accountSuggest.Input) async throws -> Operations.accountSuggest.Output
    /// Retrieves all entities of CashBalance type related to Account entity
    ///
    /// - Remark: HTTP `GET /cashBalance/deps`.
    /// - Remark: Generated from `#/paths//cashBalance/deps/get(cashBalanceDependents)`.
    func cashBalanceDependents(_ input: Operations.cashBalanceDependents.Input) async throws -> Operations.cashBalanceDependents.Output
    /// ### Get a snapshot of an account's current cash balance.
    /// > *Note*: Using this endpoint many times in succession is an anti-pattern. If you need to check a `cashBalance` in real-time, instead use a WebSocket connected to the standard Tradovate WebSocket URL and initialize a real-time user data subscription via the `user/syncrequest` endpoint.
    ///
    /// - Remark: HTTP `POST /cashBalance/getcashbalancesnapshot`.
    /// - Remark: Generated from `#/paths//cashBalance/getcashbalancesnapshot/post(getCashBalanceSnapshot)`.
    func getCashBalanceSnapshot(_ input: Operations.getCashBalanceSnapshot.Input) async throws -> Operations.getCashBalanceSnapshot.Output
    /// Retrieves an entity of CashBalance type by its id
    ///
    /// - Remark: HTTP `GET /cashBalance/item`.
    /// - Remark: Generated from `#/paths//cashBalance/item/get(cashBalanceItem)`.
    func cashBalanceItem(_ input: Operations.cashBalanceItem.Input) async throws -> Operations.cashBalanceItem.Output
    /// Retrieves multiple entities of CashBalance type by its ids
    ///
    /// - Remark: HTTP `GET /cashBalance/items`.
    /// - Remark: Generated from `#/paths//cashBalance/items/get(cashBalanceItems)`.
    func cashBalanceItems(_ input: Operations.cashBalanceItems.Input) async throws -> Operations.cashBalanceItems.Output
    /// Retrieves all entities of CashBalance type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /cashBalance/ldeps`.
    /// - Remark: Generated from `#/paths//cashBalance/ldeps/get(cashBalanceLDependents)`.
    func cashBalanceLDependents(_ input: Operations.cashBalanceLDependents.Input) async throws -> Operations.cashBalanceLDependents.Output
    /// Retrieves all entities of CashBalance type
    ///
    /// - Remark: HTTP `GET /cashBalance/list`.
    /// - Remark: Generated from `#/paths//cashBalance/list/get(cashBalanceList)`.
    func cashBalanceList(_ input: Operations.cashBalanceList.Input) async throws -> Operations.cashBalanceList.Output
    /// Retrieves all entities of CashBalanceLog type related to Account entity
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/deps`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/deps/get(cashBalanceLogDependents)`.
    func cashBalanceLogDependents(_ input: Operations.cashBalanceLogDependents.Input) async throws -> Operations.cashBalanceLogDependents.Output
    /// Retrieves an entity of CashBalanceLog type by its id
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/item`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/item/get(cashBalanceLogItem)`.
    func cashBalanceLogItem(_ input: Operations.cashBalanceLogItem.Input) async throws -> Operations.cashBalanceLogItem.Output
    /// Retrieves multiple entities of CashBalanceLog type by its ids
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/items`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/items/get(cashBalanceLogItems)`.
    func cashBalanceLogItems(_ input: Operations.cashBalanceLogItems.Input) async throws -> Operations.cashBalanceLogItems.Output
    /// Retrieves all entities of CashBalanceLog type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/ldeps`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/ldeps/get(cashBalanceLogLDependents)`.
    func cashBalanceLogLDependents(_ input: Operations.cashBalanceLogLDependents.Input) async throws -> Operations.cashBalanceLogLDependents.Output
    /// Retrieves all entities of MarginSnapshot type related to Account entity
    ///
    /// - Remark: HTTP `GET /marginSnapshot/deps`.
    /// - Remark: Generated from `#/paths//marginSnapshot/deps/get(marginSnapshotDependents)`.
    func marginSnapshotDependents(_ input: Operations.marginSnapshotDependents.Input) async throws -> Operations.marginSnapshotDependents.Output
    /// Retrieves an entity of MarginSnapshot type by its id
    ///
    /// - Remark: HTTP `GET /marginSnapshot/item`.
    /// - Remark: Generated from `#/paths//marginSnapshot/item/get(marginSnapshotItem)`.
    func marginSnapshotItem(_ input: Operations.marginSnapshotItem.Input) async throws -> Operations.marginSnapshotItem.Output
    /// Retrieves multiple entities of MarginSnapshot type by its ids
    ///
    /// - Remark: HTTP `GET /marginSnapshot/items`.
    /// - Remark: Generated from `#/paths//marginSnapshot/items/get(marginSnapshotItems)`.
    func marginSnapshotItems(_ input: Operations.marginSnapshotItems.Input) async throws -> Operations.marginSnapshotItems.Output
    /// Retrieves all entities of MarginSnapshot type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /marginSnapshot/ldeps`.
    /// - Remark: Generated from `#/paths//marginSnapshot/ldeps/get(marginSnapshotLDependents)`.
    func marginSnapshotLDependents(_ input: Operations.marginSnapshotLDependents.Input) async throws -> Operations.marginSnapshotLDependents.Output
    /// Retrieves all entities of MarginSnapshot type
    ///
    /// - Remark: HTTP `GET /marginSnapshot/list`.
    /// - Remark: Generated from `#/paths//marginSnapshot/list/get(marginSnapshotList)`.
    func marginSnapshotList(_ input: Operations.marginSnapshotList.Input) async throws -> Operations.marginSnapshotList.Output
    /// Retrieves all entities of TradingPermission type related to User entity
    ///
    /// - Remark: HTTP `GET /tradingPermission/deps`.
    /// - Remark: Generated from `#/paths//tradingPermission/deps/get(tradingPermissionDependents)`.
    func tradingPermissionDependents(_ input: Operations.tradingPermissionDependents.Input) async throws -> Operations.tradingPermissionDependents.Output
    /// Retrieves an entity of TradingPermission type by its id
    ///
    /// - Remark: HTTP `GET /tradingPermission/item`.
    /// - Remark: Generated from `#/paths//tradingPermission/item/get(tradingPermissionItem)`.
    func tradingPermissionItem(_ input: Operations.tradingPermissionItem.Input) async throws -> Operations.tradingPermissionItem.Output
    /// Retrieves multiple entities of TradingPermission type by its ids
    ///
    /// - Remark: HTTP `GET /tradingPermission/items`.
    /// - Remark: Generated from `#/paths//tradingPermission/items/get(tradingPermissionItems)`.
    func tradingPermissionItems(_ input: Operations.tradingPermissionItems.Input) async throws -> Operations.tradingPermissionItems.Output
    /// Retrieves all entities of TradingPermission type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /tradingPermission/ldeps`.
    /// - Remark: Generated from `#/paths//tradingPermission/ldeps/get(tradingPermissionLDependents)`.
    func tradingPermissionLDependents(_ input: Operations.tradingPermissionLDependents.Input) async throws -> Operations.tradingPermissionLDependents.Output
    /// Retrieves all entities of TradingPermission type
    ///
    /// - Remark: HTTP `GET /tradingPermission/list`.
    /// - Remark: Generated from `#/paths//tradingPermission/list/get(tradingPermissionList)`.
    func tradingPermissionList(_ input: Operations.tradingPermissionList.Input) async throws -> Operations.tradingPermissionList.Output
    /// Retrieves all entities of AccountRiskStatus type related to Account entity
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/deps`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/deps/get(accountRiskStatusDependents)`.
    func accountRiskStatusDependents(_ input: Operations.accountRiskStatusDependents.Input) async throws -> Operations.accountRiskStatusDependents.Output
    /// Retrieves an entity of AccountRiskStatus type by its id
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/item`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/item/get(accountRiskStatusItem)`.
    func accountRiskStatusItem(_ input: Operations.accountRiskStatusItem.Input) async throws -> Operations.accountRiskStatusItem.Output
    /// Retrieves multiple entities of AccountRiskStatus type by its ids
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/items`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/items/get(accountRiskStatusItems)`.
    func accountRiskStatusItems(_ input: Operations.accountRiskStatusItems.Input) async throws -> Operations.accountRiskStatusItems.Output
    /// Retrieves all entities of AccountRiskStatus type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/ldeps`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/ldeps/get(accountRiskStatusLDependents)`.
    func accountRiskStatusLDependents(_ input: Operations.accountRiskStatusLDependents.Input) async throws -> Operations.accountRiskStatusLDependents.Output
    /// Retrieves all entities of AccountRiskStatus type
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/list`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/list/get(accountRiskStatusList)`.
    func accountRiskStatusList(_ input: Operations.accountRiskStatusList.Input) async throws -> Operations.accountRiskStatusList.Output
    /// Retrieves all entities of ContractMargin type related to Contract entity
    ///
    /// - Remark: HTTP `GET /contractMargin/deps`.
    /// - Remark: Generated from `#/paths//contractMargin/deps/get(contractMarginDependents)`.
    func contractMarginDependents(_ input: Operations.contractMarginDependents.Input) async throws -> Operations.contractMarginDependents.Output
    /// Retrieves an entity of ContractMargin type by its id
    ///
    /// - Remark: HTTP `GET /contractMargin/item`.
    /// - Remark: Generated from `#/paths//contractMargin/item/get(contractMarginItem)`.
    func contractMarginItem(_ input: Operations.contractMarginItem.Input) async throws -> Operations.contractMarginItem.Output
    /// Retrieves multiple entities of ContractMargin type by its ids
    ///
    /// - Remark: HTTP `GET /contractMargin/items`.
    /// - Remark: Generated from `#/paths//contractMargin/items/get(contractMarginItems)`.
    func contractMarginItems(_ input: Operations.contractMarginItems.Input) async throws -> Operations.contractMarginItems.Output
    /// Retrieves all entities of ContractMargin type related to multiple entities of Contract type
    ///
    /// - Remark: HTTP `GET /contractMargin/ldeps`.
    /// - Remark: Generated from `#/paths//contractMargin/ldeps/get(contractMarginLDependents)`.
    func contractMarginLDependents(_ input: Operations.contractMarginLDependents.Input) async throws -> Operations.contractMarginLDependents.Output
    /// Retrieves all entities of ProductMargin type related to Product entity
    ///
    /// - Remark: HTTP `GET /productMargin/deps`.
    /// - Remark: Generated from `#/paths//productMargin/deps/get(productMarginDependents)`.
    func productMarginDependents(_ input: Operations.productMarginDependents.Input) async throws -> Operations.productMarginDependents.Output
    /// Retrieves an entity of ProductMargin type by its id
    ///
    /// - Remark: HTTP `GET /productMargin/item`.
    /// - Remark: Generated from `#/paths//productMargin/item/get(productMarginItem)`.
    func productMarginItem(_ input: Operations.productMarginItem.Input) async throws -> Operations.productMarginItem.Output
    /// Retrieves multiple entities of ProductMargin type by its ids
    ///
    /// - Remark: HTTP `GET /productMargin/items`.
    /// - Remark: Generated from `#/paths//productMargin/items/get(productMarginItems)`.
    func productMarginItems(_ input: Operations.productMarginItems.Input) async throws -> Operations.productMarginItems.Output
    /// Retrieves all entities of ProductMargin type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /productMargin/ldeps`.
    /// - Remark: Generated from `#/paths//productMargin/ldeps/get(productMarginLDependents)`.
    func productMarginLDependents(_ input: Operations.productMarginLDependents.Input) async throws -> Operations.productMarginLDependents.Output
    /// Retrieves all entities of ProductMargin type
    ///
    /// - Remark: HTTP `GET /productMargin/list`.
    /// - Remark: Generated from `#/paths//productMargin/list/get(productMarginList)`.
    func productMarginList(_ input: Operations.productMarginList.Input) async throws -> Operations.productMarginList.Output
    /// Creates a new entity of UserAccountAutoLiq
    ///
    /// - Remark: HTTP `POST /userAccountAutoLiq/create`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/create/post(userAccountAutoLiqCreate)`.
    func userAccountAutoLiqCreate(_ input: Operations.userAccountAutoLiqCreate.Input) async throws -> Operations.userAccountAutoLiqCreate.Output
    /// Retrieves all entities of UserAccountAutoLiq type related to Account entity
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/deps`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/deps/get(userAccountAutoLiqDependents)`.
    func userAccountAutoLiqDependents(_ input: Operations.userAccountAutoLiqDependents.Input) async throws -> Operations.userAccountAutoLiqDependents.Output
    /// Retrieves an entity of UserAccountAutoLiq type by its id
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/item`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/item/get(userAccountAutoLiqItem)`.
    func userAccountAutoLiqItem(_ input: Operations.userAccountAutoLiqItem.Input) async throws -> Operations.userAccountAutoLiqItem.Output
    /// Retrieves multiple entities of UserAccountAutoLiq type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/items`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/items/get(userAccountAutoLiqItems)`.
    func userAccountAutoLiqItems(_ input: Operations.userAccountAutoLiqItems.Input) async throws -> Operations.userAccountAutoLiqItems.Output
    /// Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/ldeps/get(userAccountAutoLiqLDependents)`.
    func userAccountAutoLiqLDependents(_ input: Operations.userAccountAutoLiqLDependents.Input) async throws -> Operations.userAccountAutoLiqLDependents.Output
    /// Retrieves all entities of UserAccountAutoLiq type
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/list`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/list/get(userAccountAutoLiqList)`.
    func userAccountAutoLiqList(_ input: Operations.userAccountAutoLiqList.Input) async throws -> Operations.userAccountAutoLiqList.Output
    /// Updates an existing entity of UserAccountAutoLiq
    ///
    /// - Remark: HTTP `POST /userAccountAutoLiq/update`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/update/post(userAccountAutoLiqUpdate)`.
    func userAccountAutoLiqUpdate(_ input: Operations.userAccountAutoLiqUpdate.Input) async throws -> Operations.userAccountAutoLiqUpdate.Output
    /// Creates a new entity of UserAccountPositionLimit
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/create`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/create/post(userAccountPositionLimitCreate)`.
    func userAccountPositionLimitCreate(_ input: Operations.userAccountPositionLimitCreate.Input) async throws -> Operations.userAccountPositionLimitCreate.Output
    /// ### Remove an account position limit for a user.
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/deleteuseraccountpositionlimit`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deleteuseraccountpositionlimit/post(deleteUserAccountPositionLimit)`.
    func deleteUserAccountPositionLimit(_ input: Operations.deleteUserAccountPositionLimit.Input) async throws -> Operations.deleteUserAccountPositionLimit.Output
    /// ### Remove a Risk Setting parameter.
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/deleteuseraccountriskparameter`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deleteuseraccountriskparameter/post(deleteUserAccountRiskParameter)`.
    func deleteUserAccountRiskParameter(_ input: Operations.deleteUserAccountRiskParameter.Input) async throws -> Operations.deleteUserAccountRiskParameter.Output
    /// Retrieves all entities of UserAccountPositionLimit type related to Account entity
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/deps`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deps/get(userAccountPositionLimitDependents)`.
    func userAccountPositionLimitDependents(_ input: Operations.userAccountPositionLimitDependents.Input) async throws -> Operations.userAccountPositionLimitDependents.Output
    /// Retrieves an entity of UserAccountPositionLimit type by its id
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/item`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/item/get(userAccountPositionLimitItem)`.
    func userAccountPositionLimitItem(_ input: Operations.userAccountPositionLimitItem.Input) async throws -> Operations.userAccountPositionLimitItem.Output
    /// Retrieves multiple entities of UserAccountPositionLimit type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/items`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/items/get(userAccountPositionLimitItems)`.
    func userAccountPositionLimitItems(_ input: Operations.userAccountPositionLimitItems.Input) async throws -> Operations.userAccountPositionLimitItems.Output
    /// Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/ldeps/get(userAccountPositionLimitLDependents)`.
    func userAccountPositionLimitLDependents(_ input: Operations.userAccountPositionLimitLDependents.Input) async throws -> Operations.userAccountPositionLimitLDependents.Output
    /// Updates an existing entity of UserAccountPositionLimit
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/update`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/update/post(userAccountPositionLimitUpdate)`.
    func userAccountPositionLimitUpdate(_ input: Operations.userAccountPositionLimitUpdate.Input) async throws -> Operations.userAccountPositionLimitUpdate.Output
    /// Creates a new entity of UserAccountRiskParameter
    ///
    /// - Remark: HTTP `POST /userAccountRiskParameter/create`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/create/post(userAccountRiskParameterCreate)`.
    func userAccountRiskParameterCreate(_ input: Operations.userAccountRiskParameterCreate.Input) async throws -> Operations.userAccountRiskParameterCreate.Output
    /// Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/deps`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/deps/get(userAccountRiskParameterDependents)`.
    func userAccountRiskParameterDependents(_ input: Operations.userAccountRiskParameterDependents.Input) async throws -> Operations.userAccountRiskParameterDependents.Output
    /// Retrieves an entity of UserAccountRiskParameter type by its id
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/item`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/item/get(userAccountRiskParameterItem)`.
    func userAccountRiskParameterItem(_ input: Operations.userAccountRiskParameterItem.Input) async throws -> Operations.userAccountRiskParameterItem.Output
    /// Retrieves multiple entities of UserAccountRiskParameter type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/items`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/items/get(userAccountRiskParameterItems)`.
    func userAccountRiskParameterItems(_ input: Operations.userAccountRiskParameterItems.Input) async throws -> Operations.userAccountRiskParameterItems.Output
    /// Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/ldeps/get(userAccountRiskParameterLDependents)`.
    func userAccountRiskParameterLDependents(_ input: Operations.userAccountRiskParameterLDependents.Input) async throws -> Operations.userAccountRiskParameterLDependents.Output
    /// Updates an existing entity of UserAccountRiskParameter
    ///
    /// - Remark: HTTP `POST /userAccountRiskParameter/update`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/update/post(userAccountRiskParameterUpdate)`.
    func userAccountRiskParameterUpdate(_ input: Operations.userAccountRiskParameterUpdate.Input) async throws -> Operations.userAccountRiskParameterUpdate.Output
    /// Retrieves an entity of MarketDataSubscriptionExchangeScope type by its name
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/find`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/find/get(marketDataSubscriptionExchangeScopeFind)`.
    func marketDataSubscriptionExchangeScopeFind(_ input: Operations.marketDataSubscriptionExchangeScopeFind.Input) async throws -> Operations.marketDataSubscriptionExchangeScopeFind.Output
    /// Retrieves an entity of MarketDataSubscriptionExchangeScope type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/item/get(marketDataSubscriptionExchangeScopeItem)`.
    func marketDataSubscriptionExchangeScopeItem(_ input: Operations.marketDataSubscriptionExchangeScopeItem.Input) async throws -> Operations.marketDataSubscriptionExchangeScopeItem.Output
    /// Retrieves multiple entities of MarketDataSubscriptionExchangeScope type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/items/get(marketDataSubscriptionExchangeScopeItems)`.
    func marketDataSubscriptionExchangeScopeItems(_ input: Operations.marketDataSubscriptionExchangeScopeItems.Input) async throws -> Operations.marketDataSubscriptionExchangeScopeItems.Output
    /// Retrieves all entities of MarketDataSubscriptionExchangeScope type
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/list/get(marketDataSubscriptionExchangeScopeList)`.
    func marketDataSubscriptionExchangeScopeList(_ input: Operations.marketDataSubscriptionExchangeScopeList.Input) async throws -> Operations.marketDataSubscriptionExchangeScopeList.Output
    /// Retrieves entities of MarketDataSubscriptionExchangeScope type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/suggest`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/suggest/get(marketDataSubscriptionExchangeScopeSuggest)`.
    func marketDataSubscriptionExchangeScopeSuggest(_ input: Operations.marketDataSubscriptionExchangeScopeSuggest.Input) async throws -> Operations.marketDataSubscriptionExchangeScopeSuggest.Output
    /// Retrieves an entity of MarketDataSubscriptionPlan type by its name
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/find`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/find/get(marketDataSubscriptionPlanFind)`.
    func marketDataSubscriptionPlanFind(_ input: Operations.marketDataSubscriptionPlanFind.Input) async throws -> Operations.marketDataSubscriptionPlanFind.Output
    /// Retrieves an entity of MarketDataSubscriptionPlan type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/item/get(marketDataSubscriptionPlanItem)`.
    func marketDataSubscriptionPlanItem(_ input: Operations.marketDataSubscriptionPlanItem.Input) async throws -> Operations.marketDataSubscriptionPlanItem.Output
    /// Retrieves multiple entities of MarketDataSubscriptionPlan type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/items/get(marketDataSubscriptionPlanItems)`.
    func marketDataSubscriptionPlanItems(_ input: Operations.marketDataSubscriptionPlanItems.Input) async throws -> Operations.marketDataSubscriptionPlanItems.Output
    /// Retrieves all entities of MarketDataSubscriptionPlan type
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/list/get(marketDataSubscriptionPlanList)`.
    func marketDataSubscriptionPlanList(_ input: Operations.marketDataSubscriptionPlanList.Input) async throws -> Operations.marketDataSubscriptionPlanList.Output
    /// Retrieves entities of MarketDataSubscriptionPlan type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/suggest`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/suggest/get(marketDataSubscriptionPlanSuggest)`.
    func marketDataSubscriptionPlanSuggest(_ input: Operations.marketDataSubscriptionPlanSuggest.Input) async throws -> Operations.marketDataSubscriptionPlanSuggest.Output
    /// Retrieves an entity of TradovateSubscriptionPlan type by its name
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/find`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/find/get(tradovateSubscriptionPlanFind)`.
    func tradovateSubscriptionPlanFind(_ input: Operations.tradovateSubscriptionPlanFind.Input) async throws -> Operations.tradovateSubscriptionPlanFind.Output
    /// Retrieves an entity of TradovateSubscriptionPlan type by its id
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/item`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/item/get(tradovateSubscriptionPlanItem)`.
    func tradovateSubscriptionPlanItem(_ input: Operations.tradovateSubscriptionPlanItem.Input) async throws -> Operations.tradovateSubscriptionPlanItem.Output
    /// Retrieves multiple entities of TradovateSubscriptionPlan type by its ids
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/items`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/items/get(tradovateSubscriptionPlanItems)`.
    func tradovateSubscriptionPlanItems(_ input: Operations.tradovateSubscriptionPlanItems.Input) async throws -> Operations.tradovateSubscriptionPlanItems.Output
    /// Retrieves all entities of TradovateSubscriptionPlan type
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/list`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/list/get(tradovateSubscriptionPlanList)`.
    func tradovateSubscriptionPlanList(_ input: Operations.tradovateSubscriptionPlanList.Input) async throws -> Operations.tradovateSubscriptionPlanList.Output
    /// Retrieves entities of TradovateSubscriptionPlan type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/suggest`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/suggest/get(tradovateSubscriptionPlanSuggest)`.
    func tradovateSubscriptionPlanSuggest(_ input: Operations.tradovateSubscriptionPlanSuggest.Input) async throws -> Operations.tradovateSubscriptionPlanSuggest.Output
    /// ### Change the playback speed of a Market Replay session.
    ///
    /// - Remark: HTTP `POST /replay/changespeed`.
    /// - Remark: Generated from `#/paths//replay/changespeed/post(changeSpeed)`.
    func changeSpeed(_ input: Operations.changeSpeed.Input) async throws -> Operations.changeSpeed.Output
    /// ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user's entitlements.
    /// You should use this endpoint from a WebSocket hooked up to the Market Replay URL.
    ///
    /// ```js
    ///
    /// const URL = 'wss://replay.tradovateapi.com/v1/websocket'
    ///
    /// const myMarketReplaySocket = new WebSocket(URL)
    ///
    /// //simple WebSocket authorization procedure
    /// myMarketReplaySocket.onopen = function() {
    ///     myMarketReplaySocket.send(`authorize\n0\n\n${accessToken}`)
    /// })
    ///
    /// //JSON string for midnight April 30th 2018
    /// const startTimestamp = new Date('2018-04-30').toJSON()
    /// myMarketReplaySocket.send(`replay/checkreplaysession\n1\n\n${JSON.stringify({startTimestamp})}`)
    ///
    /// //listen for response
    /// myMarketReplaySocket.addEventListener('message', msg => {
    ///     const datas = JSON.parse(msg.data.slice(1)) //chop off leading 'frame' char
    ///     //datas looks like this [{s: 200, i: 1, d: { checkStatus: 'OK' } }]
    ///     if(datas) {
    ///         datas.forEach(({i, d}) => {
    ///             if(i && i === 1)  { //id of our sent message is 1, response's `i` field will be 1.
    ///                 console.log(d) //=> { checkStatus: 'OK' }
    ///                 //if the status is OK we can send the initializeClock message
    ///             }
    ///         })
    ///     } 
    /// }
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /replay/checkreplaysession`.
    /// - Remark: Generated from `#/paths//replay/checkreplaysession/post(checkReplaySession)`.
    func checkReplaySession(_ input: Operations.checkReplaySession.Input) async throws -> Operations.checkReplaySession.Output
    /// ### Set the inital date and time for a market replay session.
    /// Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session.
    /// ```js
    ///
    /// const URL = 'wss://replay.tradovateapi.com/v1/websocket'
    ///
    /// const myMarketReplaySocket = new WebSocket(URL)
    ///
    /// //simple WebSocket authorization procedure
    /// myMarketReplaySocket.onOpen = function onOpen() {
    ///     myMarketReplaySocket.send(`authorize\n0\n\n${accessToken}`)
    /// })
    ///
    /// const requestBody = {
    ///     startTimestamp: new Date('2018-04-30').toJSON(),
    ///     speed: 100, //100%, range is from 0-400%
    ///     initialBalance: 50000 //account balance for replay session
    /// }
    ///
    /// myMarketReplaySocket.send(`replay/initializeclock\n1\n\n${JSON.stringify(requestBody)}`)
    ///
    /// myMarketReplaySocket.addEventListener('message', msg => {
    ///     const datas = JSON.parse(msg.data.slice(1))
    ///     if(datas) {
    ///         datas.forEach(({i, d}) => {
    ///             if(i && i === 1) { //sent id is 1, response id will be 1
    ///                 console.log(d) //=> { ok: true }
    ///             }
    ///         })
    ///     }
    /// })
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /replay/initializeclock`.
    /// - Remark: Generated from `#/paths//replay/initializeclock/post(initializeClock)`.
    func initializeClock(_ input: Operations.initializeClock.Input) async throws -> Operations.initializeClock.Output
    /// ### Silences an "incomplete" notification. 
    /// An "Incomplete" notification is one that has not yet been viewed by a user. Once a user has interacted with a notification it should be "completed".
    ///
    /// - Remark: HTTP `POST /adminAlertSignal/completealertsignal`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/completealertsignal/post(completeAlertSignal)`.
    func completeAlertSignal(_ input: Operations.completeAlertSignal.Input) async throws -> Operations.completeAlertSignal.Output
    /// Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/deps`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/deps/get(adminAlertSignalDependents)`.
    func adminAlertSignalDependents(_ input: Operations.adminAlertSignalDependents.Input) async throws -> Operations.adminAlertSignalDependents.Output
    /// Retrieves an entity of AdminAlertSignal type by its id
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/item`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/item/get(adminAlertSignalItem)`.
    func adminAlertSignalItem(_ input: Operations.adminAlertSignalItem.Input) async throws -> Operations.adminAlertSignalItem.Output
    /// Retrieves multiple entities of AdminAlertSignal type by its ids
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/items`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/items/get(adminAlertSignalItems)`.
    func adminAlertSignalItems(_ input: Operations.adminAlertSignalItems.Input) async throws -> Operations.adminAlertSignalItems.Output
    /// Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/ldeps`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/ldeps/get(adminAlertSignalLDependents)`.
    func adminAlertSignalLDependents(_ input: Operations.adminAlertSignalLDependents.Input) async throws -> Operations.adminAlertSignalLDependents.Output
    /// Retrieves all entities of AdminAlertSignal type
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/list`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/list/get(adminAlertSignalList)`.
    func adminAlertSignalList(_ input: Operations.adminAlertSignalList.Input) async throws -> Operations.adminAlertSignalList.Output
    /// ### Internal. Can be used by B2B partners to mark an adminAlertSignal entity for further handling.
    ///
    /// - Remark: HTTP `POST /adminAlertSignal/takealertsignalownership`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/takealertsignalownership/post(takeAlertSignalOwnership)`.
    func takeAlertSignalOwnership(_ input: Operations.takeAlertSignalOwnership.Input) async throws -> Operations.takeAlertSignalOwnership.Output
    /// ### Create an alert entity associated with the user.
    ///
    ///
    /// - Remark: HTTP `POST /alert/createalert`.
    /// - Remark: Generated from `#/paths//alert/createalert/post(createAlert)`.
    func createAlert(_ input: Operations.createAlert.Input) async throws -> Operations.createAlert.Output
    /// ### Remove an alert entity associated with the user.
    ///
    /// - Remark: HTTP `POST /alert/deletealert`.
    /// - Remark: Generated from `#/paths//alert/deletealert/post(deleteAlert)`.
    func deleteAlert(_ input: Operations.deleteAlert.Input) async throws -> Operations.deleteAlert.Output
    /// Retrieves all entities of Alert type related to User entity
    ///
    /// - Remark: HTTP `GET /alert/deps`.
    /// - Remark: Generated from `#/paths//alert/deps/get(alertDependents)`.
    func alertDependents(_ input: Operations.alertDependents.Input) async throws -> Operations.alertDependents.Output
    /// ### Dismiss an alert for a user.
    ///
    /// - Remark: HTTP `POST /alert/dismissalert`.
    /// - Remark: Generated from `#/paths//alert/dismissalert/post(dismissAlert)`.
    func dismissAlert(_ input: Operations.dismissAlert.Input) async throws -> Operations.dismissAlert.Output
    /// Retrieves an entity of Alert type by its id
    ///
    /// - Remark: HTTP `GET /alert/item`.
    /// - Remark: Generated from `#/paths//alert/item/get(alertItem)`.
    func alertItem(_ input: Operations.alertItem.Input) async throws -> Operations.alertItem.Output
    /// Retrieves multiple entities of Alert type by its ids
    ///
    /// - Remark: HTTP `GET /alert/items`.
    /// - Remark: Generated from `#/paths//alert/items/get(alertItems)`.
    func alertItems(_ input: Operations.alertItems.Input) async throws -> Operations.alertItems.Output
    /// Retrieves all entities of Alert type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /alert/ldeps`.
    /// - Remark: Generated from `#/paths//alert/ldeps/get(alertLDependents)`.
    func alertLDependents(_ input: Operations.alertLDependents.Input) async throws -> Operations.alertLDependents.Output
    /// Retrieves all entities of Alert type
    ///
    /// - Remark: HTTP `GET /alert/list`.
    /// - Remark: Generated from `#/paths//alert/list/get(alertList)`.
    func alertList(_ input: Operations.alertList.Input) async throws -> Operations.alertList.Output
    /// ### Mark an alert entity as 'read' for a user.
    ///
    /// - Remark: HTTP `POST /alert/markreadalertsignal`.
    /// - Remark: Generated from `#/paths//alert/markreadalertsignal/post(markReadAlertSignal)`.
    func markReadAlertSignal(_ input: Operations.markReadAlertSignal.Input) async throws -> Operations.markReadAlertSignal.Output
    /// ### Change the parameters of an existing alert.
    ///
    /// - Remark: HTTP `POST /alert/modifyalert`.
    /// - Remark: Generated from `#/paths//alert/modifyalert/post(modifyAlert)`.
    func modifyAlert(_ input: Operations.modifyAlert.Input) async throws -> Operations.modifyAlert.Output
    /// ### Resets an alert. 
    /// You can use this method after an alert has been triggered to keep the alert and wait for the alert to be triggered again.
    ///
    /// - Remark: HTTP `POST /alert/resetalert`.
    /// - Remark: Generated from `#/paths//alert/resetalert/post(resetAlert)`.
    func resetAlert(_ input: Operations.resetAlert.Input) async throws -> Operations.resetAlert.Output
    /// Retrieves all entities of AlertSignal type related to Alert entity
    ///
    /// - Remark: HTTP `GET /alertSignal/deps`.
    /// - Remark: Generated from `#/paths//alertSignal/deps/get(alertSignalDependents)`.
    func alertSignalDependents(_ input: Operations.alertSignalDependents.Input) async throws -> Operations.alertSignalDependents.Output
    /// Retrieves an entity of AlertSignal type by its id
    ///
    /// - Remark: HTTP `GET /alertSignal/item`.
    /// - Remark: Generated from `#/paths//alertSignal/item/get(alertSignalItem)`.
    func alertSignalItem(_ input: Operations.alertSignalItem.Input) async throws -> Operations.alertSignalItem.Output
    /// Retrieves multiple entities of AlertSignal type by its ids
    ///
    /// - Remark: HTTP `GET /alertSignal/items`.
    /// - Remark: Generated from `#/paths//alertSignal/items/get(alertSignalItems)`.
    func alertSignalItems(_ input: Operations.alertSignalItems.Input) async throws -> Operations.alertSignalItems.Output
    /// Retrieves all entities of AlertSignal type related to multiple entities of Alert type
    ///
    /// - Remark: HTTP `GET /alertSignal/ldeps`.
    /// - Remark: Generated from `#/paths//alertSignal/ldeps/get(alertSignalLDependents)`.
    func alertSignalLDependents(_ input: Operations.alertSignalLDependents.Input) async throws -> Operations.alertSignalLDependents.Output
    /// Retrieves all entities of AlertSignal type
    ///
    /// - Remark: HTTP `GET /alertSignal/list`.
    /// - Remark: Generated from `#/paths//alertSignal/list/get(alertSignalList)`.
    func alertSignalList(_ input: Operations.alertSignalList.Input) async throws -> Operations.alertSignalList.Output
    /// Retrieves an entity of AdminAlert type by its name
    ///
    /// - Remark: HTTP `GET /adminAlert/find`.
    /// - Remark: Generated from `#/paths//adminAlert/find/get(adminAlertFind)`.
    func adminAlertFind(_ input: Operations.adminAlertFind.Input) async throws -> Operations.adminAlertFind.Output
    /// Retrieves an entity of AdminAlert type by its id
    ///
    /// - Remark: HTTP `GET /adminAlert/item`.
    /// - Remark: Generated from `#/paths//adminAlert/item/get(adminAlertItem)`.
    func adminAlertItem(_ input: Operations.adminAlertItem.Input) async throws -> Operations.adminAlertItem.Output
    /// Retrieves multiple entities of AdminAlert type by its ids
    ///
    /// - Remark: HTTP `GET /adminAlert/items`.
    /// - Remark: Generated from `#/paths//adminAlert/items/get(adminAlertItems)`.
    func adminAlertItems(_ input: Operations.adminAlertItems.Input) async throws -> Operations.adminAlertItems.Output
    /// Retrieves all entities of AdminAlert type
    ///
    /// - Remark: HTTP `GET /adminAlert/list`.
    /// - Remark: Generated from `#/paths//adminAlert/list/get(adminAlertList)`.
    func adminAlertList(_ input: Operations.adminAlertList.Input) async throws -> Operations.adminAlertList.Output
    /// Retrieves entities of AdminAlert type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /adminAlert/suggest`.
    /// - Remark: Generated from `#/paths//adminAlert/suggest/get(adminAlertSuggest)`.
    func adminAlertSuggest(_ input: Operations.adminAlertSuggest.Input) async throws -> Operations.adminAlertSuggest.Output
    /// Retrieves an entity of ClearingHouse type by its name
    ///
    /// - Remark: HTTP `GET /clearingHouse/find`.
    /// - Remark: Generated from `#/paths//clearingHouse/find/get(clearingHouseFind)`.
    func clearingHouseFind(_ input: Operations.clearingHouseFind.Input) async throws -> Operations.clearingHouseFind.Output
    /// Retrieves an entity of ClearingHouse type by its id
    ///
    /// - Remark: HTTP `GET /clearingHouse/item`.
    /// - Remark: Generated from `#/paths//clearingHouse/item/get(clearingHouseItem)`.
    func clearingHouseItem(_ input: Operations.clearingHouseItem.Input) async throws -> Operations.clearingHouseItem.Output
    /// Retrieves multiple entities of ClearingHouse type by its ids
    ///
    /// - Remark: HTTP `GET /clearingHouse/items`.
    /// - Remark: Generated from `#/paths//clearingHouse/items/get(clearingHouseItems)`.
    func clearingHouseItems(_ input: Operations.clearingHouseItems.Input) async throws -> Operations.clearingHouseItems.Output
    /// Retrieves all entities of ClearingHouse type
    ///
    /// - Remark: HTTP `GET /clearingHouse/list`.
    /// - Remark: Generated from `#/paths//clearingHouse/list/get(clearingHouseList)`.
    func clearingHouseList(_ input: Operations.clearingHouseList.Input) async throws -> Operations.clearingHouseList.Output
    /// Retrieves entities of ClearingHouse type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /clearingHouse/suggest`.
    /// - Remark: Generated from `#/paths//clearingHouse/suggest/get(clearingHouseSuggest)`.
    func clearingHouseSuggest(_ input: Operations.clearingHouseSuggest.Input) async throws -> Operations.clearingHouseSuggest.Output
    /// Retrieves an entity of Entitlement type by its id
    ///
    /// - Remark: HTTP `GET /entitlement/item`.
    /// - Remark: Generated from `#/paths//entitlement/item/get(entitlementItem)`.
    func entitlementItem(_ input: Operations.entitlementItem.Input) async throws -> Operations.entitlementItem.Output
    /// Retrieves multiple entities of Entitlement type by its ids
    ///
    /// - Remark: HTTP `GET /entitlement/items`.
    /// - Remark: Generated from `#/paths//entitlement/items/get(entitlementItems)`.
    func entitlementItems(_ input: Operations.entitlementItems.Input) async throws -> Operations.entitlementItems.Output
    /// Retrieves all entities of Entitlement type
    ///
    /// - Remark: HTTP `GET /entitlement/list`.
    /// - Remark: Generated from `#/paths//entitlement/list/get(entitlementList)`.
    func entitlementList(_ input: Operations.entitlementList.Input) async throws -> Operations.entitlementList.Output
    /// Retrieves an entity of OrderStrategyType type by its name
    ///
    /// - Remark: HTTP `GET /orderStrategyType/find`.
    /// - Remark: Generated from `#/paths//orderStrategyType/find/get(orderStrategyTypeFind)`.
    func orderStrategyTypeFind(_ input: Operations.orderStrategyTypeFind.Input) async throws -> Operations.orderStrategyTypeFind.Output
    /// Retrieves an entity of OrderStrategyType type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategyType/item`.
    /// - Remark: Generated from `#/paths//orderStrategyType/item/get(orderStrategyTypeItem)`.
    func orderStrategyTypeItem(_ input: Operations.orderStrategyTypeItem.Input) async throws -> Operations.orderStrategyTypeItem.Output
    /// Retrieves multiple entities of OrderStrategyType type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategyType/items`.
    /// - Remark: Generated from `#/paths//orderStrategyType/items/get(orderStrategyTypeItems)`.
    func orderStrategyTypeItems(_ input: Operations.orderStrategyTypeItems.Input) async throws -> Operations.orderStrategyTypeItems.Output
    /// Retrieves all entities of OrderStrategyType type
    ///
    /// - Remark: HTTP `GET /orderStrategyType/list`.
    /// - Remark: Generated from `#/paths//orderStrategyType/list/get(orderStrategyTypeList)`.
    func orderStrategyTypeList(_ input: Operations.orderStrategyTypeList.Input) async throws -> Operations.orderStrategyTypeList.Output
    /// Retrieves entities of OrderStrategyType type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /orderStrategyType/suggest`.
    /// - Remark: Generated from `#/paths//orderStrategyType/suggest/get(orderStrategyTypeSuggest)`.
    func orderStrategyTypeSuggest(_ input: Operations.orderStrategyTypeSuggest.Input) async throws -> Operations.orderStrategyTypeSuggest.Output
    /// Retrieves an entity of Property type by its name
    ///
    /// - Remark: HTTP `GET /property/find`.
    /// - Remark: Generated from `#/paths//property/find/get(propertyFind)`.
    func propertyFind(_ input: Operations.propertyFind.Input) async throws -> Operations.propertyFind.Output
    /// Retrieves an entity of Property type by its id
    ///
    /// - Remark: HTTP `GET /property/item`.
    /// - Remark: Generated from `#/paths//property/item/get(propertyItem)`.
    func propertyItem(_ input: Operations.propertyItem.Input) async throws -> Operations.propertyItem.Output
    /// Retrieves multiple entities of Property type by its ids
    ///
    /// - Remark: HTTP `GET /property/items`.
    /// - Remark: Generated from `#/paths//property/items/get(propertyItems)`.
    func propertyItems(_ input: Operations.propertyItems.Input) async throws -> Operations.propertyItems.Output
    /// Retrieves all entities of Property type
    ///
    /// - Remark: HTTP `GET /property/list`.
    /// - Remark: Generated from `#/paths//property/list/get(propertyList)`.
    func propertyList(_ input: Operations.propertyList.Input) async throws -> Operations.propertyList.Output
    /// Retrieves entities of Property type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /property/suggest`.
    /// - Remark: Generated from `#/paths//property/suggest/get(propertySuggest)`.
    func propertySuggest(_ input: Operations.propertySuggest.Input) async throws -> Operations.propertySuggest.Output
    /// Retrieves all entities of ContactInfo type related to User entity
    ///
    /// - Remark: HTTP `GET /contactInfo/deps`.
    /// - Remark: Generated from `#/paths//contactInfo/deps/get(contactInfoDependents)`.
    func contactInfoDependents(_ input: Operations.contactInfoDependents.Input) async throws -> Operations.contactInfoDependents.Output
    /// Retrieves an entity of ContactInfo type by its id
    ///
    /// - Remark: HTTP `GET /contactInfo/item`.
    /// - Remark: Generated from `#/paths//contactInfo/item/get(contactInfoItem)`.
    func contactInfoItem(_ input: Operations.contactInfoItem.Input) async throws -> Operations.contactInfoItem.Output
    /// Retrieves multiple entities of ContactInfo type by its ids
    ///
    /// - Remark: HTTP `GET /contactInfo/items`.
    /// - Remark: Generated from `#/paths//contactInfo/items/get(contactInfoItems)`.
    func contactInfoItems(_ input: Operations.contactInfoItems.Input) async throws -> Operations.contactInfoItems.Output
    /// Retrieves all entities of ContactInfo type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /contactInfo/ldeps`.
    /// - Remark: Generated from `#/paths//contactInfo/ldeps/get(contactInfoLDependents)`.
    func contactInfoLDependents(_ input: Operations.contactInfoLDependents.Input) async throws -> Operations.contactInfoLDependents.Output
    /// Creates a new entity of MarketDataSubscription
    ///
    /// - Remark: HTTP `POST /marketDataSubscription/create`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/create/post(marketDataSubscriptionCreate)`.
    func marketDataSubscriptionCreate(_ input: Operations.marketDataSubscriptionCreate.Input) async throws -> Operations.marketDataSubscriptionCreate.Output
    /// Retrieves all entities of MarketDataSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/deps`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/deps/get(marketDataSubscriptionDependents)`.
    func marketDataSubscriptionDependents(_ input: Operations.marketDataSubscriptionDependents.Input) async throws -> Operations.marketDataSubscriptionDependents.Output
    /// Retrieves an entity of MarketDataSubscription type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/item/get(marketDataSubscriptionItem)`.
    func marketDataSubscriptionItem(_ input: Operations.marketDataSubscriptionItem.Input) async throws -> Operations.marketDataSubscriptionItem.Output
    /// Retrieves multiple entities of MarketDataSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/items/get(marketDataSubscriptionItems)`.
    func marketDataSubscriptionItems(_ input: Operations.marketDataSubscriptionItems.Input) async throws -> Operations.marketDataSubscriptionItems.Output
    /// Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/ldeps/get(marketDataSubscriptionLDependents)`.
    func marketDataSubscriptionLDependents(_ input: Operations.marketDataSubscriptionLDependents.Input) async throws -> Operations.marketDataSubscriptionLDependents.Output
    /// Retrieves all entities of MarketDataSubscription type
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/list/get(marketDataSubscriptionList)`.
    func marketDataSubscriptionList(_ input: Operations.marketDataSubscriptionList.Input) async throws -> Operations.marketDataSubscriptionList.Output
    /// Updates an existing entity of MarketDataSubscription
    ///
    /// - Remark: HTTP `POST /marketDataSubscription/update`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/update/post(marketDataSubscriptionUpdate)`.
    func marketDataSubscriptionUpdate(_ input: Operations.marketDataSubscriptionUpdate.Input) async throws -> Operations.marketDataSubscriptionUpdate.Output
    /// Retrieves an entity of Organization type by its name
    ///
    /// - Remark: HTTP `GET /organization/find`.
    /// - Remark: Generated from `#/paths//organization/find/get(organizationFind)`.
    func organizationFind(_ input: Operations.organizationFind.Input) async throws -> Operations.organizationFind.Output
    /// Retrieves an entity of Organization type by its id
    ///
    /// - Remark: HTTP `GET /organization/item`.
    /// - Remark: Generated from `#/paths//organization/item/get(organizationItem)`.
    func organizationItem(_ input: Operations.organizationItem.Input) async throws -> Operations.organizationItem.Output
    /// Retrieves multiple entities of Organization type by its ids
    ///
    /// - Remark: HTTP `GET /organization/items`.
    /// - Remark: Generated from `#/paths//organization/items/get(organizationItems)`.
    func organizationItems(_ input: Operations.organizationItems.Input) async throws -> Operations.organizationItems.Output
    /// Retrieves all entities of Organization type
    ///
    /// - Remark: HTTP `GET /organization/list`.
    /// - Remark: Generated from `#/paths//organization/list/get(organizationList)`.
    func organizationList(_ input: Operations.organizationList.Input) async throws -> Operations.organizationList.Output
    /// Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /organization/suggest`.
    /// - Remark: Generated from `#/paths//organization/suggest/get(organizationSuggest)`.
    func organizationSuggest(_ input: Operations.organizationSuggest.Input) async throws -> Operations.organizationSuggest.Output
    /// Retrieves all entities of SecondMarketDataSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/deps`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/deps/get(secondMarketDataSubscriptionDependents)`.
    func secondMarketDataSubscriptionDependents(_ input: Operations.secondMarketDataSubscriptionDependents.Input) async throws -> Operations.secondMarketDataSubscriptionDependents.Output
    /// Retrieves an entity of SecondMarketDataSubscription type by its id
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/item`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/item/get(secondMarketDataSubscriptionItem)`.
    func secondMarketDataSubscriptionItem(_ input: Operations.secondMarketDataSubscriptionItem.Input) async throws -> Operations.secondMarketDataSubscriptionItem.Output
    /// Retrieves multiple entities of SecondMarketDataSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/items`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/items/get(secondMarketDataSubscriptionItems)`.
    func secondMarketDataSubscriptionItems(_ input: Operations.secondMarketDataSubscriptionItems.Input) async throws -> Operations.secondMarketDataSubscriptionItems.Output
    /// Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/ldeps/get(secondMarketDataSubscriptionLDependents)`.
    func secondMarketDataSubscriptionLDependents(_ input: Operations.secondMarketDataSubscriptionLDependents.Input) async throws -> Operations.secondMarketDataSubscriptionLDependents.Output
    /// Retrieves all entities of SecondMarketDataSubscription type
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/list`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/list/get(secondMarketDataSubscriptionList)`.
    func secondMarketDataSubscriptionList(_ input: Operations.secondMarketDataSubscriptionList.Input) async throws -> Operations.secondMarketDataSubscriptionList.Output
    /// Creates a new entity of TradovateSubscription
    ///
    /// - Remark: HTTP `POST /tradovateSubscription/create`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/create/post(tradovateSubscriptionCreate)`.
    func tradovateSubscriptionCreate(_ input: Operations.tradovateSubscriptionCreate.Input) async throws -> Operations.tradovateSubscriptionCreate.Output
    /// Retrieves all entities of TradovateSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/deps`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/deps/get(tradovateSubscriptionDependents)`.
    func tradovateSubscriptionDependents(_ input: Operations.tradovateSubscriptionDependents.Input) async throws -> Operations.tradovateSubscriptionDependents.Output
    /// Retrieves an entity of TradovateSubscription type by its id
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/item`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/item/get(tradovateSubscriptionItem)`.
    func tradovateSubscriptionItem(_ input: Operations.tradovateSubscriptionItem.Input) async throws -> Operations.tradovateSubscriptionItem.Output
    /// Retrieves multiple entities of TradovateSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/items`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/items/get(tradovateSubscriptionItems)`.
    func tradovateSubscriptionItems(_ input: Operations.tradovateSubscriptionItems.Input) async throws -> Operations.tradovateSubscriptionItems.Output
    /// Retrieves all entities of TradovateSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/ldeps/get(tradovateSubscriptionLDependents)`.
    func tradovateSubscriptionLDependents(_ input: Operations.tradovateSubscriptionLDependents.Input) async throws -> Operations.tradovateSubscriptionLDependents.Output
    /// Retrieves all entities of TradovateSubscription type
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/list`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/list/get(tradovateSubscriptionList)`.
    func tradovateSubscriptionList(_ input: Operations.tradovateSubscriptionList.Input) async throws -> Operations.tradovateSubscriptionList.Output
    /// Updates an existing entity of TradovateSubscription
    ///
    /// - Remark: HTTP `POST /tradovateSubscription/update`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/update/post(tradovateSubscriptionUpdate)`.
    func tradovateSubscriptionUpdate(_ input: Operations.tradovateSubscriptionUpdate.Input) async throws -> Operations.tradovateSubscriptionUpdate.Output
    /// ### Called to accept a given trading permission granted by another party.
    ///
    /// - Remark: HTTP `POST /user/accepttradingpermission`.
    /// - Remark: Generated from `#/paths//user/accepttradingpermission/post(acceptTradingPermission)`.
    func acceptTradingPermission(_ input: Operations.acceptTradingPermission.Input) async throws -> Operations.acceptTradingPermission.Output
    /// ### Used to setup a second market data subscription with active auto-renewal.
    ///
    /// - Remark: HTTP `POST /user/activatesecondmarketdatasubscriptionrenewal`.
    /// - Remark: Generated from `#/paths//user/activatesecondmarketdatasubscriptionrenewal/post(activateSecondMarketDataSubscriptionRenewal)`.
    func activateSecondMarketDataSubscriptionRenewal(_ input: Operations.activateSecondMarketDataSubscriptionRenewal.Input) async throws -> Operations.activateSecondMarketDataSubscriptionRenewal.Output
    /// ### Add a subscription to Market Data for a user.
    ///
    /// - Remark: HTTP `POST /user/addmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/addmarketdatasubscription/post(addMarketDataSubscription)`.
    func addMarketDataSubscription(_ input: Operations.addMarketDataSubscription.Input) async throws -> Operations.addMarketDataSubscription.Output
    /// ### Add a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/addsecondmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/addsecondmarketdatasubscription/post(addSecondMarketDataSubscription)`.
    func addSecondMarketDataSubscription(_ input: Operations.addSecondMarketDataSubscription.Input) async throws -> Operations.addSecondMarketDataSubscription.Output
    /// ### Used to add a Tradovate Trader membership plan for a user.
    ///
    /// - Remark: HTTP `POST /user/addtradovatesubscription`.
    /// - Remark: Generated from `#/paths//user/addtradovatesubscription/post(addTradovateSubscription)`.
    func addTradovateSubscription(_ input: Operations.addTradovateSubscription.Input) async throws -> Operations.addTradovateSubscription.Output
    /// - Remark: HTTP `POST /user/canceleverything`.
    /// - Remark: Generated from `#/paths//user/canceleverything/post(cancelEverything)`.
    func cancelEverything(_ input: Operations.cancelEverything.Input) async throws -> Operations.cancelEverything.Output
    /// ### Cancel a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/cancelsecondmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/cancelsecondmarketdatasubscription/post(cancelSecondMarketDataSubscription)`.
    func cancelSecondMarketDataSubscription(_ input: Operations.cancelSecondMarketDataSubscription.Input) async throws -> Operations.cancelSecondMarketDataSubscription.Output
    /// ### Cancel the auto-renewal for a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/cancelsecondmarketdatasubscriptionrenewal`.
    /// - Remark: Generated from `#/paths//user/cancelsecondmarketdatasubscriptionrenewal/post(cancelSecondMarketDataSubscriptionRenewal)`.
    func cancelSecondMarketDataSubscriptionRenewal(_ input: Operations.cancelSecondMarketDataSubscriptionRenewal.Input) async throws -> Operations.cancelSecondMarketDataSubscriptionRenewal.Output
    /// ### Cancel a Tradovate Trader membership plan.
    ///
    /// - Remark: HTTP `POST /user/canceltradovatesubscription`.
    /// - Remark: Generated from `#/paths//user/canceltradovatesubscription/post(cancelTradovateSubscription)`.
    func cancelTradovateSubscription(_ input: Operations.cancelTradovateSubscription.Input) async throws -> Operations.cancelTradovateSubscription.Output
    /// ### Create a trading permission
    /// Create a new trading permission to account with ID `accountId` via that user's ID, `userId`.
    ///
    /// - Remark: HTTP `POST /user/createtradingpermission`.
    /// - Remark: Generated from `#/paths//user/createtradingpermission/post(createTradingPermission)`.
    func createTradingPermission(_ input: Operations.createTradingPermission.Input) async throws -> Operations.createTradingPermission.Output
    /// Retrieves an entity of User type by its name
    ///
    /// - Remark: HTTP `GET /user/find`.
    /// - Remark: Generated from `#/paths//user/find/get(userFind)`.
    func userFind(_ input: Operations.userFind.Input) async throws -> Operations.userFind.Output
    /// ### Query the granted trading permissions associated with this account.
    ///
    /// - Remark: HTTP `POST /user/getaccounttradingpermissions`.
    /// - Remark: Generated from `#/paths//user/getaccounttradingpermissions/post(getAccountTradingPermissions)`.
    func getAccountTradingPermissions(_ input: Operations.getAccountTradingPermissions.Input) async throws -> Operations.getAccountTradingPermissions.Output
    /// ### Query the current price of a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/getsecondmarketdatasubscriptioncost`.
    /// - Remark: Generated from `#/paths//user/getsecondmarketdatasubscriptioncost/post(getSecondMarketDataSubscriptionCost)`.
    func getSecondMarketDataSubscriptionCost(_ input: Operations.getSecondMarketDataSubscriptionCost.Input) async throws -> Operations.getSecondMarketDataSubscriptionCost.Output
    /// Retrieves an entity of User type by its id
    ///
    /// - Remark: HTTP `GET /user/item`.
    /// - Remark: Generated from `#/paths//user/item/get(userItem)`.
    func userItem(_ input: Operations.userItem.Input) async throws -> Operations.userItem.Output
    /// Retrieves multiple entities of User type by its ids
    ///
    /// - Remark: HTTP `GET /user/items`.
    /// - Remark: Generated from `#/paths//user/items/get(userItems)`.
    func userItems(_ input: Operations.userItems.Input) async throws -> Operations.userItems.Output
    /// Retrieves all entities of User type
    ///
    /// - Remark: HTTP `GET /user/list`.
    /// - Remark: Generated from `#/paths//user/list/get(userList)`.
    func userList(_ input: Operations.userList.Input) async throws -> Operations.userList.Output
    /// ### Used to modify account username and password.
    ///
    /// - Remark: HTTP `POST /user/modifycredentials`.
    /// - Remark: Generated from `#/paths//user/modifycredentials/post(modifyCredentials)`.
    func modifyCredentials(_ input: Operations.modifyCredentials.Input) async throws -> Operations.modifyCredentials.Output
    /// ### Change account email address information.
    ///
    /// - Remark: HTTP `POST /user/modifyemailaddress`.
    /// - Remark: Generated from `#/paths//user/modifyemailaddress/post(modifyEmailAddress)`.
    func modifyEmailAddress(_ input: Operations.modifyEmailAddress.Input) async throws -> Operations.modifyEmailAddress.Output
    /// ### Change account password information.
    ///
    /// - Remark: HTTP `POST /user/modifypassword`.
    /// - Remark: Generated from `#/paths//user/modifypassword/post(modifyPassword)`.
    func modifyPassword(_ input: Operations.modifyPassword.Input) async throws -> Operations.modifyPassword.Output
    /// ### Request to open a Demo account for a user. 
    ///
    /// - Remark: HTTP `POST /user/opendemoaccount`.
    /// - Remark: Generated from `#/paths//user/opendemoaccount/post(openDemoAccount)`.
    func openDemoAccount(_ input: Operations.openDemoAccount.Input) async throws -> Operations.openDemoAccount.Output
    /// ### Send a request to grant trading permission for your account to another party.
    /// Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party's own accounts.
    ///
    /// - Remark: HTTP `POST /user/requesttradingpermission`.
    /// - Remark: Generated from `#/paths//user/requesttradingpermission/post(requestTradingPermission)`.
    func requestTradingPermission(_ input: Operations.requestTradingPermission.Input) async throws -> Operations.requestTradingPermission.Output
    /// ### Revoke an existing trading permission granted to another party.
    /// If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
    ///
    /// - Remark: HTTP `POST /user/revoketradingpermission`.
    /// - Remark: Generated from `#/paths//user/revoketradingpermission/post(revokeTradingPermission)`.
    func revokeTradingPermission(_ input: Operations.revokeTradingPermission.Input) async throws -> Operations.revokeTradingPermission.Output
    /// - Remark: HTTP `POST /user/revoketradingpermissions`.
    /// - Remark: Generated from `#/paths//user/revoketradingpermissions/post(revokeTradingPermissions)`.
    func revokeTradingPermissions(_ input: Operations.revokeTradingPermissions.Input) async throws -> Operations.revokeTradingPermissions.Output
    /// ### Used by B2B partners to create users for their own organizations.
    ///
    /// - Remark: HTTP `POST /user/signuporganizationmember`.
    /// - Remark: Generated from `#/paths//user/signuporganizationmember/post(signUpOrganizationMember)`.
    func signUpOrganizationMember(_ input: Operations.signUpOrganizationMember.Input) async throws -> Operations.signUpOrganizationMember.Output
    /// Retrieves entities of User type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /user/suggest`.
    /// - Remark: Generated from `#/paths//user/suggest/get(userSuggest)`.
    func userSuggest(_ input: Operations.userSuggest.Input) async throws -> Operations.userSuggest.Output
    /// ### Used with WebSocket protocol. Returns all data associated with the user. 
    /// This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.
    ///
    /// ```js
    /// const URL = 'wss://live.tradovateapi.com/v1/websocket'
    ///
    /// const myWebSocket = new WebSocket(URL)
    ///
    /// //authorize websocket with your access token
    /// myWebSocket.onopen = function() {
    ///     myWebSocket.send(`authorize\n0\n\n${accessToken}`)
    /// }
    ///
    /// const requestBody = {
    ///     users: [12345]
    /// }
    ///
    /// myWebSocket.send(`user/syncrequest\n1\n\n${JSON.stringify(requestBody)}`) 
    ///
    /// //starts a subscription to real-time user data.
    /// ```
    ///
    /// - Remark: HTTP `POST /user/syncrequest`.
    /// - Remark: Generated from `#/paths//user/syncrequest/post(syncRequest)`.
    func syncRequest(_ input: Operations.syncRequest.Input) async throws -> Operations.syncRequest.Output
    /// ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
    ///
    /// - Remark: HTTP `POST /userPlugin/addentitlementsubscription`.
    /// - Remark: Generated from `#/paths//userPlugin/addentitlementsubscription/post(addEntitlementSubscription)`.
    func addEntitlementSubscription(_ input: Operations.addEntitlementSubscription.Input) async throws -> Operations.addEntitlementSubscription.Output
    /// ### Change the permissions for a Trader plugin.
    ///
    /// - Remark: HTTP `POST /userPlugin/changepluginpermission`.
    /// - Remark: Generated from `#/paths//userPlugin/changepluginpermission/post(changePluginPermission)`.
    func changePluginPermission(_ input: Operations.changePluginPermission.Input) async throws -> Operations.changePluginPermission.Output
    /// Creates a new entity of UserPlugin
    ///
    /// - Remark: HTTP `POST /userPlugin/create`.
    /// - Remark: Generated from `#/paths//userPlugin/create/post(userPluginCreate)`.
    func userPluginCreate(_ input: Operations.userPluginCreate.Input) async throws -> Operations.userPluginCreate.Output
    /// Retrieves all entities of UserPlugin type related to User entity
    ///
    /// - Remark: HTTP `GET /userPlugin/deps`.
    /// - Remark: Generated from `#/paths//userPlugin/deps/get(userPluginDependents)`.
    func userPluginDependents(_ input: Operations.userPluginDependents.Input) async throws -> Operations.userPluginDependents.Output
    /// Retrieves an entity of UserPlugin type by its id
    ///
    /// - Remark: HTTP `GET /userPlugin/item`.
    /// - Remark: Generated from `#/paths//userPlugin/item/get(userPluginItem)`.
    func userPluginItem(_ input: Operations.userPluginItem.Input) async throws -> Operations.userPluginItem.Output
    /// Retrieves multiple entities of UserPlugin type by its ids
    ///
    /// - Remark: HTTP `GET /userPlugin/items`.
    /// - Remark: Generated from `#/paths//userPlugin/items/get(userPluginItems)`.
    func userPluginItems(_ input: Operations.userPluginItems.Input) async throws -> Operations.userPluginItems.Output
    /// Retrieves all entities of UserPlugin type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userPlugin/ldeps`.
    /// - Remark: Generated from `#/paths//userPlugin/ldeps/get(userPluginLDependents)`.
    func userPluginLDependents(_ input: Operations.userPluginLDependents.Input) async throws -> Operations.userPluginLDependents.Output
    /// Retrieves all entities of UserPlugin type
    ///
    /// - Remark: HTTP `GET /userPlugin/list`.
    /// - Remark: Generated from `#/paths//userPlugin/list/get(userPluginList)`.
    func userPluginList(_ input: Operations.userPluginList.Input) async throws -> Operations.userPluginList.Output
    /// Updates an existing entity of UserPlugin
    ///
    /// - Remark: HTTP `POST /userPlugin/update`.
    /// - Remark: Generated from `#/paths//userPlugin/update/post(userPluginUpdate)`.
    func userPluginUpdate(_ input: Operations.userPluginUpdate.Input) async throws -> Operations.userPluginUpdate.Output
    /// Retrieves all entities of UserProperty type related to User entity
    ///
    /// - Remark: HTTP `GET /userProperty/deps`.
    /// - Remark: Generated from `#/paths//userProperty/deps/get(userPropertyDependents)`.
    func userPropertyDependents(_ input: Operations.userPropertyDependents.Input) async throws -> Operations.userPropertyDependents.Output
    /// Retrieves an entity of UserProperty type by its id
    ///
    /// - Remark: HTTP `GET /userProperty/item`.
    /// - Remark: Generated from `#/paths//userProperty/item/get(userPropertyItem)`.
    func userPropertyItem(_ input: Operations.userPropertyItem.Input) async throws -> Operations.userPropertyItem.Output
    /// Retrieves multiple entities of UserProperty type by its ids
    ///
    /// - Remark: HTTP `GET /userProperty/items`.
    /// - Remark: Generated from `#/paths//userProperty/items/get(userPropertyItems)`.
    func userPropertyItems(_ input: Operations.userPropertyItems.Input) async throws -> Operations.userPropertyItems.Output
    /// Retrieves all entities of UserProperty type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userProperty/ldeps`.
    /// - Remark: Generated from `#/paths//userProperty/ldeps/get(userPropertyLDependents)`.
    func userPropertyLDependents(_ input: Operations.userPropertyLDependents.Input) async throws -> Operations.userPropertyLDependents.Output
    /// Retrieves an entity of UserSession type by its id
    ///
    /// - Remark: HTTP `GET /userSession/item`.
    /// - Remark: Generated from `#/paths//userSession/item/get(userSessionItem)`.
    func userSessionItem(_ input: Operations.userSessionItem.Input) async throws -> Operations.userSessionItem.Output
    /// Retrieves multiple entities of UserSession type by its ids
    ///
    /// - Remark: HTTP `GET /userSession/items`.
    /// - Remark: Generated from `#/paths//userSession/items/get(userSessionItems)`.
    func userSessionItems(_ input: Operations.userSessionItems.Input) async throws -> Operations.userSessionItems.Output
    /// Retrieves all entities of UserSessionStats type related to User entity
    ///
    /// - Remark: HTTP `GET /userSessionStats/deps`.
    /// - Remark: Generated from `#/paths//userSessionStats/deps/get(userSessionStatsDependents)`.
    func userSessionStatsDependents(_ input: Operations.userSessionStatsDependents.Input) async throws -> Operations.userSessionStatsDependents.Output
    /// Retrieves an entity of UserSessionStats type by its id
    ///
    /// - Remark: HTTP `GET /userSessionStats/item`.
    /// - Remark: Generated from `#/paths//userSessionStats/item/get(userSessionStatsItem)`.
    func userSessionStatsItem(_ input: Operations.userSessionStatsItem.Input) async throws -> Operations.userSessionStatsItem.Output
    /// Retrieves multiple entities of UserSessionStats type by its ids
    ///
    /// - Remark: HTTP `GET /userSessionStats/items`.
    /// - Remark: Generated from `#/paths//userSessionStats/items/get(userSessionStatsItems)`.
    func userSessionStatsItems(_ input: Operations.userSessionStatsItems.Input) async throws -> Operations.userSessionStatsItems.Output
    /// Retrieves all entities of UserSessionStats type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userSessionStats/ldeps`.
    /// - Remark: Generated from `#/paths//userSessionStats/ldeps/get(userSessionStatsLDependents)`.
    func userSessionStatsLDependents(_ input: Operations.userSessionStatsLDependents.Input) async throws -> Operations.userSessionStatsLDependents.Output
    /// Retrieves all entities of UserSessionStats type
    ///
    /// - Remark: HTTP `GET /userSessionStats/list`.
    /// - Remark: Generated from `#/paths//userSessionStats/list/get(userSessionStatsList)`.
    func userSessionStatsList(_ input: Operations.userSessionStatsList.Input) async throws -> Operations.userSessionStatsList.Output
    /// - Remark: HTTP `POST /fundTransaction/checkstripefundingeligibility`.
    /// - Remark: Generated from `#/paths//fundTransaction/checkstripefundingeligibility/post(checkStripeFundingEligibility)`.
    func checkStripeFundingEligibility(_ input: Operations.checkStripeFundingEligibility.Input) async throws -> Operations.checkStripeFundingEligibility.Output
    /// ### Close the chat context.
    ///
    /// - Remark: HTTP `POST /chat/closechat`.
    /// - Remark: Generated from `#/paths//chat/closechat/post(closeChat)`.
    func closeChat(_ input: Operations.closeChat.Input) async throws -> Operations.closeChat.Output
    /// Retrieves all entities of Chat type related to User entity
    ///
    /// - Remark: HTTP `GET /chat/deps`.
    /// - Remark: Generated from `#/paths//chat/deps/get(chatDependents)`.
    func chatDependents(_ input: Operations.chatDependents.Input) async throws -> Operations.chatDependents.Output
    /// Retrieves an entity of Chat type by its id
    ///
    /// - Remark: HTTP `GET /chat/item`.
    /// - Remark: Generated from `#/paths//chat/item/get(chatItem)`.
    func chatItem(_ input: Operations.chatItem.Input) async throws -> Operations.chatItem.Output
    /// Retrieves multiple entities of Chat type by its ids
    ///
    /// - Remark: HTTP `GET /chat/items`.
    /// - Remark: Generated from `#/paths//chat/items/get(chatItems)`.
    func chatItems(_ input: Operations.chatItems.Input) async throws -> Operations.chatItems.Output
    /// Retrieves all entities of Chat type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /chat/ldeps`.
    /// - Remark: Generated from `#/paths//chat/ldeps/get(chatLDependents)`.
    func chatLDependents(_ input: Operations.chatLDependents.Input) async throws -> Operations.chatLDependents.Output
    /// Retrieves all entities of Chat type
    ///
    /// - Remark: HTTP `GET /chat/list`.
    /// - Remark: Generated from `#/paths//chat/list/get(chatList)`.
    func chatList(_ input: Operations.chatList.Input) async throws -> Operations.chatList.Output
    /// ### Marks a chat message as read.
    ///
    /// - Remark: HTTP `POST /chat/markasreadchatmessage`.
    /// - Remark: Generated from `#/paths//chat/markasreadchatmessage/post(markAsReadChatMessage)`.
    func markAsReadChatMessage(_ input: Operations.markAsReadChatMessage.Input) async throws -> Operations.markAsReadChatMessage.Output
    /// ### Post a chat message to a given chat's history.
    ///
    /// - Remark: HTTP `POST /chat/postchatmessage`.
    /// - Remark: Generated from `#/paths//chat/postchatmessage/post(postChatMessage)`.
    func postChatMessage(_ input: Operations.postChatMessage.Input) async throws -> Operations.postChatMessage.Output
    /// Retrieves all entities of ChatMessage type related to Chat entity
    ///
    /// - Remark: HTTP `GET /chatMessage/deps`.
    /// - Remark: Generated from `#/paths//chatMessage/deps/get(chatMessageDependents)`.
    func chatMessageDependents(_ input: Operations.chatMessageDependents.Input) async throws -> Operations.chatMessageDependents.Output
    /// Retrieves an entity of ChatMessage type by its id
    ///
    /// - Remark: HTTP `GET /chatMessage/item`.
    /// - Remark: Generated from `#/paths//chatMessage/item/get(chatMessageItem)`.
    func chatMessageItem(_ input: Operations.chatMessageItem.Input) async throws -> Operations.chatMessageItem.Output
    /// Retrieves multiple entities of ChatMessage type by its ids
    ///
    /// - Remark: HTTP `GET /chatMessage/items`.
    /// - Remark: Generated from `#/paths//chatMessage/items/get(chatMessageItems)`.
    func chatMessageItems(_ input: Operations.chatMessageItems.Input) async throws -> Operations.chatMessageItems.Output
    /// Retrieves all entities of ChatMessage type related to multiple entities of Chat type
    ///
    /// - Remark: HTTP `GET /chatMessage/ldeps`.
    /// - Remark: Generated from `#/paths//chatMessage/ldeps/get(chatMessageLDependents)`.
    func chatMessageLDependents(_ input: Operations.chatMessageLDependents.Input) async throws -> Operations.chatMessageLDependents.Output
}

/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// #### Request an access token using your user credentials and API Key. 
    ///
    /// See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.
    ///
    /// ### Acquiring an Access Token
    ///
    /// ```js
    /// const URL = 'https://live.tradovateapi.com/v1'
    ///
    /// const credentials = {
    ///     name:       "Your credentials here",
    ///     password:   "Your credentials here",
    ///     appId:      "Sample App",
    ///     appVersion: "1.0",
    ///     cid:        0,
    ///     sec:        "Your API secret here"
    /// }
    ///
    /// async function getAccessToken() {
    ///     let response = await fetch(URL + '/auth/accessTokenRequest', {
    ///         method: 'POST',
    ///         headers: {
    ///             'Content-Type': 'application/json'
    ///         }
    ///     })
    ///     let result = await response.json()
    ///     return result // { accessToken, mdAccessToken, userId, ... }
    /// }
    ///
    /// //...
    ///
    /// async function main() {
    ///     const { accessToken, mdAccessToken, userId } = await getAccessToken()
    ///
    ///     //use access token
    /// }
    /// ```
    ///
    /// ### Using an Access Token
    ///
    /// ```js
    /// //use the Authorization: Bearer schema in API POST and GET requests
    ///
    /// //simple /account/list endpoint requires no body or query
    /// async function getAccounts() {
    ///     let response = await fetch(URL + '/account/list', {
    ///         method: 'GET',
    ///         headers: {
    ///             'Content-Type': 'application/json',
    ///             Authorization: `Bearer ${accessToken}` //Access Token use in HTTP requests
    ///         }
    ///     })
    ///     let result = await response.json()
    ///     return result
    /// }
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /auth/accesstokenrequest`.
    /// - Remark: Generated from `#/paths//auth/accesstokenrequest/post(accessTokenRequest)`.
    public func accessTokenRequest(
        headers: Operations.accessTokenRequest.Input.Headers = .init(),
        body: Operations.accessTokenRequest.Input.Body
    ) async throws -> Operations.accessTokenRequest.Output {
        try await accessTokenRequest(Operations.accessTokenRequest.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Shows Basic user data for the calling user.
    ///
    /// - Remark: HTTP `GET /auth/me`.
    /// - Remark: Generated from `#/paths//auth/me/get(me)`.
    public func me(headers: Operations.me.Input.Headers = .init()) async throws -> Operations.me.Output {
        try await me(Operations.me.Input(headers: headers))
    }
    /// ### Used to exchange your OAuth code for an access token.
    /// Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
    ///
    /// - Remark: HTTP `POST /auth/oauthtoken`.
    /// - Remark: Generated from `#/paths//auth/oauthtoken/post(oAuthToken)`.
    public func oAuthToken(
        headers: Operations.oAuthToken.Input.Headers = .init(),
        body: Operations.oAuthToken.Input.Body
    ) async throws -> Operations.oAuthToken.Output {
        try await oAuthToken(Operations.oAuthToken.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Request a renewal for an existing access token.
    ///
    /// - Remark: HTTP `GET /auth/renewaccesstoken`.
    /// - Remark: Generated from `#/paths//auth/renewaccesstoken/get(renewAccessToken)`.
    public func renewAccessToken(headers: Operations.renewAccessToken.Input.Headers = .init()) async throws -> Operations.renewAccessToken.Output {
        try await renewAccessToken(Operations.renewAccessToken.Input(headers: headers))
    }
    /// Retrieves all entities of Contract type related to ContractMaturity entity
    ///
    /// - Remark: HTTP `GET /contract/deps`.
    /// - Remark: Generated from `#/paths//contract/deps/get(contractDependents)`.
    public func contractDependents(
        query: Operations.contractDependents.Input.Query,
        headers: Operations.contractDependents.Input.Headers = .init()
    ) async throws -> Operations.contractDependents.Output {
        try await contractDependents(Operations.contractDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Contract type by its name
    ///
    /// - Remark: HTTP `GET /contract/find`.
    /// - Remark: Generated from `#/paths//contract/find/get(contractFind)`.
    public func contractFind(
        query: Operations.contractFind.Input.Query,
        headers: Operations.contractFind.Input.Headers = .init()
    ) async throws -> Operations.contractFind.Output {
        try await contractFind(Operations.contractFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Query the a product's fee parameters.
    ///
    /// - Remark: HTTP `POST /contract/getproductfeeparams`.
    /// - Remark: Generated from `#/paths//contract/getproductfeeparams/post(getProductFeeParams)`.
    public func getProductFeeParams(
        headers: Operations.getProductFeeParams.Input.Headers = .init(),
        body: Operations.getProductFeeParams.Input.Body
    ) async throws -> Operations.getProductFeeParams.Output {
        try await getProductFeeParams(Operations.getProductFeeParams.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an entity of Contract type by its id
    ///
    /// - Remark: HTTP `GET /contract/item`.
    /// - Remark: Generated from `#/paths//contract/item/get(contractItem)`.
    public func contractItem(
        query: Operations.contractItem.Input.Query,
        headers: Operations.contractItem.Input.Headers = .init()
    ) async throws -> Operations.contractItem.Output {
        try await contractItem(Operations.contractItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Contract type by its ids
    ///
    /// - Remark: HTTP `GET /contract/items`.
    /// - Remark: Generated from `#/paths//contract/items/get(contractItems)`.
    public func contractItems(
        query: Operations.contractItems.Input.Query,
        headers: Operations.contractItems.Input.Headers = .init()
    ) async throws -> Operations.contractItems.Output {
        try await contractItems(Operations.contractItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
    ///
    /// - Remark: HTTP `GET /contract/ldeps`.
    /// - Remark: Generated from `#/paths//contract/ldeps/get(contractLDependents)`.
    public func contractLDependents(
        query: Operations.contractLDependents.Input.Query,
        headers: Operations.contractLDependents.Input.Headers = .init()
    ) async throws -> Operations.contractLDependents.Output {
        try await contractLDependents(Operations.contractLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Request the best upcoming maturity date for a given contract.
    ///
    /// - Remark: HTTP `POST /contract/rollcontract`.
    /// - Remark: Generated from `#/paths//contract/rollcontract/post(rollContract)`.
    public func rollContract(
        headers: Operations.rollContract.Input.Headers = .init(),
        body: Operations.rollContract.Input.Body
    ) async throws -> Operations.rollContract.Output {
        try await rollContract(Operations.rollContract.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `POST /contract/rollcontracts`.
    /// - Remark: Generated from `#/paths//contract/rollcontracts/post(rollContracts)`.
    public func rollContracts(
        headers: Operations.rollContracts.Input.Headers = .init(),
        body: Operations.rollContracts.Input.Body
    ) async throws -> Operations.rollContracts.Output {
        try await rollContracts(Operations.rollContracts.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /contract/suggest`.
    /// - Remark: Generated from `#/paths//contract/suggest/get(contractSuggest)`.
    public func contractSuggest(
        query: Operations.contractSuggest.Input.Query,
        headers: Operations.contractSuggest.Input.Headers = .init()
    ) async throws -> Operations.contractSuggest.Output {
        try await contractSuggest(Operations.contractSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ContractGroup type by its name
    ///
    /// - Remark: HTTP `GET /contractGroup/find`.
    /// - Remark: Generated from `#/paths//contractGroup/find/get(contractGroupFind)`.
    public func contractGroupFind(
        query: Operations.contractGroupFind.Input.Query,
        headers: Operations.contractGroupFind.Input.Headers = .init()
    ) async throws -> Operations.contractGroupFind.Output {
        try await contractGroupFind(Operations.contractGroupFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ContractGroup type by its id
    ///
    /// - Remark: HTTP `GET /contractGroup/item`.
    /// - Remark: Generated from `#/paths//contractGroup/item/get(contractGroupItem)`.
    public func contractGroupItem(
        query: Operations.contractGroupItem.Input.Query,
        headers: Operations.contractGroupItem.Input.Headers = .init()
    ) async throws -> Operations.contractGroupItem.Output {
        try await contractGroupItem(Operations.contractGroupItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ContractGroup type by its ids
    ///
    /// - Remark: HTTP `GET /contractGroup/items`.
    /// - Remark: Generated from `#/paths//contractGroup/items/get(contractGroupItems)`.
    public func contractGroupItems(
        query: Operations.contractGroupItems.Input.Query,
        headers: Operations.contractGroupItems.Input.Headers = .init()
    ) async throws -> Operations.contractGroupItems.Output {
        try await contractGroupItems(Operations.contractGroupItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ContractGroup type
    ///
    /// - Remark: HTTP `GET /contractGroup/list`.
    /// - Remark: Generated from `#/paths//contractGroup/list/get(contractGroupList)`.
    public func contractGroupList(headers: Operations.contractGroupList.Input.Headers = .init()) async throws -> Operations.contractGroupList.Output {
        try await contractGroupList(Operations.contractGroupList.Input(headers: headers))
    }
    /// Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /contractGroup/suggest`.
    /// - Remark: Generated from `#/paths//contractGroup/suggest/get(contractGroupSuggest)`.
    public func contractGroupSuggest(
        query: Operations.contractGroupSuggest.Input.Query,
        headers: Operations.contractGroupSuggest.Input.Headers = .init()
    ) async throws -> Operations.contractGroupSuggest.Output {
        try await contractGroupSuggest(Operations.contractGroupSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ContractMaturity type related to Product entity
    ///
    /// - Remark: HTTP `GET /contractMaturity/deps`.
    /// - Remark: Generated from `#/paths//contractMaturity/deps/get(contractMaturityDependents)`.
    public func contractMaturityDependents(
        query: Operations.contractMaturityDependents.Input.Query,
        headers: Operations.contractMaturityDependents.Input.Headers = .init()
    ) async throws -> Operations.contractMaturityDependents.Output {
        try await contractMaturityDependents(Operations.contractMaturityDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ContractMaturity type by its id
    ///
    /// - Remark: HTTP `GET /contractMaturity/item`.
    /// - Remark: Generated from `#/paths//contractMaturity/item/get(contractMaturityItem)`.
    public func contractMaturityItem(
        query: Operations.contractMaturityItem.Input.Query,
        headers: Operations.contractMaturityItem.Input.Headers = .init()
    ) async throws -> Operations.contractMaturityItem.Output {
        try await contractMaturityItem(Operations.contractMaturityItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ContractMaturity type by its ids
    ///
    /// - Remark: HTTP `GET /contractMaturity/items`.
    /// - Remark: Generated from `#/paths//contractMaturity/items/get(contractMaturityItems)`.
    public func contractMaturityItems(
        query: Operations.contractMaturityItems.Input.Query,
        headers: Operations.contractMaturityItems.Input.Headers = .init()
    ) async throws -> Operations.contractMaturityItems.Output {
        try await contractMaturityItems(Operations.contractMaturityItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ContractMaturity type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /contractMaturity/ldeps`.
    /// - Remark: Generated from `#/paths//contractMaturity/ldeps/get(contractMaturityLDependents)`.
    public func contractMaturityLDependents(
        query: Operations.contractMaturityLDependents.Input.Query,
        headers: Operations.contractMaturityLDependents.Input.Headers = .init()
    ) async throws -> Operations.contractMaturityLDependents.Output {
        try await contractMaturityLDependents(Operations.contractMaturityLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Currency type by its name
    ///
    /// - Remark: HTTP `GET /currency/find`.
    /// - Remark: Generated from `#/paths//currency/find/get(currencyFind)`.
    public func currencyFind(
        query: Operations.currencyFind.Input.Query,
        headers: Operations.currencyFind.Input.Headers = .init()
    ) async throws -> Operations.currencyFind.Output {
        try await currencyFind(Operations.currencyFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Currency type by its id
    ///
    /// - Remark: HTTP `GET /currency/item`.
    /// - Remark: Generated from `#/paths//currency/item/get(currencyItem)`.
    public func currencyItem(
        query: Operations.currencyItem.Input.Query,
        headers: Operations.currencyItem.Input.Headers = .init()
    ) async throws -> Operations.currencyItem.Output {
        try await currencyItem(Operations.currencyItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Currency type by its ids
    ///
    /// - Remark: HTTP `GET /currency/items`.
    /// - Remark: Generated from `#/paths//currency/items/get(currencyItems)`.
    public func currencyItems(
        query: Operations.currencyItems.Input.Query,
        headers: Operations.currencyItems.Input.Headers = .init()
    ) async throws -> Operations.currencyItems.Output {
        try await currencyItems(Operations.currencyItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Currency type
    ///
    /// - Remark: HTTP `GET /currency/list`.
    /// - Remark: Generated from `#/paths//currency/list/get(currencyList)`.
    public func currencyList(headers: Operations.currencyList.Input.Headers = .init()) async throws -> Operations.currencyList.Output {
        try await currencyList(Operations.currencyList.Input(headers: headers))
    }
    /// Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /currency/suggest`.
    /// - Remark: Generated from `#/paths//currency/suggest/get(currencySuggest)`.
    public func currencySuggest(
        query: Operations.currencySuggest.Input.Query,
        headers: Operations.currencySuggest.Input.Headers = .init()
    ) async throws -> Operations.currencySuggest.Output {
        try await currencySuggest(Operations.currencySuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CurrencyRate type related to Currency entity
    ///
    /// - Remark: HTTP `GET /currencyRate/deps`.
    /// - Remark: Generated from `#/paths//currencyRate/deps/get(currencyRateDependents)`.
    public func currencyRateDependents(
        query: Operations.currencyRateDependents.Input.Query,
        headers: Operations.currencyRateDependents.Input.Headers = .init()
    ) async throws -> Operations.currencyRateDependents.Output {
        try await currencyRateDependents(Operations.currencyRateDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of CurrencyRate type by its id
    ///
    /// - Remark: HTTP `GET /currencyRate/item`.
    /// - Remark: Generated from `#/paths//currencyRate/item/get(currencyRateItem)`.
    public func currencyRateItem(
        query: Operations.currencyRateItem.Input.Query,
        headers: Operations.currencyRateItem.Input.Headers = .init()
    ) async throws -> Operations.currencyRateItem.Output {
        try await currencyRateItem(Operations.currencyRateItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of CurrencyRate type by its ids
    ///
    /// - Remark: HTTP `GET /currencyRate/items`.
    /// - Remark: Generated from `#/paths//currencyRate/items/get(currencyRateItems)`.
    public func currencyRateItems(
        query: Operations.currencyRateItems.Input.Query,
        headers: Operations.currencyRateItems.Input.Headers = .init()
    ) async throws -> Operations.currencyRateItems.Output {
        try await currencyRateItems(Operations.currencyRateItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
    ///
    /// - Remark: HTTP `GET /currencyRate/ldeps`.
    /// - Remark: Generated from `#/paths//currencyRate/ldeps/get(currencyRateLDependents)`.
    public func currencyRateLDependents(
        query: Operations.currencyRateLDependents.Input.Query,
        headers: Operations.currencyRateLDependents.Input.Headers = .init()
    ) async throws -> Operations.currencyRateLDependents.Output {
        try await currencyRateLDependents(Operations.currencyRateLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CurrencyRate type
    ///
    /// - Remark: HTTP `GET /currencyRate/list`.
    /// - Remark: Generated from `#/paths//currencyRate/list/get(currencyRateList)`.
    public func currencyRateList(headers: Operations.currencyRateList.Input.Headers = .init()) async throws -> Operations.currencyRateList.Output {
        try await currencyRateList(Operations.currencyRateList.Input(headers: headers))
    }
    /// Retrieves an entity of Exchange type by its name
    ///
    /// - Remark: HTTP `GET /exchange/find`.
    /// - Remark: Generated from `#/paths//exchange/find/get(exchangeFind)`.
    public func exchangeFind(
        query: Operations.exchangeFind.Input.Query,
        headers: Operations.exchangeFind.Input.Headers = .init()
    ) async throws -> Operations.exchangeFind.Output {
        try await exchangeFind(Operations.exchangeFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Exchange type by its id
    ///
    /// - Remark: HTTP `GET /exchange/item`.
    /// - Remark: Generated from `#/paths//exchange/item/get(exchangeItem)`.
    public func exchangeItem(
        query: Operations.exchangeItem.Input.Query,
        headers: Operations.exchangeItem.Input.Headers = .init()
    ) async throws -> Operations.exchangeItem.Output {
        try await exchangeItem(Operations.exchangeItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Exchange type by its ids
    ///
    /// - Remark: HTTP `GET /exchange/items`.
    /// - Remark: Generated from `#/paths//exchange/items/get(exchangeItems)`.
    public func exchangeItems(
        query: Operations.exchangeItems.Input.Query,
        headers: Operations.exchangeItems.Input.Headers = .init()
    ) async throws -> Operations.exchangeItems.Output {
        try await exchangeItems(Operations.exchangeItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Exchange type
    ///
    /// - Remark: HTTP `GET /exchange/list`.
    /// - Remark: Generated from `#/paths//exchange/list/get(exchangeList)`.
    public func exchangeList(headers: Operations.exchangeList.Input.Headers = .init()) async throws -> Operations.exchangeList.Output {
        try await exchangeList(Operations.exchangeList.Input(headers: headers))
    }
    /// Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /exchange/suggest`.
    /// - Remark: Generated from `#/paths//exchange/suggest/get(exchangeSuggest)`.
    public func exchangeSuggest(
        query: Operations.exchangeSuggest.Input.Query,
        headers: Operations.exchangeSuggest.Input.Headers = .init()
    ) async throws -> Operations.exchangeSuggest.Output {
        try await exchangeSuggest(Operations.exchangeSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Product type related to Exchange entity
    ///
    /// - Remark: HTTP `GET /product/deps`.
    /// - Remark: Generated from `#/paths//product/deps/get(productDependents)`.
    public func productDependents(
        query: Operations.productDependents.Input.Query,
        headers: Operations.productDependents.Input.Headers = .init()
    ) async throws -> Operations.productDependents.Output {
        try await productDependents(Operations.productDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Product type by its name
    ///
    /// - Remark: HTTP `GET /product/find`.
    /// - Remark: Generated from `#/paths//product/find/get(productFind)`.
    public func productFind(
        query: Operations.productFind.Input.Query,
        headers: Operations.productFind.Input.Headers = .init()
    ) async throws -> Operations.productFind.Output {
        try await productFind(Operations.productFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Product type by its id
    ///
    /// - Remark: HTTP `GET /product/item`.
    /// - Remark: Generated from `#/paths//product/item/get(productItem)`.
    public func productItem(
        query: Operations.productItem.Input.Query,
        headers: Operations.productItem.Input.Headers = .init()
    ) async throws -> Operations.productItem.Output {
        try await productItem(Operations.productItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Product type by its ids
    ///
    /// - Remark: HTTP `GET /product/items`.
    /// - Remark: Generated from `#/paths//product/items/get(productItems)`.
    public func productItems(
        query: Operations.productItems.Input.Query,
        headers: Operations.productItems.Input.Headers = .init()
    ) async throws -> Operations.productItems.Output {
        try await productItems(Operations.productItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Product type related to multiple entities of Exchange type
    ///
    /// - Remark: HTTP `GET /product/ldeps`.
    /// - Remark: Generated from `#/paths//product/ldeps/get(productLDependents)`.
    public func productLDependents(
        query: Operations.productLDependents.Input.Query,
        headers: Operations.productLDependents.Input.Headers = .init()
    ) async throws -> Operations.productLDependents.Output {
        try await productLDependents(Operations.productLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Product type
    ///
    /// - Remark: HTTP `GET /product/list`.
    /// - Remark: Generated from `#/paths//product/list/get(productList)`.
    public func productList(headers: Operations.productList.Input.Headers = .init()) async throws -> Operations.productList.Output {
        try await productList(Operations.productList.Input(headers: headers))
    }
    /// Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /product/suggest`.
    /// - Remark: Generated from `#/paths//product/suggest/get(productSuggest)`.
    public func productSuggest(
        query: Operations.productSuggest.Input.Query,
        headers: Operations.productSuggest.Input.Headers = .init()
    ) async throws -> Operations.productSuggest.Output {
        try await productSuggest(Operations.productSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ProductSession type related to Product entity
    ///
    /// - Remark: HTTP `GET /productSession/deps`.
    /// - Remark: Generated from `#/paths//productSession/deps/get(productSessionDependents)`.
    public func productSessionDependents(
        query: Operations.productSessionDependents.Input.Query,
        headers: Operations.productSessionDependents.Input.Headers = .init()
    ) async throws -> Operations.productSessionDependents.Output {
        try await productSessionDependents(Operations.productSessionDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ProductSession type by its id
    ///
    /// - Remark: HTTP `GET /productSession/item`.
    /// - Remark: Generated from `#/paths//productSession/item/get(productSessionItem)`.
    public func productSessionItem(
        query: Operations.productSessionItem.Input.Query,
        headers: Operations.productSessionItem.Input.Headers = .init()
    ) async throws -> Operations.productSessionItem.Output {
        try await productSessionItem(Operations.productSessionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ProductSession type by its ids
    ///
    /// - Remark: HTTP `GET /productSession/items`.
    /// - Remark: Generated from `#/paths//productSession/items/get(productSessionItems)`.
    public func productSessionItems(
        query: Operations.productSessionItems.Input.Query,
        headers: Operations.productSessionItems.Input.Headers = .init()
    ) async throws -> Operations.productSessionItems.Output {
        try await productSessionItems(Operations.productSessionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ProductSession type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /productSession/ldeps`.
    /// - Remark: Generated from `#/paths//productSession/ldeps/get(productSessionLDependents)`.
    public func productSessionLDependents(
        query: Operations.productSessionLDependents.Input.Query,
        headers: Operations.productSessionLDependents.Input.Headers = .init()
    ) async throws -> Operations.productSessionLDependents.Output {
        try await productSessionLDependents(Operations.productSessionLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of SpreadDefinition type by its id
    ///
    /// - Remark: HTTP `GET /spreadDefinition/item`.
    /// - Remark: Generated from `#/paths//spreadDefinition/item/get(spreadDefinitionItem)`.
    public func spreadDefinitionItem(
        query: Operations.spreadDefinitionItem.Input.Query,
        headers: Operations.spreadDefinitionItem.Input.Headers = .init()
    ) async throws -> Operations.spreadDefinitionItem.Output {
        try await spreadDefinitionItem(Operations.spreadDefinitionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of SpreadDefinition type by its ids
    ///
    /// - Remark: HTTP `GET /spreadDefinition/items`.
    /// - Remark: Generated from `#/paths//spreadDefinition/items/get(spreadDefinitionItems)`.
    public func spreadDefinitionItems(
        query: Operations.spreadDefinitionItems.Input.Query,
        headers: Operations.spreadDefinitionItems.Input.Headers = .init()
    ) async throws -> Operations.spreadDefinitionItems.Output {
        try await spreadDefinitionItems(Operations.spreadDefinitionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Command type related to Order entity
    ///
    /// - Remark: HTTP `GET /command/deps`.
    /// - Remark: Generated from `#/paths//command/deps/get(commandDependents)`.
    public func commandDependents(
        query: Operations.commandDependents.Input.Query,
        headers: Operations.commandDependents.Input.Headers = .init()
    ) async throws -> Operations.commandDependents.Output {
        try await commandDependents(Operations.commandDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Command type by its id
    ///
    /// - Remark: HTTP `GET /command/item`.
    /// - Remark: Generated from `#/paths//command/item/get(commandItem)`.
    public func commandItem(
        query: Operations.commandItem.Input.Query,
        headers: Operations.commandItem.Input.Headers = .init()
    ) async throws -> Operations.commandItem.Output {
        try await commandItem(Operations.commandItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Command type by its ids
    ///
    /// - Remark: HTTP `GET /command/items`.
    /// - Remark: Generated from `#/paths//command/items/get(commandItems)`.
    public func commandItems(
        query: Operations.commandItems.Input.Query,
        headers: Operations.commandItems.Input.Headers = .init()
    ) async throws -> Operations.commandItems.Output {
        try await commandItems(Operations.commandItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Command type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /command/ldeps`.
    /// - Remark: Generated from `#/paths//command/ldeps/get(commandLDependents)`.
    public func commandLDependents(
        query: Operations.commandLDependents.Input.Query,
        headers: Operations.commandLDependents.Input.Headers = .init()
    ) async throws -> Operations.commandLDependents.Output {
        try await commandLDependents(Operations.commandLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Command type
    ///
    /// - Remark: HTTP `GET /command/list`.
    /// - Remark: Generated from `#/paths//command/list/get(commandList)`.
    public func commandList(headers: Operations.commandList.Input.Headers = .init()) async throws -> Operations.commandList.Output {
        try await commandList(Operations.commandList.Input(headers: headers))
    }
    /// Retrieves all entities of CommandReport type related to Command entity
    ///
    /// - Remark: HTTP `GET /commandReport/deps`.
    /// - Remark: Generated from `#/paths//commandReport/deps/get(commandReportDependents)`.
    public func commandReportDependents(
        query: Operations.commandReportDependents.Input.Query,
        headers: Operations.commandReportDependents.Input.Headers = .init()
    ) async throws -> Operations.commandReportDependents.Output {
        try await commandReportDependents(Operations.commandReportDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of CommandReport type by its id
    ///
    /// - Remark: HTTP `GET /commandReport/item`.
    /// - Remark: Generated from `#/paths//commandReport/item/get(commandReportItem)`.
    public func commandReportItem(
        query: Operations.commandReportItem.Input.Query,
        headers: Operations.commandReportItem.Input.Headers = .init()
    ) async throws -> Operations.commandReportItem.Output {
        try await commandReportItem(Operations.commandReportItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of CommandReport type by its ids
    ///
    /// - Remark: HTTP `GET /commandReport/items`.
    /// - Remark: Generated from `#/paths//commandReport/items/get(commandReportItems)`.
    public func commandReportItems(
        query: Operations.commandReportItems.Input.Query,
        headers: Operations.commandReportItems.Input.Headers = .init()
    ) async throws -> Operations.commandReportItems.Output {
        try await commandReportItems(Operations.commandReportItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CommandReport type related to multiple entities of Command type
    ///
    /// - Remark: HTTP `GET /commandReport/ldeps`.
    /// - Remark: Generated from `#/paths//commandReport/ldeps/get(commandReportLDependents)`.
    public func commandReportLDependents(
        query: Operations.commandReportLDependents.Input.Query,
        headers: Operations.commandReportLDependents.Input.Headers = .init()
    ) async throws -> Operations.commandReportLDependents.Output {
        try await commandReportLDependents(Operations.commandReportLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CommandReport type
    ///
    /// - Remark: HTTP `GET /commandReport/list`.
    /// - Remark: Generated from `#/paths//commandReport/list/get(commandReportList)`.
    public func commandReportList(headers: Operations.commandReportList.Input.Headers = .init()) async throws -> Operations.commandReportList.Output {
        try await commandReportList(Operations.commandReportList.Input(headers: headers))
    }
    /// Retrieves all entities of ExecutionReport type related to Command entity
    ///
    /// - Remark: HTTP `GET /executionReport/deps`.
    /// - Remark: Generated from `#/paths//executionReport/deps/get(executionReportDependents)`.
    public func executionReportDependents(
        query: Operations.executionReportDependents.Input.Query,
        headers: Operations.executionReportDependents.Input.Headers = .init()
    ) async throws -> Operations.executionReportDependents.Output {
        try await executionReportDependents(Operations.executionReportDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ExecutionReport type by its name
    ///
    /// - Remark: HTTP `GET /executionReport/find`.
    /// - Remark: Generated from `#/paths//executionReport/find/get(executionReportFind)`.
    public func executionReportFind(
        query: Operations.executionReportFind.Input.Query,
        headers: Operations.executionReportFind.Input.Headers = .init()
    ) async throws -> Operations.executionReportFind.Output {
        try await executionReportFind(Operations.executionReportFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ExecutionReport type by its id
    ///
    /// - Remark: HTTP `GET /executionReport/item`.
    /// - Remark: Generated from `#/paths//executionReport/item/get(executionReportItem)`.
    public func executionReportItem(
        query: Operations.executionReportItem.Input.Query,
        headers: Operations.executionReportItem.Input.Headers = .init()
    ) async throws -> Operations.executionReportItem.Output {
        try await executionReportItem(Operations.executionReportItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ExecutionReport type by its ids
    ///
    /// - Remark: HTTP `GET /executionReport/items`.
    /// - Remark: Generated from `#/paths//executionReport/items/get(executionReportItems)`.
    public func executionReportItems(
        query: Operations.executionReportItems.Input.Query,
        headers: Operations.executionReportItems.Input.Headers = .init()
    ) async throws -> Operations.executionReportItems.Output {
        try await executionReportItems(Operations.executionReportItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ExecutionReport type related to multiple entities of Command type
    ///
    /// - Remark: HTTP `GET /executionReport/ldeps`.
    /// - Remark: Generated from `#/paths//executionReport/ldeps/get(executionReportLDependents)`.
    public func executionReportLDependents(
        query: Operations.executionReportLDependents.Input.Query,
        headers: Operations.executionReportLDependents.Input.Headers = .init()
    ) async throws -> Operations.executionReportLDependents.Output {
        try await executionReportLDependents(Operations.executionReportLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ExecutionReport type
    ///
    /// - Remark: HTTP `GET /executionReport/list`.
    /// - Remark: Generated from `#/paths//executionReport/list/get(executionReportList)`.
    public func executionReportList(headers: Operations.executionReportList.Input.Headers = .init()) async throws -> Operations.executionReportList.Output {
        try await executionReportList(Operations.executionReportList.Input(headers: headers))
    }
    /// Retrieves entities of ExecutionReport type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /executionReport/suggest`.
    /// - Remark: Generated from `#/paths//executionReport/suggest/get(executionReportSuggest)`.
    public func executionReportSuggest(
        query: Operations.executionReportSuggest.Input.Query,
        headers: Operations.executionReportSuggest.Input.Headers = .init()
    ) async throws -> Operations.executionReportSuggest.Output {
        try await executionReportSuggest(Operations.executionReportSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Fill type related to Order entity
    ///
    /// - Remark: HTTP `GET /fill/deps`.
    /// - Remark: Generated from `#/paths//fill/deps/get(fillDependents)`.
    public func fillDependents(
        query: Operations.fillDependents.Input.Query,
        headers: Operations.fillDependents.Input.Headers = .init()
    ) async throws -> Operations.fillDependents.Output {
        try await fillDependents(Operations.fillDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Fill type by its id
    ///
    /// - Remark: HTTP `GET /fill/item`.
    /// - Remark: Generated from `#/paths//fill/item/get(fillItem)`.
    public func fillItem(
        query: Operations.fillItem.Input.Query,
        headers: Operations.fillItem.Input.Headers = .init()
    ) async throws -> Operations.fillItem.Output {
        try await fillItem(Operations.fillItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Fill type by its ids
    ///
    /// - Remark: HTTP `GET /fill/items`.
    /// - Remark: Generated from `#/paths//fill/items/get(fillItems)`.
    public func fillItems(
        query: Operations.fillItems.Input.Query,
        headers: Operations.fillItems.Input.Headers = .init()
    ) async throws -> Operations.fillItems.Output {
        try await fillItems(Operations.fillItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Fill type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /fill/ldeps`.
    /// - Remark: Generated from `#/paths//fill/ldeps/get(fillLDependents)`.
    public func fillLDependents(
        query: Operations.fillLDependents.Input.Query,
        headers: Operations.fillLDependents.Input.Headers = .init()
    ) async throws -> Operations.fillLDependents.Output {
        try await fillLDependents(Operations.fillLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Fill type
    ///
    /// - Remark: HTTP `GET /fill/list`.
    /// - Remark: Generated from `#/paths//fill/list/get(fillList)`.
    public func fillList(headers: Operations.fillList.Input.Headers = .init()) async throws -> Operations.fillList.Output {
        try await fillList(Operations.fillList.Input(headers: headers))
    }
    /// Retrieves all entities of FillFee type related to Fill entity
    ///
    /// - Remark: HTTP `GET /fillFee/deps`.
    /// - Remark: Generated from `#/paths//fillFee/deps/get(fillFeeDependents)`.
    public func fillFeeDependents(
        query: Operations.fillFeeDependents.Input.Query,
        headers: Operations.fillFeeDependents.Input.Headers = .init()
    ) async throws -> Operations.fillFeeDependents.Output {
        try await fillFeeDependents(Operations.fillFeeDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of FillFee type by its id
    ///
    /// - Remark: HTTP `GET /fillFee/item`.
    /// - Remark: Generated from `#/paths//fillFee/item/get(fillFeeItem)`.
    public func fillFeeItem(
        query: Operations.fillFeeItem.Input.Query,
        headers: Operations.fillFeeItem.Input.Headers = .init()
    ) async throws -> Operations.fillFeeItem.Output {
        try await fillFeeItem(Operations.fillFeeItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of FillFee type by its ids
    ///
    /// - Remark: HTTP `GET /fillFee/items`.
    /// - Remark: Generated from `#/paths//fillFee/items/get(fillFeeItems)`.
    public func fillFeeItems(
        query: Operations.fillFeeItems.Input.Query,
        headers: Operations.fillFeeItems.Input.Headers = .init()
    ) async throws -> Operations.fillFeeItems.Output {
        try await fillFeeItems(Operations.fillFeeItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of FillFee type related to multiple entities of Fill type
    ///
    /// - Remark: HTTP `GET /fillFee/ldeps`.
    /// - Remark: Generated from `#/paths//fillFee/ldeps/get(fillFeeLDependents)`.
    public func fillFeeLDependents(
        query: Operations.fillFeeLDependents.Input.Query,
        headers: Operations.fillFeeLDependents.Input.Headers = .init()
    ) async throws -> Operations.fillFeeLDependents.Output {
        try await fillFeeLDependents(Operations.fillFeeLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of FillFee type
    ///
    /// - Remark: HTTP `GET /fillFee/list`.
    /// - Remark: Generated from `#/paths//fillFee/list/get(fillFeeList)`.
    public func fillFeeList(headers: Operations.fillFeeList.Input.Headers = .init()) async throws -> Operations.fillFeeList.Output {
        try await fillFeeList(Operations.fillFeeList.Input(headers: headers))
    }
    /// ### Make a request to cancel an order.
    ///
    /// - Remark: HTTP `POST /order/cancelorder`.
    /// - Remark: Generated from `#/paths//order/cancelorder/post(cancelOrder)`.
    public func cancelOrder(
        headers: Operations.cancelOrder.Input.Headers = .init(),
        body: Operations.cancelOrder.Input.Body
    ) async throws -> Operations.cancelOrder.Output {
        try await cancelOrder(Operations.cancelOrder.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of Order type related to Account entity
    ///
    /// - Remark: HTTP `GET /order/deps`.
    /// - Remark: Generated from `#/paths//order/deps/get(orderDependents)`.
    public func orderDependents(
        query: Operations.orderDependents.Input.Query,
        headers: Operations.orderDependents.Input.Headers = .init()
    ) async throws -> Operations.orderDependents.Output {
        try await orderDependents(Operations.orderDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Order type by its id
    ///
    /// - Remark: HTTP `GET /order/item`.
    /// - Remark: Generated from `#/paths//order/item/get(orderItem)`.
    public func orderItem(
        query: Operations.orderItem.Input.Query,
        headers: Operations.orderItem.Input.Headers = .init()
    ) async throws -> Operations.orderItem.Output {
        try await orderItem(Operations.orderItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Order type by its ids
    ///
    /// - Remark: HTTP `GET /order/items`.
    /// - Remark: Generated from `#/paths//order/items/get(orderItems)`.
    public func orderItems(
        query: Operations.orderItems.Input.Query,
        headers: Operations.orderItems.Input.Headers = .init()
    ) async throws -> Operations.orderItems.Output {
        try await orderItems(Operations.orderItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Order type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /order/ldeps`.
    /// - Remark: Generated from `#/paths//order/ldeps/get(orderLDependents)`.
    public func orderLDependents(
        query: Operations.orderLDependents.Input.Query,
        headers: Operations.orderLDependents.Input.Headers = .init()
    ) async throws -> Operations.orderLDependents.Output {
        try await orderLDependents(Operations.orderLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Send a request to cancel orders for a specific contract and close that position for the given account.
    /// This request initiates the cancellation process of open orders for an existing position held by this account.
    /// > Note: This is a request to cancel orders and close a position, not a guarantee. Any operation could fail for a number of reasons, ranging from Exchange rejection to incorrect parameterization.
    ///
    ///
    /// - Remark: HTTP `POST /order/liquidateposition`.
    /// - Remark: Generated from `#/paths//order/liquidateposition/post(liquidatePosition)`.
    public func liquidatePosition(
        headers: Operations.liquidatePosition.Input.Headers = .init(),
        body: Operations.liquidatePosition.Input.Body
    ) async throws -> Operations.liquidatePosition.Output {
        try await liquidatePosition(Operations.liquidatePosition.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of Order type
    ///
    /// - Remark: HTTP `GET /order/list`.
    /// - Remark: Generated from `#/paths//order/list/get(orderList)`.
    public func orderList(headers: Operations.orderList.Input.Headers = .init()) async throws -> Operations.orderList.Output {
        try await orderList(Operations.orderList.Input(headers: headers))
    }
    /// ### Make a request to modify the parameters of an order.
    /// You can request changes to an order, such as the trigger price for a Stop or Limit order.
    /// > *Note*: This is no guarantee that the order can be modified in the way requests. Market, exchange and logical rules apply. 
    ///
    /// - Remark: HTTP `POST /order/modifyorder`.
    /// - Remark: Generated from `#/paths//order/modifyorder/post(modifyOrder)`.
    public func modifyOrder(
        headers: Operations.modifyOrder.Input.Headers = .init(),
        body: Operations.modifyOrder.Input.Body
    ) async throws -> Operations.modifyOrder.Output {
        try await modifyOrder(Operations.modifyOrder.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Place a Order Cancels Order order strategy.
    /// OCO order strategies link 2 orders together such that if one order is filled, the other order is cancelled. You must provide an `other` parameter pertaining to the order linked to this one. The `other` must specify an `action` and an `orderType` which determines the other parameters that must be set. For example a Limit or Stop order must use the `price` parameter, but a Stop-Limit will require a `price` and a `stopPrice`. Below is an example of an OCO that either sells to take profit at 4200 points, or sells to stop loss at 4100 points.
    ///
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const limit = {
    ///     action: 'Sell',
    ///     orderType: 'Limit',
    ///     price: 4200.00
    /// }
    /// const oco = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MESM1",
    ///     orderQty: 1,
    ///     orderType: "Stop",
    ///     price: 4100.00
    ///     isAutomated: true, //must be true if this isn't an order made directly by a human
    ///     other: limit
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeoco', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(oco)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000, ocoId: 0000000 }
    /// ```
    ///
    /// - Remark: HTTP `POST /order/placeoco`.
    /// - Remark: Generated from `#/paths//order/placeoco/post(placeOCO)`.
    public func placeOCO(
        headers: Operations.placeOCO.Input.Headers = .init(),
        body: Operations.placeOCO.Input.Body
    ) async throws -> Operations.placeOCO.Output {
        try await placeOCO(Operations.placeOCO.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Make a request to place an order. 
    /// Depending on the order type, the parameters vary. In the Trader application, you can see the details of placing a standard order ticket by adding the Order Ticket module to your workspace.
    ///
    /// #### *Market Order*
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const body = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MYMM1",
    ///     orderQty: 1,
    ///     orderType: "Market",
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeorder', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(body)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    ///
    /// ```
    ///
    /// #### *Sell Limit*
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const body = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Sell",
    ///     symbol: "MYMM1",
    ///     orderQty: 1,
    ///     orderType: "Limit",
    ///     price: 35000, //use for single value like limit or stop
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeorder', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(body)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    ///
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /order/placeorder`.
    /// - Remark: Generated from `#/paths//order/placeorder/post(placeOrder)`.
    public func placeOrder(
        headers: Operations.placeOrder.Input.Headers = .init(),
        body: Operations.placeOrder.Input.Body
    ) async throws -> Operations.placeOrder.Output {
        try await placeOrder(Operations.placeOrder.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Place an Order Sends Order order strategy.
    /// In the Trader application, the details of OSO orders can be viewed by adding the Order Ticket module to your workspace and selecting the Advanced workspace options with Brackets enabled. OSO orders allow for the most complex multi-bracket trading strategies. As an example, imagine MESM1 is trading around 4175.00 points. You want to place a Buy order for 4150.00 points, buying below market. We place an OSO to take profits at 4200.00 points. If the initial order is filled, the `bracket1` order will be sent. Below is an example in JavaScript:
    ///
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    ///
    /// const oso = {
    ///     action: 'Sell',
    ///     orderType: 'Limit',
    ///     price: 4200.00,
    /// }
    ///
    /// const initial = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MESM1",
    ///     orderQty: 1,
    ///     orderType: "Limit",
    ///     price: 4150.00,
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    ///     bracket1: oso
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeOSO', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(initial)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    /// ```
    ///
    /// >*Note:* If you specify both `bracket1` and `bracket2` the two orders will be linked as an OCO, where filling one will cancel the other.
    ///
    /// - Remark: HTTP `POST /order/placeoso`.
    /// - Remark: Generated from `#/paths//order/placeoso/post(placeOSO)`.
    public func placeOSO(
        headers: Operations.placeOSO.Input.Headers = .init(),
        body: Operations.placeOSO.Input.Body
    ) async throws -> Operations.placeOSO.Output {
        try await placeOSO(Operations.placeOSO.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of OrderStrategy type related to Account entity
    ///
    /// - Remark: HTTP `GET /orderStrategy/deps`.
    /// - Remark: Generated from `#/paths//orderStrategy/deps/get(orderStrategyDependents)`.
    public func orderStrategyDependents(
        query: Operations.orderStrategyDependents.Input.Query,
        headers: Operations.orderStrategyDependents.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyDependents.Output {
        try await orderStrategyDependents(Operations.orderStrategyDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Stop a running multi-bracket strategy.
    ///
    /// - Remark: HTTP `POST /orderStrategy/interruptorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/interruptorderstrategy/post(interruptOrderStrategy)`.
    public func interruptOrderStrategy(
        headers: Operations.interruptOrderStrategy.Input.Headers = .init(),
        body: Operations.interruptOrderStrategy.Input.Body
    ) async throws -> Operations.interruptOrderStrategy.Output {
        try await interruptOrderStrategy(Operations.interruptOrderStrategy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an entity of OrderStrategy type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategy/item`.
    /// - Remark: Generated from `#/paths//orderStrategy/item/get(orderStrategyItem)`.
    public func orderStrategyItem(
        query: Operations.orderStrategyItem.Input.Query,
        headers: Operations.orderStrategyItem.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyItem.Output {
        try await orderStrategyItem(Operations.orderStrategyItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of OrderStrategy type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategy/items`.
    /// - Remark: Generated from `#/paths//orderStrategy/items/get(orderStrategyItems)`.
    public func orderStrategyItems(
        query: Operations.orderStrategyItems.Input.Query,
        headers: Operations.orderStrategyItems.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyItems.Output {
        try await orderStrategyItems(Operations.orderStrategyItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of OrderStrategy type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /orderStrategy/ldeps`.
    /// - Remark: Generated from `#/paths//orderStrategy/ldeps/get(orderStrategyLDependents)`.
    public func orderStrategyLDependents(
        query: Operations.orderStrategyLDependents.Input.Query,
        headers: Operations.orderStrategyLDependents.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyLDependents.Output {
        try await orderStrategyLDependents(Operations.orderStrategyLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of OrderStrategy type
    ///
    /// - Remark: HTTP `GET /orderStrategy/list`.
    /// - Remark: Generated from `#/paths//orderStrategy/list/get(orderStrategyList)`.
    public func orderStrategyList(headers: Operations.orderStrategyList.Input.Headers = .init()) async throws -> Operations.orderStrategyList.Output {
        try await orderStrategyList(Operations.orderStrategyList.Input(headers: headers))
    }
    /// ### Modify an existing Order Strategy
    ///
    /// - Remark: HTTP `POST /orderStrategy/modifyorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/modifyorderstrategy/post(modifyOrderStrategy)`.
    public func modifyOrderStrategy(
        headers: Operations.modifyOrderStrategy.Input.Headers = .init(),
        body: Operations.modifyOrderStrategy.Input.Body
    ) async throws -> Operations.modifyOrderStrategy.Output {
        try await modifyOrderStrategy(Operations.modifyOrderStrategy.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Start a multi-bracket trading strategy.
    /// This endpoint is used with a WebSocket. You can create any number of brackets and add them to `brackets` field on the `params` object as a JSON string.
    ///
    /// ```js
    ///
    /// const URL = 'wss://demo.tradovateapi.com/v1/websocket'
    ///
    /// const params = {
    ///     entryVersion: {
    ///         orderQty: 1,
    ///         orderType: "Market"
    ///     },
    ///     brackets: [{
    ///         qty: 1,
    ///         profitTarget: -30,
    ///         stopLoss: 15,
    ///         trailingStop: false
    ///     }]
    /// }
    ///
    /// const body = {
    ///     accountId: myAcctId,
    ///     accountSpec: name,
    ///     symbol: 'MESM1',
    ///     action: 'Sell',
    ///     orderStrategyTypeId: 2, //2 is 'multibracket', we currently only offer this strategy but more may exist in the future.
    ///     params: JSON.stringify(params)
    /// }
    ///
    /// const mySocket = new WebSocket(URL)
    ///
    /// //authorize socket using your access token
    /// mySocket.onopen = function() {
    ///     mySocket.send(`authorize\n0\n\n${accessToken}`)
    /// }
    ///
    /// mySocket.send(`orderstrategy/startorderstrategy\n4\n\n${JSON.stringify(body)}`)
    ///
    /// ```
    ///
    /// For more details about working with advanced order types, see [placeOrder](/#operation/placeOrder), [placeOCO](/#operation/placeOCO), and [placeOSO](/#operation/placeOSO). 
    ///
    ///
    /// - Remark: HTTP `POST /orderStrategy/startorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/startorderstrategy/post(startOrderStrategy)`.
    public func startOrderStrategy(
        headers: Operations.startOrderStrategy.Input.Headers = .init(),
        body: Operations.startOrderStrategy.Input.Body
    ) async throws -> Operations.startOrderStrategy.Output {
        try await startOrderStrategy(Operations.startOrderStrategy.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of OrderStrategyLink type related to OrderStrategy entity
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/deps`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/deps/get(orderStrategyLinkDependents)`.
    public func orderStrategyLinkDependents(
        query: Operations.orderStrategyLinkDependents.Input.Query,
        headers: Operations.orderStrategyLinkDependents.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyLinkDependents.Output {
        try await orderStrategyLinkDependents(Operations.orderStrategyLinkDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of OrderStrategyLink type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/item`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/item/get(orderStrategyLinkItem)`.
    public func orderStrategyLinkItem(
        query: Operations.orderStrategyLinkItem.Input.Query,
        headers: Operations.orderStrategyLinkItem.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyLinkItem.Output {
        try await orderStrategyLinkItem(Operations.orderStrategyLinkItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of OrderStrategyLink type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/items`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/items/get(orderStrategyLinkItems)`.
    public func orderStrategyLinkItems(
        query: Operations.orderStrategyLinkItems.Input.Query,
        headers: Operations.orderStrategyLinkItems.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyLinkItems.Output {
        try await orderStrategyLinkItems(Operations.orderStrategyLinkItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of OrderStrategyLink type related to multiple entities of OrderStrategy type
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/ldeps`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/ldeps/get(orderStrategyLinkLDependents)`.
    public func orderStrategyLinkLDependents(
        query: Operations.orderStrategyLinkLDependents.Input.Query,
        headers: Operations.orderStrategyLinkLDependents.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyLinkLDependents.Output {
        try await orderStrategyLinkLDependents(Operations.orderStrategyLinkLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of OrderStrategyLink type
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/list`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/list/get(orderStrategyLinkList)`.
    public func orderStrategyLinkList(headers: Operations.orderStrategyLinkList.Input.Headers = .init()) async throws -> Operations.orderStrategyLinkList.Output {
        try await orderStrategyLinkList(Operations.orderStrategyLinkList.Input(headers: headers))
    }
    /// Retrieves all entities of OrderVersion type related to Order entity
    ///
    /// - Remark: HTTP `GET /orderVersion/deps`.
    /// - Remark: Generated from `#/paths//orderVersion/deps/get(orderVersionDependents)`.
    public func orderVersionDependents(
        query: Operations.orderVersionDependents.Input.Query,
        headers: Operations.orderVersionDependents.Input.Headers = .init()
    ) async throws -> Operations.orderVersionDependents.Output {
        try await orderVersionDependents(Operations.orderVersionDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of OrderVersion type by its id
    ///
    /// - Remark: HTTP `GET /orderVersion/item`.
    /// - Remark: Generated from `#/paths//orderVersion/item/get(orderVersionItem)`.
    public func orderVersionItem(
        query: Operations.orderVersionItem.Input.Query,
        headers: Operations.orderVersionItem.Input.Headers = .init()
    ) async throws -> Operations.orderVersionItem.Output {
        try await orderVersionItem(Operations.orderVersionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of OrderVersion type by its ids
    ///
    /// - Remark: HTTP `GET /orderVersion/items`.
    /// - Remark: Generated from `#/paths//orderVersion/items/get(orderVersionItems)`.
    public func orderVersionItems(
        query: Operations.orderVersionItems.Input.Query,
        headers: Operations.orderVersionItems.Input.Headers = .init()
    ) async throws -> Operations.orderVersionItems.Output {
        try await orderVersionItems(Operations.orderVersionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of OrderVersion type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /orderVersion/ldeps`.
    /// - Remark: Generated from `#/paths//orderVersion/ldeps/get(orderVersionLDependents)`.
    public func orderVersionLDependents(
        query: Operations.orderVersionLDependents.Input.Query,
        headers: Operations.orderVersionLDependents.Input.Headers = .init()
    ) async throws -> Operations.orderVersionLDependents.Output {
        try await orderVersionLDependents(Operations.orderVersionLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of OrderVersion type
    ///
    /// - Remark: HTTP `GET /orderVersion/list`.
    /// - Remark: Generated from `#/paths//orderVersion/list/get(orderVersionList)`.
    public func orderVersionList(headers: Operations.orderVersionList.Input.Headers = .init()) async throws -> Operations.orderVersionList.Output {
        try await orderVersionList(Operations.orderVersionList.Input(headers: headers))
    }
    /// Retrieves all entities of FillPair type related to Position entity
    ///
    /// - Remark: HTTP `GET /fillPair/deps`.
    /// - Remark: Generated from `#/paths//fillPair/deps/get(fillPairDependents)`.
    public func fillPairDependents(
        query: Operations.fillPairDependents.Input.Query,
        headers: Operations.fillPairDependents.Input.Headers = .init()
    ) async throws -> Operations.fillPairDependents.Output {
        try await fillPairDependents(Operations.fillPairDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of FillPair type by its id
    ///
    /// - Remark: HTTP `GET /fillPair/item`.
    /// - Remark: Generated from `#/paths//fillPair/item/get(fillPairItem)`.
    public func fillPairItem(
        query: Operations.fillPairItem.Input.Query,
        headers: Operations.fillPairItem.Input.Headers = .init()
    ) async throws -> Operations.fillPairItem.Output {
        try await fillPairItem(Operations.fillPairItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of FillPair type by its ids
    ///
    /// - Remark: HTTP `GET /fillPair/items`.
    /// - Remark: Generated from `#/paths//fillPair/items/get(fillPairItems)`.
    public func fillPairItems(
        query: Operations.fillPairItems.Input.Query,
        headers: Operations.fillPairItems.Input.Headers = .init()
    ) async throws -> Operations.fillPairItems.Output {
        try await fillPairItems(Operations.fillPairItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of FillPair type related to multiple entities of Position type
    ///
    /// - Remark: HTTP `GET /fillPair/ldeps`.
    /// - Remark: Generated from `#/paths//fillPair/ldeps/get(fillPairLDependents)`.
    public func fillPairLDependents(
        query: Operations.fillPairLDependents.Input.Query,
        headers: Operations.fillPairLDependents.Input.Headers = .init()
    ) async throws -> Operations.fillPairLDependents.Output {
        try await fillPairLDependents(Operations.fillPairLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of FillPair type
    ///
    /// - Remark: HTTP `GET /fillPair/list`.
    /// - Remark: Generated from `#/paths//fillPair/list/get(fillPairList)`.
    public func fillPairList(headers: Operations.fillPairList.Input.Headers = .init()) async throws -> Operations.fillPairList.Output {
        try await fillPairList(Operations.fillPairList.Input(headers: headers))
    }
    /// Retrieves all entities of Position type related to Account entity
    ///
    /// - Remark: HTTP `GET /position/deps`.
    /// - Remark: Generated from `#/paths//position/deps/get(positionDependents)`.
    public func positionDependents(
        query: Operations.positionDependents.Input.Query,
        headers: Operations.positionDependents.Input.Headers = .init()
    ) async throws -> Operations.positionDependents.Output {
        try await positionDependents(Operations.positionDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Position type by its name
    ///
    /// - Remark: HTTP `GET /position/find`.
    /// - Remark: Generated from `#/paths//position/find/get(positionFind)`.
    public func positionFind(
        query: Operations.positionFind.Input.Query,
        headers: Operations.positionFind.Input.Headers = .init()
    ) async throws -> Operations.positionFind.Output {
        try await positionFind(Operations.positionFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Position type by its id
    ///
    /// - Remark: HTTP `GET /position/item`.
    /// - Remark: Generated from `#/paths//position/item/get(positionItem)`.
    public func positionItem(
        query: Operations.positionItem.Input.Query,
        headers: Operations.positionItem.Input.Headers = .init()
    ) async throws -> Operations.positionItem.Output {
        try await positionItem(Operations.positionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Position type by its ids
    ///
    /// - Remark: HTTP `GET /position/items`.
    /// - Remark: Generated from `#/paths//position/items/get(positionItems)`.
    public func positionItems(
        query: Operations.positionItems.Input.Query,
        headers: Operations.positionItems.Input.Headers = .init()
    ) async throws -> Operations.positionItems.Output {
        try await positionItems(Operations.positionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Position type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /position/ldeps`.
    /// - Remark: Generated from `#/paths//position/ldeps/get(positionLDependents)`.
    public func positionLDependents(
        query: Operations.positionLDependents.Input.Query,
        headers: Operations.positionLDependents.Input.Headers = .init()
    ) async throws -> Operations.positionLDependents.Output {
        try await positionLDependents(Operations.positionLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Position type
    ///
    /// - Remark: HTTP `GET /position/list`.
    /// - Remark: Generated from `#/paths//position/list/get(positionList)`.
    public func positionList(headers: Operations.positionList.Input.Headers = .init()) async throws -> Operations.positionList.Output {
        try await positionList(Operations.positionList.Input(headers: headers))
    }
    /// Retrieves all entities of Account type related to User entity
    ///
    /// - Remark: HTTP `GET /account/deps`.
    /// - Remark: Generated from `#/paths//account/deps/get(accountDependents)`.
    public func accountDependents(
        query: Operations.accountDependents.Input.Query,
        headers: Operations.accountDependents.Input.Headers = .init()
    ) async throws -> Operations.accountDependents.Output {
        try await accountDependents(Operations.accountDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Account type by its name
    ///
    /// - Remark: HTTP `GET /account/find`.
    /// - Remark: Generated from `#/paths//account/find/get(accountFind)`.
    public func accountFind(
        query: Operations.accountFind.Input.Query,
        headers: Operations.accountFind.Input.Headers = .init()
    ) async throws -> Operations.accountFind.Output {
        try await accountFind(Operations.accountFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Account type by its id
    ///
    /// - Remark: HTTP `GET /account/item`.
    /// - Remark: Generated from `#/paths//account/item/get(accountItem)`.
    public func accountItem(
        query: Operations.accountItem.Input.Query,
        headers: Operations.accountItem.Input.Headers = .init()
    ) async throws -> Operations.accountItem.Output {
        try await accountItem(Operations.accountItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Account type by its ids
    ///
    /// - Remark: HTTP `GET /account/items`.
    /// - Remark: Generated from `#/paths//account/items/get(accountItems)`.
    public func accountItems(
        query: Operations.accountItems.Input.Query,
        headers: Operations.accountItems.Input.Headers = .init()
    ) async throws -> Operations.accountItems.Output {
        try await accountItems(Operations.accountItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Account type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /account/ldeps`.
    /// - Remark: Generated from `#/paths//account/ldeps/get(accountLDependents)`.
    public func accountLDependents(
        query: Operations.accountLDependents.Input.Query,
        headers: Operations.accountLDependents.Input.Headers = .init()
    ) async throws -> Operations.accountLDependents.Output {
        try await accountLDependents(Operations.accountLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Account type
    ///
    /// - Remark: HTTP `GET /account/list`.
    /// - Remark: Generated from `#/paths//account/list/get(accountList)`.
    public func accountList(headers: Operations.accountList.Input.Headers = .init()) async throws -> Operations.accountList.Output {
        try await accountList(Operations.accountList.Input(headers: headers))
    }
    /// ### Reset a demo account's state to a previous day
    /// Return 1 or more simulation accounts to their state at market open on the given TradeDate date. 
    ///
    /// - Remark: HTTP `POST /account/resetdemoaccountstate`.
    /// - Remark: Generated from `#/paths//account/resetdemoaccountstate/post(resetDemoAccountState)`.
    public func resetDemoAccountState(
        headers: Operations.resetDemoAccountState.Input.Headers = .init(),
        body: Operations.resetDemoAccountState.Input.Body
    ) async throws -> Operations.resetDemoAccountState.Output {
        try await resetDemoAccountState(Operations.resetDemoAccountState.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves entities of Account type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /account/suggest`.
    /// - Remark: Generated from `#/paths//account/suggest/get(accountSuggest)`.
    public func accountSuggest(
        query: Operations.accountSuggest.Input.Query,
        headers: Operations.accountSuggest.Input.Headers = .init()
    ) async throws -> Operations.accountSuggest.Output {
        try await accountSuggest(Operations.accountSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CashBalance type related to Account entity
    ///
    /// - Remark: HTTP `GET /cashBalance/deps`.
    /// - Remark: Generated from `#/paths//cashBalance/deps/get(cashBalanceDependents)`.
    public func cashBalanceDependents(
        query: Operations.cashBalanceDependents.Input.Query,
        headers: Operations.cashBalanceDependents.Input.Headers = .init()
    ) async throws -> Operations.cashBalanceDependents.Output {
        try await cashBalanceDependents(Operations.cashBalanceDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Get a snapshot of an account's current cash balance.
    /// > *Note*: Using this endpoint many times in succession is an anti-pattern. If you need to check a `cashBalance` in real-time, instead use a WebSocket connected to the standard Tradovate WebSocket URL and initialize a real-time user data subscription via the `user/syncrequest` endpoint.
    ///
    /// - Remark: HTTP `POST /cashBalance/getcashbalancesnapshot`.
    /// - Remark: Generated from `#/paths//cashBalance/getcashbalancesnapshot/post(getCashBalanceSnapshot)`.
    public func getCashBalanceSnapshot(
        headers: Operations.getCashBalanceSnapshot.Input.Headers = .init(),
        body: Operations.getCashBalanceSnapshot.Input.Body
    ) async throws -> Operations.getCashBalanceSnapshot.Output {
        try await getCashBalanceSnapshot(Operations.getCashBalanceSnapshot.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an entity of CashBalance type by its id
    ///
    /// - Remark: HTTP `GET /cashBalance/item`.
    /// - Remark: Generated from `#/paths//cashBalance/item/get(cashBalanceItem)`.
    public func cashBalanceItem(
        query: Operations.cashBalanceItem.Input.Query,
        headers: Operations.cashBalanceItem.Input.Headers = .init()
    ) async throws -> Operations.cashBalanceItem.Output {
        try await cashBalanceItem(Operations.cashBalanceItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of CashBalance type by its ids
    ///
    /// - Remark: HTTP `GET /cashBalance/items`.
    /// - Remark: Generated from `#/paths//cashBalance/items/get(cashBalanceItems)`.
    public func cashBalanceItems(
        query: Operations.cashBalanceItems.Input.Query,
        headers: Operations.cashBalanceItems.Input.Headers = .init()
    ) async throws -> Operations.cashBalanceItems.Output {
        try await cashBalanceItems(Operations.cashBalanceItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CashBalance type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /cashBalance/ldeps`.
    /// - Remark: Generated from `#/paths//cashBalance/ldeps/get(cashBalanceLDependents)`.
    public func cashBalanceLDependents(
        query: Operations.cashBalanceLDependents.Input.Query,
        headers: Operations.cashBalanceLDependents.Input.Headers = .init()
    ) async throws -> Operations.cashBalanceLDependents.Output {
        try await cashBalanceLDependents(Operations.cashBalanceLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CashBalance type
    ///
    /// - Remark: HTTP `GET /cashBalance/list`.
    /// - Remark: Generated from `#/paths//cashBalance/list/get(cashBalanceList)`.
    public func cashBalanceList(headers: Operations.cashBalanceList.Input.Headers = .init()) async throws -> Operations.cashBalanceList.Output {
        try await cashBalanceList(Operations.cashBalanceList.Input(headers: headers))
    }
    /// Retrieves all entities of CashBalanceLog type related to Account entity
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/deps`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/deps/get(cashBalanceLogDependents)`.
    public func cashBalanceLogDependents(
        query: Operations.cashBalanceLogDependents.Input.Query,
        headers: Operations.cashBalanceLogDependents.Input.Headers = .init()
    ) async throws -> Operations.cashBalanceLogDependents.Output {
        try await cashBalanceLogDependents(Operations.cashBalanceLogDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of CashBalanceLog type by its id
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/item`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/item/get(cashBalanceLogItem)`.
    public func cashBalanceLogItem(
        query: Operations.cashBalanceLogItem.Input.Query,
        headers: Operations.cashBalanceLogItem.Input.Headers = .init()
    ) async throws -> Operations.cashBalanceLogItem.Output {
        try await cashBalanceLogItem(Operations.cashBalanceLogItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of CashBalanceLog type by its ids
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/items`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/items/get(cashBalanceLogItems)`.
    public func cashBalanceLogItems(
        query: Operations.cashBalanceLogItems.Input.Query,
        headers: Operations.cashBalanceLogItems.Input.Headers = .init()
    ) async throws -> Operations.cashBalanceLogItems.Output {
        try await cashBalanceLogItems(Operations.cashBalanceLogItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of CashBalanceLog type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/ldeps`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/ldeps/get(cashBalanceLogLDependents)`.
    public func cashBalanceLogLDependents(
        query: Operations.cashBalanceLogLDependents.Input.Query,
        headers: Operations.cashBalanceLogLDependents.Input.Headers = .init()
    ) async throws -> Operations.cashBalanceLogLDependents.Output {
        try await cashBalanceLogLDependents(Operations.cashBalanceLogLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of MarginSnapshot type related to Account entity
    ///
    /// - Remark: HTTP `GET /marginSnapshot/deps`.
    /// - Remark: Generated from `#/paths//marginSnapshot/deps/get(marginSnapshotDependents)`.
    public func marginSnapshotDependents(
        query: Operations.marginSnapshotDependents.Input.Query,
        headers: Operations.marginSnapshotDependents.Input.Headers = .init()
    ) async throws -> Operations.marginSnapshotDependents.Output {
        try await marginSnapshotDependents(Operations.marginSnapshotDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of MarginSnapshot type by its id
    ///
    /// - Remark: HTTP `GET /marginSnapshot/item`.
    /// - Remark: Generated from `#/paths//marginSnapshot/item/get(marginSnapshotItem)`.
    public func marginSnapshotItem(
        query: Operations.marginSnapshotItem.Input.Query,
        headers: Operations.marginSnapshotItem.Input.Headers = .init()
    ) async throws -> Operations.marginSnapshotItem.Output {
        try await marginSnapshotItem(Operations.marginSnapshotItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of MarginSnapshot type by its ids
    ///
    /// - Remark: HTTP `GET /marginSnapshot/items`.
    /// - Remark: Generated from `#/paths//marginSnapshot/items/get(marginSnapshotItems)`.
    public func marginSnapshotItems(
        query: Operations.marginSnapshotItems.Input.Query,
        headers: Operations.marginSnapshotItems.Input.Headers = .init()
    ) async throws -> Operations.marginSnapshotItems.Output {
        try await marginSnapshotItems(Operations.marginSnapshotItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of MarginSnapshot type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /marginSnapshot/ldeps`.
    /// - Remark: Generated from `#/paths//marginSnapshot/ldeps/get(marginSnapshotLDependents)`.
    public func marginSnapshotLDependents(
        query: Operations.marginSnapshotLDependents.Input.Query,
        headers: Operations.marginSnapshotLDependents.Input.Headers = .init()
    ) async throws -> Operations.marginSnapshotLDependents.Output {
        try await marginSnapshotLDependents(Operations.marginSnapshotLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of MarginSnapshot type
    ///
    /// - Remark: HTTP `GET /marginSnapshot/list`.
    /// - Remark: Generated from `#/paths//marginSnapshot/list/get(marginSnapshotList)`.
    public func marginSnapshotList(headers: Operations.marginSnapshotList.Input.Headers = .init()) async throws -> Operations.marginSnapshotList.Output {
        try await marginSnapshotList(Operations.marginSnapshotList.Input(headers: headers))
    }
    /// Retrieves all entities of TradingPermission type related to User entity
    ///
    /// - Remark: HTTP `GET /tradingPermission/deps`.
    /// - Remark: Generated from `#/paths//tradingPermission/deps/get(tradingPermissionDependents)`.
    public func tradingPermissionDependents(
        query: Operations.tradingPermissionDependents.Input.Query,
        headers: Operations.tradingPermissionDependents.Input.Headers = .init()
    ) async throws -> Operations.tradingPermissionDependents.Output {
        try await tradingPermissionDependents(Operations.tradingPermissionDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of TradingPermission type by its id
    ///
    /// - Remark: HTTP `GET /tradingPermission/item`.
    /// - Remark: Generated from `#/paths//tradingPermission/item/get(tradingPermissionItem)`.
    public func tradingPermissionItem(
        query: Operations.tradingPermissionItem.Input.Query,
        headers: Operations.tradingPermissionItem.Input.Headers = .init()
    ) async throws -> Operations.tradingPermissionItem.Output {
        try await tradingPermissionItem(Operations.tradingPermissionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of TradingPermission type by its ids
    ///
    /// - Remark: HTTP `GET /tradingPermission/items`.
    /// - Remark: Generated from `#/paths//tradingPermission/items/get(tradingPermissionItems)`.
    public func tradingPermissionItems(
        query: Operations.tradingPermissionItems.Input.Query,
        headers: Operations.tradingPermissionItems.Input.Headers = .init()
    ) async throws -> Operations.tradingPermissionItems.Output {
        try await tradingPermissionItems(Operations.tradingPermissionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of TradingPermission type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /tradingPermission/ldeps`.
    /// - Remark: Generated from `#/paths//tradingPermission/ldeps/get(tradingPermissionLDependents)`.
    public func tradingPermissionLDependents(
        query: Operations.tradingPermissionLDependents.Input.Query,
        headers: Operations.tradingPermissionLDependents.Input.Headers = .init()
    ) async throws -> Operations.tradingPermissionLDependents.Output {
        try await tradingPermissionLDependents(Operations.tradingPermissionLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of TradingPermission type
    ///
    /// - Remark: HTTP `GET /tradingPermission/list`.
    /// - Remark: Generated from `#/paths//tradingPermission/list/get(tradingPermissionList)`.
    public func tradingPermissionList(headers: Operations.tradingPermissionList.Input.Headers = .init()) async throws -> Operations.tradingPermissionList.Output {
        try await tradingPermissionList(Operations.tradingPermissionList.Input(headers: headers))
    }
    /// Retrieves all entities of AccountRiskStatus type related to Account entity
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/deps`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/deps/get(accountRiskStatusDependents)`.
    public func accountRiskStatusDependents(
        query: Operations.accountRiskStatusDependents.Input.Query,
        headers: Operations.accountRiskStatusDependents.Input.Headers = .init()
    ) async throws -> Operations.accountRiskStatusDependents.Output {
        try await accountRiskStatusDependents(Operations.accountRiskStatusDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of AccountRiskStatus type by its id
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/item`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/item/get(accountRiskStatusItem)`.
    public func accountRiskStatusItem(
        query: Operations.accountRiskStatusItem.Input.Query,
        headers: Operations.accountRiskStatusItem.Input.Headers = .init()
    ) async throws -> Operations.accountRiskStatusItem.Output {
        try await accountRiskStatusItem(Operations.accountRiskStatusItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of AccountRiskStatus type by its ids
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/items`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/items/get(accountRiskStatusItems)`.
    public func accountRiskStatusItems(
        query: Operations.accountRiskStatusItems.Input.Query,
        headers: Operations.accountRiskStatusItems.Input.Headers = .init()
    ) async throws -> Operations.accountRiskStatusItems.Output {
        try await accountRiskStatusItems(Operations.accountRiskStatusItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of AccountRiskStatus type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/ldeps`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/ldeps/get(accountRiskStatusLDependents)`.
    public func accountRiskStatusLDependents(
        query: Operations.accountRiskStatusLDependents.Input.Query,
        headers: Operations.accountRiskStatusLDependents.Input.Headers = .init()
    ) async throws -> Operations.accountRiskStatusLDependents.Output {
        try await accountRiskStatusLDependents(Operations.accountRiskStatusLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of AccountRiskStatus type
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/list`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/list/get(accountRiskStatusList)`.
    public func accountRiskStatusList(headers: Operations.accountRiskStatusList.Input.Headers = .init()) async throws -> Operations.accountRiskStatusList.Output {
        try await accountRiskStatusList(Operations.accountRiskStatusList.Input(headers: headers))
    }
    /// Retrieves all entities of ContractMargin type related to Contract entity
    ///
    /// - Remark: HTTP `GET /contractMargin/deps`.
    /// - Remark: Generated from `#/paths//contractMargin/deps/get(contractMarginDependents)`.
    public func contractMarginDependents(
        query: Operations.contractMarginDependents.Input.Query,
        headers: Operations.contractMarginDependents.Input.Headers = .init()
    ) async throws -> Operations.contractMarginDependents.Output {
        try await contractMarginDependents(Operations.contractMarginDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ContractMargin type by its id
    ///
    /// - Remark: HTTP `GET /contractMargin/item`.
    /// - Remark: Generated from `#/paths//contractMargin/item/get(contractMarginItem)`.
    public func contractMarginItem(
        query: Operations.contractMarginItem.Input.Query,
        headers: Operations.contractMarginItem.Input.Headers = .init()
    ) async throws -> Operations.contractMarginItem.Output {
        try await contractMarginItem(Operations.contractMarginItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ContractMargin type by its ids
    ///
    /// - Remark: HTTP `GET /contractMargin/items`.
    /// - Remark: Generated from `#/paths//contractMargin/items/get(contractMarginItems)`.
    public func contractMarginItems(
        query: Operations.contractMarginItems.Input.Query,
        headers: Operations.contractMarginItems.Input.Headers = .init()
    ) async throws -> Operations.contractMarginItems.Output {
        try await contractMarginItems(Operations.contractMarginItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ContractMargin type related to multiple entities of Contract type
    ///
    /// - Remark: HTTP `GET /contractMargin/ldeps`.
    /// - Remark: Generated from `#/paths//contractMargin/ldeps/get(contractMarginLDependents)`.
    public func contractMarginLDependents(
        query: Operations.contractMarginLDependents.Input.Query,
        headers: Operations.contractMarginLDependents.Input.Headers = .init()
    ) async throws -> Operations.contractMarginLDependents.Output {
        try await contractMarginLDependents(Operations.contractMarginLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ProductMargin type related to Product entity
    ///
    /// - Remark: HTTP `GET /productMargin/deps`.
    /// - Remark: Generated from `#/paths//productMargin/deps/get(productMarginDependents)`.
    public func productMarginDependents(
        query: Operations.productMarginDependents.Input.Query,
        headers: Operations.productMarginDependents.Input.Headers = .init()
    ) async throws -> Operations.productMarginDependents.Output {
        try await productMarginDependents(Operations.productMarginDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ProductMargin type by its id
    ///
    /// - Remark: HTTP `GET /productMargin/item`.
    /// - Remark: Generated from `#/paths//productMargin/item/get(productMarginItem)`.
    public func productMarginItem(
        query: Operations.productMarginItem.Input.Query,
        headers: Operations.productMarginItem.Input.Headers = .init()
    ) async throws -> Operations.productMarginItem.Output {
        try await productMarginItem(Operations.productMarginItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ProductMargin type by its ids
    ///
    /// - Remark: HTTP `GET /productMargin/items`.
    /// - Remark: Generated from `#/paths//productMargin/items/get(productMarginItems)`.
    public func productMarginItems(
        query: Operations.productMarginItems.Input.Query,
        headers: Operations.productMarginItems.Input.Headers = .init()
    ) async throws -> Operations.productMarginItems.Output {
        try await productMarginItems(Operations.productMarginItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ProductMargin type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /productMargin/ldeps`.
    /// - Remark: Generated from `#/paths//productMargin/ldeps/get(productMarginLDependents)`.
    public func productMarginLDependents(
        query: Operations.productMarginLDependents.Input.Query,
        headers: Operations.productMarginLDependents.Input.Headers = .init()
    ) async throws -> Operations.productMarginLDependents.Output {
        try await productMarginLDependents(Operations.productMarginLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ProductMargin type
    ///
    /// - Remark: HTTP `GET /productMargin/list`.
    /// - Remark: Generated from `#/paths//productMargin/list/get(productMarginList)`.
    public func productMarginList(headers: Operations.productMarginList.Input.Headers = .init()) async throws -> Operations.productMarginList.Output {
        try await productMarginList(Operations.productMarginList.Input(headers: headers))
    }
    /// Creates a new entity of UserAccountAutoLiq
    ///
    /// - Remark: HTTP `POST /userAccountAutoLiq/create`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/create/post(userAccountAutoLiqCreate)`.
    public func userAccountAutoLiqCreate(
        headers: Operations.userAccountAutoLiqCreate.Input.Headers = .init(),
        body: Operations.userAccountAutoLiqCreate.Input.Body
    ) async throws -> Operations.userAccountAutoLiqCreate.Output {
        try await userAccountAutoLiqCreate(Operations.userAccountAutoLiqCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of UserAccountAutoLiq type related to Account entity
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/deps`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/deps/get(userAccountAutoLiqDependents)`.
    public func userAccountAutoLiqDependents(
        query: Operations.userAccountAutoLiqDependents.Input.Query,
        headers: Operations.userAccountAutoLiqDependents.Input.Headers = .init()
    ) async throws -> Operations.userAccountAutoLiqDependents.Output {
        try await userAccountAutoLiqDependents(Operations.userAccountAutoLiqDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of UserAccountAutoLiq type by its id
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/item`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/item/get(userAccountAutoLiqItem)`.
    public func userAccountAutoLiqItem(
        query: Operations.userAccountAutoLiqItem.Input.Query,
        headers: Operations.userAccountAutoLiqItem.Input.Headers = .init()
    ) async throws -> Operations.userAccountAutoLiqItem.Output {
        try await userAccountAutoLiqItem(Operations.userAccountAutoLiqItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of UserAccountAutoLiq type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/items`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/items/get(userAccountAutoLiqItems)`.
    public func userAccountAutoLiqItems(
        query: Operations.userAccountAutoLiqItems.Input.Query,
        headers: Operations.userAccountAutoLiqItems.Input.Headers = .init()
    ) async throws -> Operations.userAccountAutoLiqItems.Output {
        try await userAccountAutoLiqItems(Operations.userAccountAutoLiqItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/ldeps/get(userAccountAutoLiqLDependents)`.
    public func userAccountAutoLiqLDependents(
        query: Operations.userAccountAutoLiqLDependents.Input.Query,
        headers: Operations.userAccountAutoLiqLDependents.Input.Headers = .init()
    ) async throws -> Operations.userAccountAutoLiqLDependents.Output {
        try await userAccountAutoLiqLDependents(Operations.userAccountAutoLiqLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserAccountAutoLiq type
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/list`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/list/get(userAccountAutoLiqList)`.
    public func userAccountAutoLiqList(headers: Operations.userAccountAutoLiqList.Input.Headers = .init()) async throws -> Operations.userAccountAutoLiqList.Output {
        try await userAccountAutoLiqList(Operations.userAccountAutoLiqList.Input(headers: headers))
    }
    /// Updates an existing entity of UserAccountAutoLiq
    ///
    /// - Remark: HTTP `POST /userAccountAutoLiq/update`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/update/post(userAccountAutoLiqUpdate)`.
    public func userAccountAutoLiqUpdate(
        headers: Operations.userAccountAutoLiqUpdate.Input.Headers = .init(),
        body: Operations.userAccountAutoLiqUpdate.Input.Body
    ) async throws -> Operations.userAccountAutoLiqUpdate.Output {
        try await userAccountAutoLiqUpdate(Operations.userAccountAutoLiqUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a new entity of UserAccountPositionLimit
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/create`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/create/post(userAccountPositionLimitCreate)`.
    public func userAccountPositionLimitCreate(
        headers: Operations.userAccountPositionLimitCreate.Input.Headers = .init(),
        body: Operations.userAccountPositionLimitCreate.Input.Body
    ) async throws -> Operations.userAccountPositionLimitCreate.Output {
        try await userAccountPositionLimitCreate(Operations.userAccountPositionLimitCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Remove an account position limit for a user.
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/deleteuseraccountpositionlimit`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deleteuseraccountpositionlimit/post(deleteUserAccountPositionLimit)`.
    public func deleteUserAccountPositionLimit(
        headers: Operations.deleteUserAccountPositionLimit.Input.Headers = .init(),
        body: Operations.deleteUserAccountPositionLimit.Input.Body
    ) async throws -> Operations.deleteUserAccountPositionLimit.Output {
        try await deleteUserAccountPositionLimit(Operations.deleteUserAccountPositionLimit.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Remove a Risk Setting parameter.
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/deleteuseraccountriskparameter`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deleteuseraccountriskparameter/post(deleteUserAccountRiskParameter)`.
    public func deleteUserAccountRiskParameter(
        headers: Operations.deleteUserAccountRiskParameter.Input.Headers = .init(),
        body: Operations.deleteUserAccountRiskParameter.Input.Body
    ) async throws -> Operations.deleteUserAccountRiskParameter.Output {
        try await deleteUserAccountRiskParameter(Operations.deleteUserAccountRiskParameter.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of UserAccountPositionLimit type related to Account entity
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/deps`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deps/get(userAccountPositionLimitDependents)`.
    public func userAccountPositionLimitDependents(
        query: Operations.userAccountPositionLimitDependents.Input.Query,
        headers: Operations.userAccountPositionLimitDependents.Input.Headers = .init()
    ) async throws -> Operations.userAccountPositionLimitDependents.Output {
        try await userAccountPositionLimitDependents(Operations.userAccountPositionLimitDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of UserAccountPositionLimit type by its id
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/item`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/item/get(userAccountPositionLimitItem)`.
    public func userAccountPositionLimitItem(
        query: Operations.userAccountPositionLimitItem.Input.Query,
        headers: Operations.userAccountPositionLimitItem.Input.Headers = .init()
    ) async throws -> Operations.userAccountPositionLimitItem.Output {
        try await userAccountPositionLimitItem(Operations.userAccountPositionLimitItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of UserAccountPositionLimit type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/items`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/items/get(userAccountPositionLimitItems)`.
    public func userAccountPositionLimitItems(
        query: Operations.userAccountPositionLimitItems.Input.Query,
        headers: Operations.userAccountPositionLimitItems.Input.Headers = .init()
    ) async throws -> Operations.userAccountPositionLimitItems.Output {
        try await userAccountPositionLimitItems(Operations.userAccountPositionLimitItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/ldeps/get(userAccountPositionLimitLDependents)`.
    public func userAccountPositionLimitLDependents(
        query: Operations.userAccountPositionLimitLDependents.Input.Query,
        headers: Operations.userAccountPositionLimitLDependents.Input.Headers = .init()
    ) async throws -> Operations.userAccountPositionLimitLDependents.Output {
        try await userAccountPositionLimitLDependents(Operations.userAccountPositionLimitLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Updates an existing entity of UserAccountPositionLimit
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/update`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/update/post(userAccountPositionLimitUpdate)`.
    public func userAccountPositionLimitUpdate(
        headers: Operations.userAccountPositionLimitUpdate.Input.Headers = .init(),
        body: Operations.userAccountPositionLimitUpdate.Input.Body
    ) async throws -> Operations.userAccountPositionLimitUpdate.Output {
        try await userAccountPositionLimitUpdate(Operations.userAccountPositionLimitUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a new entity of UserAccountRiskParameter
    ///
    /// - Remark: HTTP `POST /userAccountRiskParameter/create`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/create/post(userAccountRiskParameterCreate)`.
    public func userAccountRiskParameterCreate(
        headers: Operations.userAccountRiskParameterCreate.Input.Headers = .init(),
        body: Operations.userAccountRiskParameterCreate.Input.Body
    ) async throws -> Operations.userAccountRiskParameterCreate.Output {
        try await userAccountRiskParameterCreate(Operations.userAccountRiskParameterCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/deps`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/deps/get(userAccountRiskParameterDependents)`.
    public func userAccountRiskParameterDependents(
        query: Operations.userAccountRiskParameterDependents.Input.Query,
        headers: Operations.userAccountRiskParameterDependents.Input.Headers = .init()
    ) async throws -> Operations.userAccountRiskParameterDependents.Output {
        try await userAccountRiskParameterDependents(Operations.userAccountRiskParameterDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of UserAccountRiskParameter type by its id
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/item`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/item/get(userAccountRiskParameterItem)`.
    public func userAccountRiskParameterItem(
        query: Operations.userAccountRiskParameterItem.Input.Query,
        headers: Operations.userAccountRiskParameterItem.Input.Headers = .init()
    ) async throws -> Operations.userAccountRiskParameterItem.Output {
        try await userAccountRiskParameterItem(Operations.userAccountRiskParameterItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of UserAccountRiskParameter type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/items`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/items/get(userAccountRiskParameterItems)`.
    public func userAccountRiskParameterItems(
        query: Operations.userAccountRiskParameterItems.Input.Query,
        headers: Operations.userAccountRiskParameterItems.Input.Headers = .init()
    ) async throws -> Operations.userAccountRiskParameterItems.Output {
        try await userAccountRiskParameterItems(Operations.userAccountRiskParameterItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/ldeps/get(userAccountRiskParameterLDependents)`.
    public func userAccountRiskParameterLDependents(
        query: Operations.userAccountRiskParameterLDependents.Input.Query,
        headers: Operations.userAccountRiskParameterLDependents.Input.Headers = .init()
    ) async throws -> Operations.userAccountRiskParameterLDependents.Output {
        try await userAccountRiskParameterLDependents(Operations.userAccountRiskParameterLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Updates an existing entity of UserAccountRiskParameter
    ///
    /// - Remark: HTTP `POST /userAccountRiskParameter/update`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/update/post(userAccountRiskParameterUpdate)`.
    public func userAccountRiskParameterUpdate(
        headers: Operations.userAccountRiskParameterUpdate.Input.Headers = .init(),
        body: Operations.userAccountRiskParameterUpdate.Input.Body
    ) async throws -> Operations.userAccountRiskParameterUpdate.Output {
        try await userAccountRiskParameterUpdate(Operations.userAccountRiskParameterUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an entity of MarketDataSubscriptionExchangeScope type by its name
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/find`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/find/get(marketDataSubscriptionExchangeScopeFind)`.
    public func marketDataSubscriptionExchangeScopeFind(
        query: Operations.marketDataSubscriptionExchangeScopeFind.Input.Query,
        headers: Operations.marketDataSubscriptionExchangeScopeFind.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionExchangeScopeFind.Output {
        try await marketDataSubscriptionExchangeScopeFind(Operations.marketDataSubscriptionExchangeScopeFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of MarketDataSubscriptionExchangeScope type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/item/get(marketDataSubscriptionExchangeScopeItem)`.
    public func marketDataSubscriptionExchangeScopeItem(
        query: Operations.marketDataSubscriptionExchangeScopeItem.Input.Query,
        headers: Operations.marketDataSubscriptionExchangeScopeItem.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionExchangeScopeItem.Output {
        try await marketDataSubscriptionExchangeScopeItem(Operations.marketDataSubscriptionExchangeScopeItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of MarketDataSubscriptionExchangeScope type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/items/get(marketDataSubscriptionExchangeScopeItems)`.
    public func marketDataSubscriptionExchangeScopeItems(
        query: Operations.marketDataSubscriptionExchangeScopeItems.Input.Query,
        headers: Operations.marketDataSubscriptionExchangeScopeItems.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionExchangeScopeItems.Output {
        try await marketDataSubscriptionExchangeScopeItems(Operations.marketDataSubscriptionExchangeScopeItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of MarketDataSubscriptionExchangeScope type
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/list/get(marketDataSubscriptionExchangeScopeList)`.
    public func marketDataSubscriptionExchangeScopeList(headers: Operations.marketDataSubscriptionExchangeScopeList.Input.Headers = .init()) async throws -> Operations.marketDataSubscriptionExchangeScopeList.Output {
        try await marketDataSubscriptionExchangeScopeList(Operations.marketDataSubscriptionExchangeScopeList.Input(headers: headers))
    }
    /// Retrieves entities of MarketDataSubscriptionExchangeScope type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/suggest`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/suggest/get(marketDataSubscriptionExchangeScopeSuggest)`.
    public func marketDataSubscriptionExchangeScopeSuggest(
        query: Operations.marketDataSubscriptionExchangeScopeSuggest.Input.Query,
        headers: Operations.marketDataSubscriptionExchangeScopeSuggest.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionExchangeScopeSuggest.Output {
        try await marketDataSubscriptionExchangeScopeSuggest(Operations.marketDataSubscriptionExchangeScopeSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of MarketDataSubscriptionPlan type by its name
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/find`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/find/get(marketDataSubscriptionPlanFind)`.
    public func marketDataSubscriptionPlanFind(
        query: Operations.marketDataSubscriptionPlanFind.Input.Query,
        headers: Operations.marketDataSubscriptionPlanFind.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionPlanFind.Output {
        try await marketDataSubscriptionPlanFind(Operations.marketDataSubscriptionPlanFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of MarketDataSubscriptionPlan type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/item/get(marketDataSubscriptionPlanItem)`.
    public func marketDataSubscriptionPlanItem(
        query: Operations.marketDataSubscriptionPlanItem.Input.Query,
        headers: Operations.marketDataSubscriptionPlanItem.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionPlanItem.Output {
        try await marketDataSubscriptionPlanItem(Operations.marketDataSubscriptionPlanItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of MarketDataSubscriptionPlan type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/items/get(marketDataSubscriptionPlanItems)`.
    public func marketDataSubscriptionPlanItems(
        query: Operations.marketDataSubscriptionPlanItems.Input.Query,
        headers: Operations.marketDataSubscriptionPlanItems.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionPlanItems.Output {
        try await marketDataSubscriptionPlanItems(Operations.marketDataSubscriptionPlanItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of MarketDataSubscriptionPlan type
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/list/get(marketDataSubscriptionPlanList)`.
    public func marketDataSubscriptionPlanList(headers: Operations.marketDataSubscriptionPlanList.Input.Headers = .init()) async throws -> Operations.marketDataSubscriptionPlanList.Output {
        try await marketDataSubscriptionPlanList(Operations.marketDataSubscriptionPlanList.Input(headers: headers))
    }
    /// Retrieves entities of MarketDataSubscriptionPlan type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/suggest`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/suggest/get(marketDataSubscriptionPlanSuggest)`.
    public func marketDataSubscriptionPlanSuggest(
        query: Operations.marketDataSubscriptionPlanSuggest.Input.Query,
        headers: Operations.marketDataSubscriptionPlanSuggest.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionPlanSuggest.Output {
        try await marketDataSubscriptionPlanSuggest(Operations.marketDataSubscriptionPlanSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of TradovateSubscriptionPlan type by its name
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/find`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/find/get(tradovateSubscriptionPlanFind)`.
    public func tradovateSubscriptionPlanFind(
        query: Operations.tradovateSubscriptionPlanFind.Input.Query,
        headers: Operations.tradovateSubscriptionPlanFind.Input.Headers = .init()
    ) async throws -> Operations.tradovateSubscriptionPlanFind.Output {
        try await tradovateSubscriptionPlanFind(Operations.tradovateSubscriptionPlanFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of TradovateSubscriptionPlan type by its id
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/item`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/item/get(tradovateSubscriptionPlanItem)`.
    public func tradovateSubscriptionPlanItem(
        query: Operations.tradovateSubscriptionPlanItem.Input.Query,
        headers: Operations.tradovateSubscriptionPlanItem.Input.Headers = .init()
    ) async throws -> Operations.tradovateSubscriptionPlanItem.Output {
        try await tradovateSubscriptionPlanItem(Operations.tradovateSubscriptionPlanItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of TradovateSubscriptionPlan type by its ids
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/items`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/items/get(tradovateSubscriptionPlanItems)`.
    public func tradovateSubscriptionPlanItems(
        query: Operations.tradovateSubscriptionPlanItems.Input.Query,
        headers: Operations.tradovateSubscriptionPlanItems.Input.Headers = .init()
    ) async throws -> Operations.tradovateSubscriptionPlanItems.Output {
        try await tradovateSubscriptionPlanItems(Operations.tradovateSubscriptionPlanItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of TradovateSubscriptionPlan type
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/list`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/list/get(tradovateSubscriptionPlanList)`.
    public func tradovateSubscriptionPlanList(headers: Operations.tradovateSubscriptionPlanList.Input.Headers = .init()) async throws -> Operations.tradovateSubscriptionPlanList.Output {
        try await tradovateSubscriptionPlanList(Operations.tradovateSubscriptionPlanList.Input(headers: headers))
    }
    /// Retrieves entities of TradovateSubscriptionPlan type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/suggest`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/suggest/get(tradovateSubscriptionPlanSuggest)`.
    public func tradovateSubscriptionPlanSuggest(
        query: Operations.tradovateSubscriptionPlanSuggest.Input.Query,
        headers: Operations.tradovateSubscriptionPlanSuggest.Input.Headers = .init()
    ) async throws -> Operations.tradovateSubscriptionPlanSuggest.Output {
        try await tradovateSubscriptionPlanSuggest(Operations.tradovateSubscriptionPlanSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Change the playback speed of a Market Replay session.
    ///
    /// - Remark: HTTP `POST /replay/changespeed`.
    /// - Remark: Generated from `#/paths//replay/changespeed/post(changeSpeed)`.
    public func changeSpeed(
        headers: Operations.changeSpeed.Input.Headers = .init(),
        body: Operations.changeSpeed.Input.Body
    ) async throws -> Operations.changeSpeed.Output {
        try await changeSpeed(Operations.changeSpeed.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user's entitlements.
    /// You should use this endpoint from a WebSocket hooked up to the Market Replay URL.
    ///
    /// ```js
    ///
    /// const URL = 'wss://replay.tradovateapi.com/v1/websocket'
    ///
    /// const myMarketReplaySocket = new WebSocket(URL)
    ///
    /// //simple WebSocket authorization procedure
    /// myMarketReplaySocket.onopen = function() {
    ///     myMarketReplaySocket.send(`authorize\n0\n\n${accessToken}`)
    /// })
    ///
    /// //JSON string for midnight April 30th 2018
    /// const startTimestamp = new Date('2018-04-30').toJSON()
    /// myMarketReplaySocket.send(`replay/checkreplaysession\n1\n\n${JSON.stringify({startTimestamp})}`)
    ///
    /// //listen for response
    /// myMarketReplaySocket.addEventListener('message', msg => {
    ///     const datas = JSON.parse(msg.data.slice(1)) //chop off leading 'frame' char
    ///     //datas looks like this [{s: 200, i: 1, d: { checkStatus: 'OK' } }]
    ///     if(datas) {
    ///         datas.forEach(({i, d}) => {
    ///             if(i && i === 1)  { //id of our sent message is 1, response's `i` field will be 1.
    ///                 console.log(d) //=> { checkStatus: 'OK' }
    ///                 //if the status is OK we can send the initializeClock message
    ///             }
    ///         })
    ///     } 
    /// }
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /replay/checkreplaysession`.
    /// - Remark: Generated from `#/paths//replay/checkreplaysession/post(checkReplaySession)`.
    public func checkReplaySession(
        headers: Operations.checkReplaySession.Input.Headers = .init(),
        body: Operations.checkReplaySession.Input.Body
    ) async throws -> Operations.checkReplaySession.Output {
        try await checkReplaySession(Operations.checkReplaySession.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Set the inital date and time for a market replay session.
    /// Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session.
    /// ```js
    ///
    /// const URL = 'wss://replay.tradovateapi.com/v1/websocket'
    ///
    /// const myMarketReplaySocket = new WebSocket(URL)
    ///
    /// //simple WebSocket authorization procedure
    /// myMarketReplaySocket.onOpen = function onOpen() {
    ///     myMarketReplaySocket.send(`authorize\n0\n\n${accessToken}`)
    /// })
    ///
    /// const requestBody = {
    ///     startTimestamp: new Date('2018-04-30').toJSON(),
    ///     speed: 100, //100%, range is from 0-400%
    ///     initialBalance: 50000 //account balance for replay session
    /// }
    ///
    /// myMarketReplaySocket.send(`replay/initializeclock\n1\n\n${JSON.stringify(requestBody)}`)
    ///
    /// myMarketReplaySocket.addEventListener('message', msg => {
    ///     const datas = JSON.parse(msg.data.slice(1))
    ///     if(datas) {
    ///         datas.forEach(({i, d}) => {
    ///             if(i && i === 1) { //sent id is 1, response id will be 1
    ///                 console.log(d) //=> { ok: true }
    ///             }
    ///         })
    ///     }
    /// })
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /replay/initializeclock`.
    /// - Remark: Generated from `#/paths//replay/initializeclock/post(initializeClock)`.
    public func initializeClock(
        headers: Operations.initializeClock.Input.Headers = .init(),
        body: Operations.initializeClock.Input.Body
    ) async throws -> Operations.initializeClock.Output {
        try await initializeClock(Operations.initializeClock.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Silences an "incomplete" notification. 
    /// An "Incomplete" notification is one that has not yet been viewed by a user. Once a user has interacted with a notification it should be "completed".
    ///
    /// - Remark: HTTP `POST /adminAlertSignal/completealertsignal`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/completealertsignal/post(completeAlertSignal)`.
    public func completeAlertSignal(
        headers: Operations.completeAlertSignal.Input.Headers = .init(),
        body: Operations.completeAlertSignal.Input.Body
    ) async throws -> Operations.completeAlertSignal.Output {
        try await completeAlertSignal(Operations.completeAlertSignal.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/deps`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/deps/get(adminAlertSignalDependents)`.
    public func adminAlertSignalDependents(
        query: Operations.adminAlertSignalDependents.Input.Query,
        headers: Operations.adminAlertSignalDependents.Input.Headers = .init()
    ) async throws -> Operations.adminAlertSignalDependents.Output {
        try await adminAlertSignalDependents(Operations.adminAlertSignalDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of AdminAlertSignal type by its id
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/item`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/item/get(adminAlertSignalItem)`.
    public func adminAlertSignalItem(
        query: Operations.adminAlertSignalItem.Input.Query,
        headers: Operations.adminAlertSignalItem.Input.Headers = .init()
    ) async throws -> Operations.adminAlertSignalItem.Output {
        try await adminAlertSignalItem(Operations.adminAlertSignalItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of AdminAlertSignal type by its ids
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/items`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/items/get(adminAlertSignalItems)`.
    public func adminAlertSignalItems(
        query: Operations.adminAlertSignalItems.Input.Query,
        headers: Operations.adminAlertSignalItems.Input.Headers = .init()
    ) async throws -> Operations.adminAlertSignalItems.Output {
        try await adminAlertSignalItems(Operations.adminAlertSignalItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/ldeps`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/ldeps/get(adminAlertSignalLDependents)`.
    public func adminAlertSignalLDependents(
        query: Operations.adminAlertSignalLDependents.Input.Query,
        headers: Operations.adminAlertSignalLDependents.Input.Headers = .init()
    ) async throws -> Operations.adminAlertSignalLDependents.Output {
        try await adminAlertSignalLDependents(Operations.adminAlertSignalLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of AdminAlertSignal type
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/list`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/list/get(adminAlertSignalList)`.
    public func adminAlertSignalList(headers: Operations.adminAlertSignalList.Input.Headers = .init()) async throws -> Operations.adminAlertSignalList.Output {
        try await adminAlertSignalList(Operations.adminAlertSignalList.Input(headers: headers))
    }
    /// ### Internal. Can be used by B2B partners to mark an adminAlertSignal entity for further handling.
    ///
    /// - Remark: HTTP `POST /adminAlertSignal/takealertsignalownership`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/takealertsignalownership/post(takeAlertSignalOwnership)`.
    public func takeAlertSignalOwnership(
        headers: Operations.takeAlertSignalOwnership.Input.Headers = .init(),
        body: Operations.takeAlertSignalOwnership.Input.Body
    ) async throws -> Operations.takeAlertSignalOwnership.Output {
        try await takeAlertSignalOwnership(Operations.takeAlertSignalOwnership.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Create an alert entity associated with the user.
    ///
    ///
    /// - Remark: HTTP `POST /alert/createalert`.
    /// - Remark: Generated from `#/paths//alert/createalert/post(createAlert)`.
    public func createAlert(
        headers: Operations.createAlert.Input.Headers = .init(),
        body: Operations.createAlert.Input.Body
    ) async throws -> Operations.createAlert.Output {
        try await createAlert(Operations.createAlert.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Remove an alert entity associated with the user.
    ///
    /// - Remark: HTTP `POST /alert/deletealert`.
    /// - Remark: Generated from `#/paths//alert/deletealert/post(deleteAlert)`.
    public func deleteAlert(
        headers: Operations.deleteAlert.Input.Headers = .init(),
        body: Operations.deleteAlert.Input.Body
    ) async throws -> Operations.deleteAlert.Output {
        try await deleteAlert(Operations.deleteAlert.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of Alert type related to User entity
    ///
    /// - Remark: HTTP `GET /alert/deps`.
    /// - Remark: Generated from `#/paths//alert/deps/get(alertDependents)`.
    public func alertDependents(
        query: Operations.alertDependents.Input.Query,
        headers: Operations.alertDependents.Input.Headers = .init()
    ) async throws -> Operations.alertDependents.Output {
        try await alertDependents(Operations.alertDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Dismiss an alert for a user.
    ///
    /// - Remark: HTTP `POST /alert/dismissalert`.
    /// - Remark: Generated from `#/paths//alert/dismissalert/post(dismissAlert)`.
    public func dismissAlert(
        headers: Operations.dismissAlert.Input.Headers = .init(),
        body: Operations.dismissAlert.Input.Body
    ) async throws -> Operations.dismissAlert.Output {
        try await dismissAlert(Operations.dismissAlert.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an entity of Alert type by its id
    ///
    /// - Remark: HTTP `GET /alert/item`.
    /// - Remark: Generated from `#/paths//alert/item/get(alertItem)`.
    public func alertItem(
        query: Operations.alertItem.Input.Query,
        headers: Operations.alertItem.Input.Headers = .init()
    ) async throws -> Operations.alertItem.Output {
        try await alertItem(Operations.alertItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Alert type by its ids
    ///
    /// - Remark: HTTP `GET /alert/items`.
    /// - Remark: Generated from `#/paths//alert/items/get(alertItems)`.
    public func alertItems(
        query: Operations.alertItems.Input.Query,
        headers: Operations.alertItems.Input.Headers = .init()
    ) async throws -> Operations.alertItems.Output {
        try await alertItems(Operations.alertItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Alert type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /alert/ldeps`.
    /// - Remark: Generated from `#/paths//alert/ldeps/get(alertLDependents)`.
    public func alertLDependents(
        query: Operations.alertLDependents.Input.Query,
        headers: Operations.alertLDependents.Input.Headers = .init()
    ) async throws -> Operations.alertLDependents.Output {
        try await alertLDependents(Operations.alertLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Alert type
    ///
    /// - Remark: HTTP `GET /alert/list`.
    /// - Remark: Generated from `#/paths//alert/list/get(alertList)`.
    public func alertList(headers: Operations.alertList.Input.Headers = .init()) async throws -> Operations.alertList.Output {
        try await alertList(Operations.alertList.Input(headers: headers))
    }
    /// ### Mark an alert entity as 'read' for a user.
    ///
    /// - Remark: HTTP `POST /alert/markreadalertsignal`.
    /// - Remark: Generated from `#/paths//alert/markreadalertsignal/post(markReadAlertSignal)`.
    public func markReadAlertSignal(
        headers: Operations.markReadAlertSignal.Input.Headers = .init(),
        body: Operations.markReadAlertSignal.Input.Body
    ) async throws -> Operations.markReadAlertSignal.Output {
        try await markReadAlertSignal(Operations.markReadAlertSignal.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Change the parameters of an existing alert.
    ///
    /// - Remark: HTTP `POST /alert/modifyalert`.
    /// - Remark: Generated from `#/paths//alert/modifyalert/post(modifyAlert)`.
    public func modifyAlert(
        headers: Operations.modifyAlert.Input.Headers = .init(),
        body: Operations.modifyAlert.Input.Body
    ) async throws -> Operations.modifyAlert.Output {
        try await modifyAlert(Operations.modifyAlert.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Resets an alert. 
    /// You can use this method after an alert has been triggered to keep the alert and wait for the alert to be triggered again.
    ///
    /// - Remark: HTTP `POST /alert/resetalert`.
    /// - Remark: Generated from `#/paths//alert/resetalert/post(resetAlert)`.
    public func resetAlert(
        headers: Operations.resetAlert.Input.Headers = .init(),
        body: Operations.resetAlert.Input.Body
    ) async throws -> Operations.resetAlert.Output {
        try await resetAlert(Operations.resetAlert.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of AlertSignal type related to Alert entity
    ///
    /// - Remark: HTTP `GET /alertSignal/deps`.
    /// - Remark: Generated from `#/paths//alertSignal/deps/get(alertSignalDependents)`.
    public func alertSignalDependents(
        query: Operations.alertSignalDependents.Input.Query,
        headers: Operations.alertSignalDependents.Input.Headers = .init()
    ) async throws -> Operations.alertSignalDependents.Output {
        try await alertSignalDependents(Operations.alertSignalDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of AlertSignal type by its id
    ///
    /// - Remark: HTTP `GET /alertSignal/item`.
    /// - Remark: Generated from `#/paths//alertSignal/item/get(alertSignalItem)`.
    public func alertSignalItem(
        query: Operations.alertSignalItem.Input.Query,
        headers: Operations.alertSignalItem.Input.Headers = .init()
    ) async throws -> Operations.alertSignalItem.Output {
        try await alertSignalItem(Operations.alertSignalItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of AlertSignal type by its ids
    ///
    /// - Remark: HTTP `GET /alertSignal/items`.
    /// - Remark: Generated from `#/paths//alertSignal/items/get(alertSignalItems)`.
    public func alertSignalItems(
        query: Operations.alertSignalItems.Input.Query,
        headers: Operations.alertSignalItems.Input.Headers = .init()
    ) async throws -> Operations.alertSignalItems.Output {
        try await alertSignalItems(Operations.alertSignalItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of AlertSignal type related to multiple entities of Alert type
    ///
    /// - Remark: HTTP `GET /alertSignal/ldeps`.
    /// - Remark: Generated from `#/paths//alertSignal/ldeps/get(alertSignalLDependents)`.
    public func alertSignalLDependents(
        query: Operations.alertSignalLDependents.Input.Query,
        headers: Operations.alertSignalLDependents.Input.Headers = .init()
    ) async throws -> Operations.alertSignalLDependents.Output {
        try await alertSignalLDependents(Operations.alertSignalLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of AlertSignal type
    ///
    /// - Remark: HTTP `GET /alertSignal/list`.
    /// - Remark: Generated from `#/paths//alertSignal/list/get(alertSignalList)`.
    public func alertSignalList(headers: Operations.alertSignalList.Input.Headers = .init()) async throws -> Operations.alertSignalList.Output {
        try await alertSignalList(Operations.alertSignalList.Input(headers: headers))
    }
    /// Retrieves an entity of AdminAlert type by its name
    ///
    /// - Remark: HTTP `GET /adminAlert/find`.
    /// - Remark: Generated from `#/paths//adminAlert/find/get(adminAlertFind)`.
    public func adminAlertFind(
        query: Operations.adminAlertFind.Input.Query,
        headers: Operations.adminAlertFind.Input.Headers = .init()
    ) async throws -> Operations.adminAlertFind.Output {
        try await adminAlertFind(Operations.adminAlertFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of AdminAlert type by its id
    ///
    /// - Remark: HTTP `GET /adminAlert/item`.
    /// - Remark: Generated from `#/paths//adminAlert/item/get(adminAlertItem)`.
    public func adminAlertItem(
        query: Operations.adminAlertItem.Input.Query,
        headers: Operations.adminAlertItem.Input.Headers = .init()
    ) async throws -> Operations.adminAlertItem.Output {
        try await adminAlertItem(Operations.adminAlertItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of AdminAlert type by its ids
    ///
    /// - Remark: HTTP `GET /adminAlert/items`.
    /// - Remark: Generated from `#/paths//adminAlert/items/get(adminAlertItems)`.
    public func adminAlertItems(
        query: Operations.adminAlertItems.Input.Query,
        headers: Operations.adminAlertItems.Input.Headers = .init()
    ) async throws -> Operations.adminAlertItems.Output {
        try await adminAlertItems(Operations.adminAlertItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of AdminAlert type
    ///
    /// - Remark: HTTP `GET /adminAlert/list`.
    /// - Remark: Generated from `#/paths//adminAlert/list/get(adminAlertList)`.
    public func adminAlertList(headers: Operations.adminAlertList.Input.Headers = .init()) async throws -> Operations.adminAlertList.Output {
        try await adminAlertList(Operations.adminAlertList.Input(headers: headers))
    }
    /// Retrieves entities of AdminAlert type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /adminAlert/suggest`.
    /// - Remark: Generated from `#/paths//adminAlert/suggest/get(adminAlertSuggest)`.
    public func adminAlertSuggest(
        query: Operations.adminAlertSuggest.Input.Query,
        headers: Operations.adminAlertSuggest.Input.Headers = .init()
    ) async throws -> Operations.adminAlertSuggest.Output {
        try await adminAlertSuggest(Operations.adminAlertSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ClearingHouse type by its name
    ///
    /// - Remark: HTTP `GET /clearingHouse/find`.
    /// - Remark: Generated from `#/paths//clearingHouse/find/get(clearingHouseFind)`.
    public func clearingHouseFind(
        query: Operations.clearingHouseFind.Input.Query,
        headers: Operations.clearingHouseFind.Input.Headers = .init()
    ) async throws -> Operations.clearingHouseFind.Output {
        try await clearingHouseFind(Operations.clearingHouseFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ClearingHouse type by its id
    ///
    /// - Remark: HTTP `GET /clearingHouse/item`.
    /// - Remark: Generated from `#/paths//clearingHouse/item/get(clearingHouseItem)`.
    public func clearingHouseItem(
        query: Operations.clearingHouseItem.Input.Query,
        headers: Operations.clearingHouseItem.Input.Headers = .init()
    ) async throws -> Operations.clearingHouseItem.Output {
        try await clearingHouseItem(Operations.clearingHouseItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ClearingHouse type by its ids
    ///
    /// - Remark: HTTP `GET /clearingHouse/items`.
    /// - Remark: Generated from `#/paths//clearingHouse/items/get(clearingHouseItems)`.
    public func clearingHouseItems(
        query: Operations.clearingHouseItems.Input.Query,
        headers: Operations.clearingHouseItems.Input.Headers = .init()
    ) async throws -> Operations.clearingHouseItems.Output {
        try await clearingHouseItems(Operations.clearingHouseItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ClearingHouse type
    ///
    /// - Remark: HTTP `GET /clearingHouse/list`.
    /// - Remark: Generated from `#/paths//clearingHouse/list/get(clearingHouseList)`.
    public func clearingHouseList(headers: Operations.clearingHouseList.Input.Headers = .init()) async throws -> Operations.clearingHouseList.Output {
        try await clearingHouseList(Operations.clearingHouseList.Input(headers: headers))
    }
    /// Retrieves entities of ClearingHouse type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /clearingHouse/suggest`.
    /// - Remark: Generated from `#/paths//clearingHouse/suggest/get(clearingHouseSuggest)`.
    public func clearingHouseSuggest(
        query: Operations.clearingHouseSuggest.Input.Query,
        headers: Operations.clearingHouseSuggest.Input.Headers = .init()
    ) async throws -> Operations.clearingHouseSuggest.Output {
        try await clearingHouseSuggest(Operations.clearingHouseSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Entitlement type by its id
    ///
    /// - Remark: HTTP `GET /entitlement/item`.
    /// - Remark: Generated from `#/paths//entitlement/item/get(entitlementItem)`.
    public func entitlementItem(
        query: Operations.entitlementItem.Input.Query,
        headers: Operations.entitlementItem.Input.Headers = .init()
    ) async throws -> Operations.entitlementItem.Output {
        try await entitlementItem(Operations.entitlementItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Entitlement type by its ids
    ///
    /// - Remark: HTTP `GET /entitlement/items`.
    /// - Remark: Generated from `#/paths//entitlement/items/get(entitlementItems)`.
    public func entitlementItems(
        query: Operations.entitlementItems.Input.Query,
        headers: Operations.entitlementItems.Input.Headers = .init()
    ) async throws -> Operations.entitlementItems.Output {
        try await entitlementItems(Operations.entitlementItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Entitlement type
    ///
    /// - Remark: HTTP `GET /entitlement/list`.
    /// - Remark: Generated from `#/paths//entitlement/list/get(entitlementList)`.
    public func entitlementList(headers: Operations.entitlementList.Input.Headers = .init()) async throws -> Operations.entitlementList.Output {
        try await entitlementList(Operations.entitlementList.Input(headers: headers))
    }
    /// Retrieves an entity of OrderStrategyType type by its name
    ///
    /// - Remark: HTTP `GET /orderStrategyType/find`.
    /// - Remark: Generated from `#/paths//orderStrategyType/find/get(orderStrategyTypeFind)`.
    public func orderStrategyTypeFind(
        query: Operations.orderStrategyTypeFind.Input.Query,
        headers: Operations.orderStrategyTypeFind.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyTypeFind.Output {
        try await orderStrategyTypeFind(Operations.orderStrategyTypeFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of OrderStrategyType type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategyType/item`.
    /// - Remark: Generated from `#/paths//orderStrategyType/item/get(orderStrategyTypeItem)`.
    public func orderStrategyTypeItem(
        query: Operations.orderStrategyTypeItem.Input.Query,
        headers: Operations.orderStrategyTypeItem.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyTypeItem.Output {
        try await orderStrategyTypeItem(Operations.orderStrategyTypeItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of OrderStrategyType type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategyType/items`.
    /// - Remark: Generated from `#/paths//orderStrategyType/items/get(orderStrategyTypeItems)`.
    public func orderStrategyTypeItems(
        query: Operations.orderStrategyTypeItems.Input.Query,
        headers: Operations.orderStrategyTypeItems.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyTypeItems.Output {
        try await orderStrategyTypeItems(Operations.orderStrategyTypeItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of OrderStrategyType type
    ///
    /// - Remark: HTTP `GET /orderStrategyType/list`.
    /// - Remark: Generated from `#/paths//orderStrategyType/list/get(orderStrategyTypeList)`.
    public func orderStrategyTypeList(headers: Operations.orderStrategyTypeList.Input.Headers = .init()) async throws -> Operations.orderStrategyTypeList.Output {
        try await orderStrategyTypeList(Operations.orderStrategyTypeList.Input(headers: headers))
    }
    /// Retrieves entities of OrderStrategyType type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /orderStrategyType/suggest`.
    /// - Remark: Generated from `#/paths//orderStrategyType/suggest/get(orderStrategyTypeSuggest)`.
    public func orderStrategyTypeSuggest(
        query: Operations.orderStrategyTypeSuggest.Input.Query,
        headers: Operations.orderStrategyTypeSuggest.Input.Headers = .init()
    ) async throws -> Operations.orderStrategyTypeSuggest.Output {
        try await orderStrategyTypeSuggest(Operations.orderStrategyTypeSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Property type by its name
    ///
    /// - Remark: HTTP `GET /property/find`.
    /// - Remark: Generated from `#/paths//property/find/get(propertyFind)`.
    public func propertyFind(
        query: Operations.propertyFind.Input.Query,
        headers: Operations.propertyFind.Input.Headers = .init()
    ) async throws -> Operations.propertyFind.Output {
        try await propertyFind(Operations.propertyFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Property type by its id
    ///
    /// - Remark: HTTP `GET /property/item`.
    /// - Remark: Generated from `#/paths//property/item/get(propertyItem)`.
    public func propertyItem(
        query: Operations.propertyItem.Input.Query,
        headers: Operations.propertyItem.Input.Headers = .init()
    ) async throws -> Operations.propertyItem.Output {
        try await propertyItem(Operations.propertyItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Property type by its ids
    ///
    /// - Remark: HTTP `GET /property/items`.
    /// - Remark: Generated from `#/paths//property/items/get(propertyItems)`.
    public func propertyItems(
        query: Operations.propertyItems.Input.Query,
        headers: Operations.propertyItems.Input.Headers = .init()
    ) async throws -> Operations.propertyItems.Output {
        try await propertyItems(Operations.propertyItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Property type
    ///
    /// - Remark: HTTP `GET /property/list`.
    /// - Remark: Generated from `#/paths//property/list/get(propertyList)`.
    public func propertyList(headers: Operations.propertyList.Input.Headers = .init()) async throws -> Operations.propertyList.Output {
        try await propertyList(Operations.propertyList.Input(headers: headers))
    }
    /// Retrieves entities of Property type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /property/suggest`.
    /// - Remark: Generated from `#/paths//property/suggest/get(propertySuggest)`.
    public func propertySuggest(
        query: Operations.propertySuggest.Input.Query,
        headers: Operations.propertySuggest.Input.Headers = .init()
    ) async throws -> Operations.propertySuggest.Output {
        try await propertySuggest(Operations.propertySuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ContactInfo type related to User entity
    ///
    /// - Remark: HTTP `GET /contactInfo/deps`.
    /// - Remark: Generated from `#/paths//contactInfo/deps/get(contactInfoDependents)`.
    public func contactInfoDependents(
        query: Operations.contactInfoDependents.Input.Query,
        headers: Operations.contactInfoDependents.Input.Headers = .init()
    ) async throws -> Operations.contactInfoDependents.Output {
        try await contactInfoDependents(Operations.contactInfoDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ContactInfo type by its id
    ///
    /// - Remark: HTTP `GET /contactInfo/item`.
    /// - Remark: Generated from `#/paths//contactInfo/item/get(contactInfoItem)`.
    public func contactInfoItem(
        query: Operations.contactInfoItem.Input.Query,
        headers: Operations.contactInfoItem.Input.Headers = .init()
    ) async throws -> Operations.contactInfoItem.Output {
        try await contactInfoItem(Operations.contactInfoItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ContactInfo type by its ids
    ///
    /// - Remark: HTTP `GET /contactInfo/items`.
    /// - Remark: Generated from `#/paths//contactInfo/items/get(contactInfoItems)`.
    public func contactInfoItems(
        query: Operations.contactInfoItems.Input.Query,
        headers: Operations.contactInfoItems.Input.Headers = .init()
    ) async throws -> Operations.contactInfoItems.Output {
        try await contactInfoItems(Operations.contactInfoItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ContactInfo type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /contactInfo/ldeps`.
    /// - Remark: Generated from `#/paths//contactInfo/ldeps/get(contactInfoLDependents)`.
    public func contactInfoLDependents(
        query: Operations.contactInfoLDependents.Input.Query,
        headers: Operations.contactInfoLDependents.Input.Headers = .init()
    ) async throws -> Operations.contactInfoLDependents.Output {
        try await contactInfoLDependents(Operations.contactInfoLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Creates a new entity of MarketDataSubscription
    ///
    /// - Remark: HTTP `POST /marketDataSubscription/create`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/create/post(marketDataSubscriptionCreate)`.
    public func marketDataSubscriptionCreate(
        headers: Operations.marketDataSubscriptionCreate.Input.Headers = .init(),
        body: Operations.marketDataSubscriptionCreate.Input.Body
    ) async throws -> Operations.marketDataSubscriptionCreate.Output {
        try await marketDataSubscriptionCreate(Operations.marketDataSubscriptionCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of MarketDataSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/deps`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/deps/get(marketDataSubscriptionDependents)`.
    public func marketDataSubscriptionDependents(
        query: Operations.marketDataSubscriptionDependents.Input.Query,
        headers: Operations.marketDataSubscriptionDependents.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionDependents.Output {
        try await marketDataSubscriptionDependents(Operations.marketDataSubscriptionDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of MarketDataSubscription type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/item/get(marketDataSubscriptionItem)`.
    public func marketDataSubscriptionItem(
        query: Operations.marketDataSubscriptionItem.Input.Query,
        headers: Operations.marketDataSubscriptionItem.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionItem.Output {
        try await marketDataSubscriptionItem(Operations.marketDataSubscriptionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of MarketDataSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/items/get(marketDataSubscriptionItems)`.
    public func marketDataSubscriptionItems(
        query: Operations.marketDataSubscriptionItems.Input.Query,
        headers: Operations.marketDataSubscriptionItems.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionItems.Output {
        try await marketDataSubscriptionItems(Operations.marketDataSubscriptionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/ldeps/get(marketDataSubscriptionLDependents)`.
    public func marketDataSubscriptionLDependents(
        query: Operations.marketDataSubscriptionLDependents.Input.Query,
        headers: Operations.marketDataSubscriptionLDependents.Input.Headers = .init()
    ) async throws -> Operations.marketDataSubscriptionLDependents.Output {
        try await marketDataSubscriptionLDependents(Operations.marketDataSubscriptionLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of MarketDataSubscription type
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/list/get(marketDataSubscriptionList)`.
    public func marketDataSubscriptionList(headers: Operations.marketDataSubscriptionList.Input.Headers = .init()) async throws -> Operations.marketDataSubscriptionList.Output {
        try await marketDataSubscriptionList(Operations.marketDataSubscriptionList.Input(headers: headers))
    }
    /// Updates an existing entity of MarketDataSubscription
    ///
    /// - Remark: HTTP `POST /marketDataSubscription/update`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/update/post(marketDataSubscriptionUpdate)`.
    public func marketDataSubscriptionUpdate(
        headers: Operations.marketDataSubscriptionUpdate.Input.Headers = .init(),
        body: Operations.marketDataSubscriptionUpdate.Input.Body
    ) async throws -> Operations.marketDataSubscriptionUpdate.Output {
        try await marketDataSubscriptionUpdate(Operations.marketDataSubscriptionUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an entity of Organization type by its name
    ///
    /// - Remark: HTTP `GET /organization/find`.
    /// - Remark: Generated from `#/paths//organization/find/get(organizationFind)`.
    public func organizationFind(
        query: Operations.organizationFind.Input.Query,
        headers: Operations.organizationFind.Input.Headers = .init()
    ) async throws -> Operations.organizationFind.Output {
        try await organizationFind(Operations.organizationFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Organization type by its id
    ///
    /// - Remark: HTTP `GET /organization/item`.
    /// - Remark: Generated from `#/paths//organization/item/get(organizationItem)`.
    public func organizationItem(
        query: Operations.organizationItem.Input.Query,
        headers: Operations.organizationItem.Input.Headers = .init()
    ) async throws -> Operations.organizationItem.Output {
        try await organizationItem(Operations.organizationItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Organization type by its ids
    ///
    /// - Remark: HTTP `GET /organization/items`.
    /// - Remark: Generated from `#/paths//organization/items/get(organizationItems)`.
    public func organizationItems(
        query: Operations.organizationItems.Input.Query,
        headers: Operations.organizationItems.Input.Headers = .init()
    ) async throws -> Operations.organizationItems.Output {
        try await organizationItems(Operations.organizationItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Organization type
    ///
    /// - Remark: HTTP `GET /organization/list`.
    /// - Remark: Generated from `#/paths//organization/list/get(organizationList)`.
    public func organizationList(headers: Operations.organizationList.Input.Headers = .init()) async throws -> Operations.organizationList.Output {
        try await organizationList(Operations.organizationList.Input(headers: headers))
    }
    /// Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /organization/suggest`.
    /// - Remark: Generated from `#/paths//organization/suggest/get(organizationSuggest)`.
    public func organizationSuggest(
        query: Operations.organizationSuggest.Input.Query,
        headers: Operations.organizationSuggest.Input.Headers = .init()
    ) async throws -> Operations.organizationSuggest.Output {
        try await organizationSuggest(Operations.organizationSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of SecondMarketDataSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/deps`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/deps/get(secondMarketDataSubscriptionDependents)`.
    public func secondMarketDataSubscriptionDependents(
        query: Operations.secondMarketDataSubscriptionDependents.Input.Query,
        headers: Operations.secondMarketDataSubscriptionDependents.Input.Headers = .init()
    ) async throws -> Operations.secondMarketDataSubscriptionDependents.Output {
        try await secondMarketDataSubscriptionDependents(Operations.secondMarketDataSubscriptionDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of SecondMarketDataSubscription type by its id
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/item`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/item/get(secondMarketDataSubscriptionItem)`.
    public func secondMarketDataSubscriptionItem(
        query: Operations.secondMarketDataSubscriptionItem.Input.Query,
        headers: Operations.secondMarketDataSubscriptionItem.Input.Headers = .init()
    ) async throws -> Operations.secondMarketDataSubscriptionItem.Output {
        try await secondMarketDataSubscriptionItem(Operations.secondMarketDataSubscriptionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of SecondMarketDataSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/items`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/items/get(secondMarketDataSubscriptionItems)`.
    public func secondMarketDataSubscriptionItems(
        query: Operations.secondMarketDataSubscriptionItems.Input.Query,
        headers: Operations.secondMarketDataSubscriptionItems.Input.Headers = .init()
    ) async throws -> Operations.secondMarketDataSubscriptionItems.Output {
        try await secondMarketDataSubscriptionItems(Operations.secondMarketDataSubscriptionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/ldeps/get(secondMarketDataSubscriptionLDependents)`.
    public func secondMarketDataSubscriptionLDependents(
        query: Operations.secondMarketDataSubscriptionLDependents.Input.Query,
        headers: Operations.secondMarketDataSubscriptionLDependents.Input.Headers = .init()
    ) async throws -> Operations.secondMarketDataSubscriptionLDependents.Output {
        try await secondMarketDataSubscriptionLDependents(Operations.secondMarketDataSubscriptionLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of SecondMarketDataSubscription type
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/list`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/list/get(secondMarketDataSubscriptionList)`.
    public func secondMarketDataSubscriptionList(headers: Operations.secondMarketDataSubscriptionList.Input.Headers = .init()) async throws -> Operations.secondMarketDataSubscriptionList.Output {
        try await secondMarketDataSubscriptionList(Operations.secondMarketDataSubscriptionList.Input(headers: headers))
    }
    /// Creates a new entity of TradovateSubscription
    ///
    /// - Remark: HTTP `POST /tradovateSubscription/create`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/create/post(tradovateSubscriptionCreate)`.
    public func tradovateSubscriptionCreate(
        headers: Operations.tradovateSubscriptionCreate.Input.Headers = .init(),
        body: Operations.tradovateSubscriptionCreate.Input.Body
    ) async throws -> Operations.tradovateSubscriptionCreate.Output {
        try await tradovateSubscriptionCreate(Operations.tradovateSubscriptionCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of TradovateSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/deps`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/deps/get(tradovateSubscriptionDependents)`.
    public func tradovateSubscriptionDependents(
        query: Operations.tradovateSubscriptionDependents.Input.Query,
        headers: Operations.tradovateSubscriptionDependents.Input.Headers = .init()
    ) async throws -> Operations.tradovateSubscriptionDependents.Output {
        try await tradovateSubscriptionDependents(Operations.tradovateSubscriptionDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of TradovateSubscription type by its id
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/item`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/item/get(tradovateSubscriptionItem)`.
    public func tradovateSubscriptionItem(
        query: Operations.tradovateSubscriptionItem.Input.Query,
        headers: Operations.tradovateSubscriptionItem.Input.Headers = .init()
    ) async throws -> Operations.tradovateSubscriptionItem.Output {
        try await tradovateSubscriptionItem(Operations.tradovateSubscriptionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of TradovateSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/items`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/items/get(tradovateSubscriptionItems)`.
    public func tradovateSubscriptionItems(
        query: Operations.tradovateSubscriptionItems.Input.Query,
        headers: Operations.tradovateSubscriptionItems.Input.Headers = .init()
    ) async throws -> Operations.tradovateSubscriptionItems.Output {
        try await tradovateSubscriptionItems(Operations.tradovateSubscriptionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of TradovateSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/ldeps/get(tradovateSubscriptionLDependents)`.
    public func tradovateSubscriptionLDependents(
        query: Operations.tradovateSubscriptionLDependents.Input.Query,
        headers: Operations.tradovateSubscriptionLDependents.Input.Headers = .init()
    ) async throws -> Operations.tradovateSubscriptionLDependents.Output {
        try await tradovateSubscriptionLDependents(Operations.tradovateSubscriptionLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of TradovateSubscription type
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/list`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/list/get(tradovateSubscriptionList)`.
    public func tradovateSubscriptionList(headers: Operations.tradovateSubscriptionList.Input.Headers = .init()) async throws -> Operations.tradovateSubscriptionList.Output {
        try await tradovateSubscriptionList(Operations.tradovateSubscriptionList.Input(headers: headers))
    }
    /// Updates an existing entity of TradovateSubscription
    ///
    /// - Remark: HTTP `POST /tradovateSubscription/update`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/update/post(tradovateSubscriptionUpdate)`.
    public func tradovateSubscriptionUpdate(
        headers: Operations.tradovateSubscriptionUpdate.Input.Headers = .init(),
        body: Operations.tradovateSubscriptionUpdate.Input.Body
    ) async throws -> Operations.tradovateSubscriptionUpdate.Output {
        try await tradovateSubscriptionUpdate(Operations.tradovateSubscriptionUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Called to accept a given trading permission granted by another party.
    ///
    /// - Remark: HTTP `POST /user/accepttradingpermission`.
    /// - Remark: Generated from `#/paths//user/accepttradingpermission/post(acceptTradingPermission)`.
    public func acceptTradingPermission(
        headers: Operations.acceptTradingPermission.Input.Headers = .init(),
        body: Operations.acceptTradingPermission.Input.Body
    ) async throws -> Operations.acceptTradingPermission.Output {
        try await acceptTradingPermission(Operations.acceptTradingPermission.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Used to setup a second market data subscription with active auto-renewal.
    ///
    /// - Remark: HTTP `POST /user/activatesecondmarketdatasubscriptionrenewal`.
    /// - Remark: Generated from `#/paths//user/activatesecondmarketdatasubscriptionrenewal/post(activateSecondMarketDataSubscriptionRenewal)`.
    public func activateSecondMarketDataSubscriptionRenewal(
        headers: Operations.activateSecondMarketDataSubscriptionRenewal.Input.Headers = .init(),
        body: Operations.activateSecondMarketDataSubscriptionRenewal.Input.Body
    ) async throws -> Operations.activateSecondMarketDataSubscriptionRenewal.Output {
        try await activateSecondMarketDataSubscriptionRenewal(Operations.activateSecondMarketDataSubscriptionRenewal.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Add a subscription to Market Data for a user.
    ///
    /// - Remark: HTTP `POST /user/addmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/addmarketdatasubscription/post(addMarketDataSubscription)`.
    public func addMarketDataSubscription(
        headers: Operations.addMarketDataSubscription.Input.Headers = .init(),
        body: Operations.addMarketDataSubscription.Input.Body
    ) async throws -> Operations.addMarketDataSubscription.Output {
        try await addMarketDataSubscription(Operations.addMarketDataSubscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Add a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/addsecondmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/addsecondmarketdatasubscription/post(addSecondMarketDataSubscription)`.
    public func addSecondMarketDataSubscription(
        headers: Operations.addSecondMarketDataSubscription.Input.Headers = .init(),
        body: Operations.addSecondMarketDataSubscription.Input.Body
    ) async throws -> Operations.addSecondMarketDataSubscription.Output {
        try await addSecondMarketDataSubscription(Operations.addSecondMarketDataSubscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Used to add a Tradovate Trader membership plan for a user.
    ///
    /// - Remark: HTTP `POST /user/addtradovatesubscription`.
    /// - Remark: Generated from `#/paths//user/addtradovatesubscription/post(addTradovateSubscription)`.
    public func addTradovateSubscription(
        headers: Operations.addTradovateSubscription.Input.Headers = .init(),
        body: Operations.addTradovateSubscription.Input.Body
    ) async throws -> Operations.addTradovateSubscription.Output {
        try await addTradovateSubscription(Operations.addTradovateSubscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `POST /user/canceleverything`.
    /// - Remark: Generated from `#/paths//user/canceleverything/post(cancelEverything)`.
    public func cancelEverything(
        headers: Operations.cancelEverything.Input.Headers = .init(),
        body: Operations.cancelEverything.Input.Body
    ) async throws -> Operations.cancelEverything.Output {
        try await cancelEverything(Operations.cancelEverything.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Cancel a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/cancelsecondmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/cancelsecondmarketdatasubscription/post(cancelSecondMarketDataSubscription)`.
    public func cancelSecondMarketDataSubscription(
        headers: Operations.cancelSecondMarketDataSubscription.Input.Headers = .init(),
        body: Operations.cancelSecondMarketDataSubscription.Input.Body
    ) async throws -> Operations.cancelSecondMarketDataSubscription.Output {
        try await cancelSecondMarketDataSubscription(Operations.cancelSecondMarketDataSubscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Cancel the auto-renewal for a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/cancelsecondmarketdatasubscriptionrenewal`.
    /// - Remark: Generated from `#/paths//user/cancelsecondmarketdatasubscriptionrenewal/post(cancelSecondMarketDataSubscriptionRenewal)`.
    public func cancelSecondMarketDataSubscriptionRenewal(
        headers: Operations.cancelSecondMarketDataSubscriptionRenewal.Input.Headers = .init(),
        body: Operations.cancelSecondMarketDataSubscriptionRenewal.Input.Body
    ) async throws -> Operations.cancelSecondMarketDataSubscriptionRenewal.Output {
        try await cancelSecondMarketDataSubscriptionRenewal(Operations.cancelSecondMarketDataSubscriptionRenewal.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Cancel a Tradovate Trader membership plan.
    ///
    /// - Remark: HTTP `POST /user/canceltradovatesubscription`.
    /// - Remark: Generated from `#/paths//user/canceltradovatesubscription/post(cancelTradovateSubscription)`.
    public func cancelTradovateSubscription(
        headers: Operations.cancelTradovateSubscription.Input.Headers = .init(),
        body: Operations.cancelTradovateSubscription.Input.Body
    ) async throws -> Operations.cancelTradovateSubscription.Output {
        try await cancelTradovateSubscription(Operations.cancelTradovateSubscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Create a trading permission
    /// Create a new trading permission to account with ID `accountId` via that user's ID, `userId`.
    ///
    /// - Remark: HTTP `POST /user/createtradingpermission`.
    /// - Remark: Generated from `#/paths//user/createtradingpermission/post(createTradingPermission)`.
    public func createTradingPermission(
        headers: Operations.createTradingPermission.Input.Headers = .init(),
        body: Operations.createTradingPermission.Input.Body
    ) async throws -> Operations.createTradingPermission.Output {
        try await createTradingPermission(Operations.createTradingPermission.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an entity of User type by its name
    ///
    /// - Remark: HTTP `GET /user/find`.
    /// - Remark: Generated from `#/paths//user/find/get(userFind)`.
    public func userFind(
        query: Operations.userFind.Input.Query,
        headers: Operations.userFind.Input.Headers = .init()
    ) async throws -> Operations.userFind.Output {
        try await userFind(Operations.userFind.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Query the granted trading permissions associated with this account.
    ///
    /// - Remark: HTTP `POST /user/getaccounttradingpermissions`.
    /// - Remark: Generated from `#/paths//user/getaccounttradingpermissions/post(getAccountTradingPermissions)`.
    public func getAccountTradingPermissions(
        headers: Operations.getAccountTradingPermissions.Input.Headers = .init(),
        body: Operations.getAccountTradingPermissions.Input.Body
    ) async throws -> Operations.getAccountTradingPermissions.Output {
        try await getAccountTradingPermissions(Operations.getAccountTradingPermissions.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Query the current price of a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/getsecondmarketdatasubscriptioncost`.
    /// - Remark: Generated from `#/paths//user/getsecondmarketdatasubscriptioncost/post(getSecondMarketDataSubscriptionCost)`.
    public func getSecondMarketDataSubscriptionCost(
        headers: Operations.getSecondMarketDataSubscriptionCost.Input.Headers = .init(),
        body: Operations.getSecondMarketDataSubscriptionCost.Input.Body
    ) async throws -> Operations.getSecondMarketDataSubscriptionCost.Output {
        try await getSecondMarketDataSubscriptionCost(Operations.getSecondMarketDataSubscriptionCost.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves an entity of User type by its id
    ///
    /// - Remark: HTTP `GET /user/item`.
    /// - Remark: Generated from `#/paths//user/item/get(userItem)`.
    public func userItem(
        query: Operations.userItem.Input.Query,
        headers: Operations.userItem.Input.Headers = .init()
    ) async throws -> Operations.userItem.Output {
        try await userItem(Operations.userItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of User type by its ids
    ///
    /// - Remark: HTTP `GET /user/items`.
    /// - Remark: Generated from `#/paths//user/items/get(userItems)`.
    public func userItems(
        query: Operations.userItems.Input.Query,
        headers: Operations.userItems.Input.Headers = .init()
    ) async throws -> Operations.userItems.Output {
        try await userItems(Operations.userItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of User type
    ///
    /// - Remark: HTTP `GET /user/list`.
    /// - Remark: Generated from `#/paths//user/list/get(userList)`.
    public func userList(headers: Operations.userList.Input.Headers = .init()) async throws -> Operations.userList.Output {
        try await userList(Operations.userList.Input(headers: headers))
    }
    /// ### Used to modify account username and password.
    ///
    /// - Remark: HTTP `POST /user/modifycredentials`.
    /// - Remark: Generated from `#/paths//user/modifycredentials/post(modifyCredentials)`.
    public func modifyCredentials(
        headers: Operations.modifyCredentials.Input.Headers = .init(),
        body: Operations.modifyCredentials.Input.Body
    ) async throws -> Operations.modifyCredentials.Output {
        try await modifyCredentials(Operations.modifyCredentials.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Change account email address information.
    ///
    /// - Remark: HTTP `POST /user/modifyemailaddress`.
    /// - Remark: Generated from `#/paths//user/modifyemailaddress/post(modifyEmailAddress)`.
    public func modifyEmailAddress(
        headers: Operations.modifyEmailAddress.Input.Headers = .init(),
        body: Operations.modifyEmailAddress.Input.Body
    ) async throws -> Operations.modifyEmailAddress.Output {
        try await modifyEmailAddress(Operations.modifyEmailAddress.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Change account password information.
    ///
    /// - Remark: HTTP `POST /user/modifypassword`.
    /// - Remark: Generated from `#/paths//user/modifypassword/post(modifyPassword)`.
    public func modifyPassword(
        headers: Operations.modifyPassword.Input.Headers = .init(),
        body: Operations.modifyPassword.Input.Body
    ) async throws -> Operations.modifyPassword.Output {
        try await modifyPassword(Operations.modifyPassword.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Request to open a Demo account for a user. 
    ///
    /// - Remark: HTTP `POST /user/opendemoaccount`.
    /// - Remark: Generated from `#/paths//user/opendemoaccount/post(openDemoAccount)`.
    public func openDemoAccount(
        headers: Operations.openDemoAccount.Input.Headers = .init(),
        body: Operations.openDemoAccount.Input.Body
    ) async throws -> Operations.openDemoAccount.Output {
        try await openDemoAccount(Operations.openDemoAccount.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Send a request to grant trading permission for your account to another party.
    /// Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party's own accounts.
    ///
    /// - Remark: HTTP `POST /user/requesttradingpermission`.
    /// - Remark: Generated from `#/paths//user/requesttradingpermission/post(requestTradingPermission)`.
    public func requestTradingPermission(
        headers: Operations.requestTradingPermission.Input.Headers = .init(),
        body: Operations.requestTradingPermission.Input.Body
    ) async throws -> Operations.requestTradingPermission.Output {
        try await requestTradingPermission(Operations.requestTradingPermission.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Revoke an existing trading permission granted to another party.
    /// If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
    ///
    /// - Remark: HTTP `POST /user/revoketradingpermission`.
    /// - Remark: Generated from `#/paths//user/revoketradingpermission/post(revokeTradingPermission)`.
    public func revokeTradingPermission(
        headers: Operations.revokeTradingPermission.Input.Headers = .init(),
        body: Operations.revokeTradingPermission.Input.Body
    ) async throws -> Operations.revokeTradingPermission.Output {
        try await revokeTradingPermission(Operations.revokeTradingPermission.Input(
            headers: headers,
            body: body
        ))
    }
    /// - Remark: HTTP `POST /user/revoketradingpermissions`.
    /// - Remark: Generated from `#/paths//user/revoketradingpermissions/post(revokeTradingPermissions)`.
    public func revokeTradingPermissions(
        headers: Operations.revokeTradingPermissions.Input.Headers = .init(),
        body: Operations.revokeTradingPermissions.Input.Body
    ) async throws -> Operations.revokeTradingPermissions.Output {
        try await revokeTradingPermissions(Operations.revokeTradingPermissions.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Used by B2B partners to create users for their own organizations.
    ///
    /// - Remark: HTTP `POST /user/signuporganizationmember`.
    /// - Remark: Generated from `#/paths//user/signuporganizationmember/post(signUpOrganizationMember)`.
    public func signUpOrganizationMember(
        headers: Operations.signUpOrganizationMember.Input.Headers = .init(),
        body: Operations.signUpOrganizationMember.Input.Body
    ) async throws -> Operations.signUpOrganizationMember.Output {
        try await signUpOrganizationMember(Operations.signUpOrganizationMember.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves entities of User type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /user/suggest`.
    /// - Remark: Generated from `#/paths//user/suggest/get(userSuggest)`.
    public func userSuggest(
        query: Operations.userSuggest.Input.Query,
        headers: Operations.userSuggest.Input.Headers = .init()
    ) async throws -> Operations.userSuggest.Output {
        try await userSuggest(Operations.userSuggest.Input(
            query: query,
            headers: headers
        ))
    }
    /// ### Used with WebSocket protocol. Returns all data associated with the user. 
    /// This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.
    ///
    /// ```js
    /// const URL = 'wss://live.tradovateapi.com/v1/websocket'
    ///
    /// const myWebSocket = new WebSocket(URL)
    ///
    /// //authorize websocket with your access token
    /// myWebSocket.onopen = function() {
    ///     myWebSocket.send(`authorize\n0\n\n${accessToken}`)
    /// }
    ///
    /// const requestBody = {
    ///     users: [12345]
    /// }
    ///
    /// myWebSocket.send(`user/syncrequest\n1\n\n${JSON.stringify(requestBody)}`) 
    ///
    /// //starts a subscription to real-time user data.
    /// ```
    ///
    /// - Remark: HTTP `POST /user/syncrequest`.
    /// - Remark: Generated from `#/paths//user/syncrequest/post(syncRequest)`.
    public func syncRequest(
        headers: Operations.syncRequest.Input.Headers = .init(),
        body: Operations.syncRequest.Input.Body
    ) async throws -> Operations.syncRequest.Output {
        try await syncRequest(Operations.syncRequest.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
    ///
    /// - Remark: HTTP `POST /userPlugin/addentitlementsubscription`.
    /// - Remark: Generated from `#/paths//userPlugin/addentitlementsubscription/post(addEntitlementSubscription)`.
    public func addEntitlementSubscription(
        headers: Operations.addEntitlementSubscription.Input.Headers = .init(),
        body: Operations.addEntitlementSubscription.Input.Body
    ) async throws -> Operations.addEntitlementSubscription.Output {
        try await addEntitlementSubscription(Operations.addEntitlementSubscription.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Change the permissions for a Trader plugin.
    ///
    /// - Remark: HTTP `POST /userPlugin/changepluginpermission`.
    /// - Remark: Generated from `#/paths//userPlugin/changepluginpermission/post(changePluginPermission)`.
    public func changePluginPermission(
        headers: Operations.changePluginPermission.Input.Headers = .init(),
        body: Operations.changePluginPermission.Input.Body
    ) async throws -> Operations.changePluginPermission.Output {
        try await changePluginPermission(Operations.changePluginPermission.Input(
            headers: headers,
            body: body
        ))
    }
    /// Creates a new entity of UserPlugin
    ///
    /// - Remark: HTTP `POST /userPlugin/create`.
    /// - Remark: Generated from `#/paths//userPlugin/create/post(userPluginCreate)`.
    public func userPluginCreate(
        headers: Operations.userPluginCreate.Input.Headers = .init(),
        body: Operations.userPluginCreate.Input.Body
    ) async throws -> Operations.userPluginCreate.Output {
        try await userPluginCreate(Operations.userPluginCreate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of UserPlugin type related to User entity
    ///
    /// - Remark: HTTP `GET /userPlugin/deps`.
    /// - Remark: Generated from `#/paths//userPlugin/deps/get(userPluginDependents)`.
    public func userPluginDependents(
        query: Operations.userPluginDependents.Input.Query,
        headers: Operations.userPluginDependents.Input.Headers = .init()
    ) async throws -> Operations.userPluginDependents.Output {
        try await userPluginDependents(Operations.userPluginDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of UserPlugin type by its id
    ///
    /// - Remark: HTTP `GET /userPlugin/item`.
    /// - Remark: Generated from `#/paths//userPlugin/item/get(userPluginItem)`.
    public func userPluginItem(
        query: Operations.userPluginItem.Input.Query,
        headers: Operations.userPluginItem.Input.Headers = .init()
    ) async throws -> Operations.userPluginItem.Output {
        try await userPluginItem(Operations.userPluginItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of UserPlugin type by its ids
    ///
    /// - Remark: HTTP `GET /userPlugin/items`.
    /// - Remark: Generated from `#/paths//userPlugin/items/get(userPluginItems)`.
    public func userPluginItems(
        query: Operations.userPluginItems.Input.Query,
        headers: Operations.userPluginItems.Input.Headers = .init()
    ) async throws -> Operations.userPluginItems.Output {
        try await userPluginItems(Operations.userPluginItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserPlugin type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userPlugin/ldeps`.
    /// - Remark: Generated from `#/paths//userPlugin/ldeps/get(userPluginLDependents)`.
    public func userPluginLDependents(
        query: Operations.userPluginLDependents.Input.Query,
        headers: Operations.userPluginLDependents.Input.Headers = .init()
    ) async throws -> Operations.userPluginLDependents.Output {
        try await userPluginLDependents(Operations.userPluginLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserPlugin type
    ///
    /// - Remark: HTTP `GET /userPlugin/list`.
    /// - Remark: Generated from `#/paths//userPlugin/list/get(userPluginList)`.
    public func userPluginList(headers: Operations.userPluginList.Input.Headers = .init()) async throws -> Operations.userPluginList.Output {
        try await userPluginList(Operations.userPluginList.Input(headers: headers))
    }
    /// Updates an existing entity of UserPlugin
    ///
    /// - Remark: HTTP `POST /userPlugin/update`.
    /// - Remark: Generated from `#/paths//userPlugin/update/post(userPluginUpdate)`.
    public func userPluginUpdate(
        headers: Operations.userPluginUpdate.Input.Headers = .init(),
        body: Operations.userPluginUpdate.Input.Body
    ) async throws -> Operations.userPluginUpdate.Output {
        try await userPluginUpdate(Operations.userPluginUpdate.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of UserProperty type related to User entity
    ///
    /// - Remark: HTTP `GET /userProperty/deps`.
    /// - Remark: Generated from `#/paths//userProperty/deps/get(userPropertyDependents)`.
    public func userPropertyDependents(
        query: Operations.userPropertyDependents.Input.Query,
        headers: Operations.userPropertyDependents.Input.Headers = .init()
    ) async throws -> Operations.userPropertyDependents.Output {
        try await userPropertyDependents(Operations.userPropertyDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of UserProperty type by its id
    ///
    /// - Remark: HTTP `GET /userProperty/item`.
    /// - Remark: Generated from `#/paths//userProperty/item/get(userPropertyItem)`.
    public func userPropertyItem(
        query: Operations.userPropertyItem.Input.Query,
        headers: Operations.userPropertyItem.Input.Headers = .init()
    ) async throws -> Operations.userPropertyItem.Output {
        try await userPropertyItem(Operations.userPropertyItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of UserProperty type by its ids
    ///
    /// - Remark: HTTP `GET /userProperty/items`.
    /// - Remark: Generated from `#/paths//userProperty/items/get(userPropertyItems)`.
    public func userPropertyItems(
        query: Operations.userPropertyItems.Input.Query,
        headers: Operations.userPropertyItems.Input.Headers = .init()
    ) async throws -> Operations.userPropertyItems.Output {
        try await userPropertyItems(Operations.userPropertyItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserProperty type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userProperty/ldeps`.
    /// - Remark: Generated from `#/paths//userProperty/ldeps/get(userPropertyLDependents)`.
    public func userPropertyLDependents(
        query: Operations.userPropertyLDependents.Input.Query,
        headers: Operations.userPropertyLDependents.Input.Headers = .init()
    ) async throws -> Operations.userPropertyLDependents.Output {
        try await userPropertyLDependents(Operations.userPropertyLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of UserSession type by its id
    ///
    /// - Remark: HTTP `GET /userSession/item`.
    /// - Remark: Generated from `#/paths//userSession/item/get(userSessionItem)`.
    public func userSessionItem(
        query: Operations.userSessionItem.Input.Query,
        headers: Operations.userSessionItem.Input.Headers = .init()
    ) async throws -> Operations.userSessionItem.Output {
        try await userSessionItem(Operations.userSessionItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of UserSession type by its ids
    ///
    /// - Remark: HTTP `GET /userSession/items`.
    /// - Remark: Generated from `#/paths//userSession/items/get(userSessionItems)`.
    public func userSessionItems(
        query: Operations.userSessionItems.Input.Query,
        headers: Operations.userSessionItems.Input.Headers = .init()
    ) async throws -> Operations.userSessionItems.Output {
        try await userSessionItems(Operations.userSessionItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserSessionStats type related to User entity
    ///
    /// - Remark: HTTP `GET /userSessionStats/deps`.
    /// - Remark: Generated from `#/paths//userSessionStats/deps/get(userSessionStatsDependents)`.
    public func userSessionStatsDependents(
        query: Operations.userSessionStatsDependents.Input.Query,
        headers: Operations.userSessionStatsDependents.Input.Headers = .init()
    ) async throws -> Operations.userSessionStatsDependents.Output {
        try await userSessionStatsDependents(Operations.userSessionStatsDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of UserSessionStats type by its id
    ///
    /// - Remark: HTTP `GET /userSessionStats/item`.
    /// - Remark: Generated from `#/paths//userSessionStats/item/get(userSessionStatsItem)`.
    public func userSessionStatsItem(
        query: Operations.userSessionStatsItem.Input.Query,
        headers: Operations.userSessionStatsItem.Input.Headers = .init()
    ) async throws -> Operations.userSessionStatsItem.Output {
        try await userSessionStatsItem(Operations.userSessionStatsItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of UserSessionStats type by its ids
    ///
    /// - Remark: HTTP `GET /userSessionStats/items`.
    /// - Remark: Generated from `#/paths//userSessionStats/items/get(userSessionStatsItems)`.
    public func userSessionStatsItems(
        query: Operations.userSessionStatsItems.Input.Query,
        headers: Operations.userSessionStatsItems.Input.Headers = .init()
    ) async throws -> Operations.userSessionStatsItems.Output {
        try await userSessionStatsItems(Operations.userSessionStatsItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserSessionStats type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userSessionStats/ldeps`.
    /// - Remark: Generated from `#/paths//userSessionStats/ldeps/get(userSessionStatsLDependents)`.
    public func userSessionStatsLDependents(
        query: Operations.userSessionStatsLDependents.Input.Query,
        headers: Operations.userSessionStatsLDependents.Input.Headers = .init()
    ) async throws -> Operations.userSessionStatsLDependents.Output {
        try await userSessionStatsLDependents(Operations.userSessionStatsLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of UserSessionStats type
    ///
    /// - Remark: HTTP `GET /userSessionStats/list`.
    /// - Remark: Generated from `#/paths//userSessionStats/list/get(userSessionStatsList)`.
    public func userSessionStatsList(headers: Operations.userSessionStatsList.Input.Headers = .init()) async throws -> Operations.userSessionStatsList.Output {
        try await userSessionStatsList(Operations.userSessionStatsList.Input(headers: headers))
    }
    /// - Remark: HTTP `POST /fundTransaction/checkstripefundingeligibility`.
    /// - Remark: Generated from `#/paths//fundTransaction/checkstripefundingeligibility/post(checkStripeFundingEligibility)`.
    public func checkStripeFundingEligibility(
        headers: Operations.checkStripeFundingEligibility.Input.Headers = .init(),
        body: Operations.checkStripeFundingEligibility.Input.Body
    ) async throws -> Operations.checkStripeFundingEligibility.Output {
        try await checkStripeFundingEligibility(Operations.checkStripeFundingEligibility.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Close the chat context.
    ///
    /// - Remark: HTTP `POST /chat/closechat`.
    /// - Remark: Generated from `#/paths//chat/closechat/post(closeChat)`.
    public func closeChat(
        headers: Operations.closeChat.Input.Headers = .init(),
        body: Operations.closeChat.Input.Body
    ) async throws -> Operations.closeChat.Output {
        try await closeChat(Operations.closeChat.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of Chat type related to User entity
    ///
    /// - Remark: HTTP `GET /chat/deps`.
    /// - Remark: Generated from `#/paths//chat/deps/get(chatDependents)`.
    public func chatDependents(
        query: Operations.chatDependents.Input.Query,
        headers: Operations.chatDependents.Input.Headers = .init()
    ) async throws -> Operations.chatDependents.Output {
        try await chatDependents(Operations.chatDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of Chat type by its id
    ///
    /// - Remark: HTTP `GET /chat/item`.
    /// - Remark: Generated from `#/paths//chat/item/get(chatItem)`.
    public func chatItem(
        query: Operations.chatItem.Input.Query,
        headers: Operations.chatItem.Input.Headers = .init()
    ) async throws -> Operations.chatItem.Output {
        try await chatItem(Operations.chatItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of Chat type by its ids
    ///
    /// - Remark: HTTP `GET /chat/items`.
    /// - Remark: Generated from `#/paths//chat/items/get(chatItems)`.
    public func chatItems(
        query: Operations.chatItems.Input.Query,
        headers: Operations.chatItems.Input.Headers = .init()
    ) async throws -> Operations.chatItems.Output {
        try await chatItems(Operations.chatItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Chat type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /chat/ldeps`.
    /// - Remark: Generated from `#/paths//chat/ldeps/get(chatLDependents)`.
    public func chatLDependents(
        query: Operations.chatLDependents.Input.Query,
        headers: Operations.chatLDependents.Input.Headers = .init()
    ) async throws -> Operations.chatLDependents.Output {
        try await chatLDependents(Operations.chatLDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of Chat type
    ///
    /// - Remark: HTTP `GET /chat/list`.
    /// - Remark: Generated from `#/paths//chat/list/get(chatList)`.
    public func chatList(headers: Operations.chatList.Input.Headers = .init()) async throws -> Operations.chatList.Output {
        try await chatList(Operations.chatList.Input(headers: headers))
    }
    /// ### Marks a chat message as read.
    ///
    /// - Remark: HTTP `POST /chat/markasreadchatmessage`.
    /// - Remark: Generated from `#/paths//chat/markasreadchatmessage/post(markAsReadChatMessage)`.
    public func markAsReadChatMessage(
        headers: Operations.markAsReadChatMessage.Input.Headers = .init(),
        body: Operations.markAsReadChatMessage.Input.Body
    ) async throws -> Operations.markAsReadChatMessage.Output {
        try await markAsReadChatMessage(Operations.markAsReadChatMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// ### Post a chat message to a given chat's history.
    ///
    /// - Remark: HTTP `POST /chat/postchatmessage`.
    /// - Remark: Generated from `#/paths//chat/postchatmessage/post(postChatMessage)`.
    public func postChatMessage(
        headers: Operations.postChatMessage.Input.Headers = .init(),
        body: Operations.postChatMessage.Input.Body
    ) async throws -> Operations.postChatMessage.Output {
        try await postChatMessage(Operations.postChatMessage.Input(
            headers: headers,
            body: body
        ))
    }
    /// Retrieves all entities of ChatMessage type related to Chat entity
    ///
    /// - Remark: HTTP `GET /chatMessage/deps`.
    /// - Remark: Generated from `#/paths//chatMessage/deps/get(chatMessageDependents)`.
    public func chatMessageDependents(
        query: Operations.chatMessageDependents.Input.Query,
        headers: Operations.chatMessageDependents.Input.Headers = .init()
    ) async throws -> Operations.chatMessageDependents.Output {
        try await chatMessageDependents(Operations.chatMessageDependents.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves an entity of ChatMessage type by its id
    ///
    /// - Remark: HTTP `GET /chatMessage/item`.
    /// - Remark: Generated from `#/paths//chatMessage/item/get(chatMessageItem)`.
    public func chatMessageItem(
        query: Operations.chatMessageItem.Input.Query,
        headers: Operations.chatMessageItem.Input.Headers = .init()
    ) async throws -> Operations.chatMessageItem.Output {
        try await chatMessageItem(Operations.chatMessageItem.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves multiple entities of ChatMessage type by its ids
    ///
    /// - Remark: HTTP `GET /chatMessage/items`.
    /// - Remark: Generated from `#/paths//chatMessage/items/get(chatMessageItems)`.
    public func chatMessageItems(
        query: Operations.chatMessageItems.Input.Query,
        headers: Operations.chatMessageItems.Input.Headers = .init()
    ) async throws -> Operations.chatMessageItems.Output {
        try await chatMessageItems(Operations.chatMessageItems.Input(
            query: query,
            headers: headers
        ))
    }
    /// Retrieves all entities of ChatMessage type related to multiple entities of Chat type
    ///
    /// - Remark: HTTP `GET /chatMessage/ldeps`.
    /// - Remark: Generated from `#/paths//chatMessage/ldeps/get(chatMessageLDependents)`.
    public func chatMessageLDependents(
        query: Operations.chatMessageLDependents.Input.Query,
        headers: Operations.chatMessageLDependents.Input.Headers = .init()
    ) async throws -> Operations.chatMessageLDependents.Output {
        try await chatMessageLDependents(Operations.chatMessageLDependents.Input(
            query: query,
            headers: headers
        ))
    }
}

/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(
            validatingOpenAPIServerURL: "https://demo.tradovateapi.com/v1",
            variables: []
        )
    }
}

/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/TradeTime`.
        public struct TradeTime: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TradeTime/hour`.
            public var hour: Swift.Int
            /// - Remark: Generated from `#/components/schemas/TradeTime/minute`.
            public var minute: Swift.Int
            /// Creates a new `TradeTime`.
            ///
            /// - Parameters:
            ///   - hour:
            ///   - minute:
            public init(
                hour: Swift.Int,
                minute: Swift.Int
            ) {
                self.hour = hour
                self.minute = minute
            }
            public enum CodingKeys: String, CodingKey {
                case hour
                case minute
            }
        }
        /// - Remark: Generated from `#/components/schemas/TradeDate`.
        public struct TradeDate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TradeDate/year`.
            public var year: Swift.Int
            /// - Remark: Generated from `#/components/schemas/TradeDate/month`.
            public var month: Swift.Int
            /// - Remark: Generated from `#/components/schemas/TradeDate/day`.
            public var day: Swift.Int
            /// Creates a new `TradeDate`.
            ///
            /// - Parameters:
            ///   - year:
            ///   - month:
            ///   - day:
            public init(
                year: Swift.Int,
                month: Swift.Int,
                day: Swift.Int
            ) {
                self.year = year
                self.month = month
                self.day = day
            }
            public enum CodingKeys: String, CodingKey {
                case year
                case month
                case day
            }
        }
        /// - Remark: Generated from `#/components/schemas/AcceptTradingPermission`.
        public struct AcceptTradingPermission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AcceptTradingPermission/tradingPermissionId`.
            public var tradingPermissionId: Swift.Int64
            /// Creates a new `AcceptTradingPermission`.
            ///
            /// - Parameters:
            ///   - tradingPermissionId:
            public init(tradingPermissionId: Swift.Int64) {
                self.tradingPermissionId = tradingPermissionId
            }
            public enum CodingKeys: String, CodingKey {
                case tradingPermissionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccessTokenRequest`.
        public struct AccessTokenRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccessTokenRequest/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccessTokenRequest/password`.
            public var password: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccessTokenRequest/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessTokenRequest/appVersion`.
            public var appVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessTokenRequest/deviceId`.
            public var deviceId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessTokenRequest/cid`.
            public var cid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessTokenRequest/sec`.
            public var sec: Swift.String?
            /// Creates a new `AccessTokenRequest`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - password:
            ///   - appId:
            ///   - appVersion:
            ///   - deviceId:
            ///   - cid:
            ///   - sec:
            public init(
                name: Swift.String,
                password: Swift.String,
                appId: Swift.String? = nil,
                appVersion: Swift.String? = nil,
                deviceId: Swift.String? = nil,
                cid: Swift.String? = nil,
                sec: Swift.String? = nil
            ) {
                self.name = name
                self.password = password
                self.appId = appId
                self.appVersion = appVersion
                self.deviceId = deviceId
                self.cid = cid
                self.sec = sec
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case password
                case appId
                case appVersion
                case deviceId
                case cid
                case sec
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccessTokenResponse`.
        public struct AccessTokenResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/accessToken`.
            public var accessToken: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/expirationTime`.
            public var expirationTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/passwordExpirationTime`.
            public var passwordExpirationTime: Foundation.Date?
            /// Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/userStatus`.
            @frozen public enum userStatusPayload: String, Codable, Hashable, Sendable {
                case Active = "Active"
                case Closed = "Closed"
                case Initiated = "Initiated"
                case TemporaryLocked = "TemporaryLocked"
                case UnconfirmedEmail = "UnconfirmedEmail"
            }
            /// Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            ///
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/userStatus`.
            public var userStatus: Components.Schemas.AccessTokenResponse.userStatusPayload?
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/userId`.
            public var userId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccessTokenResponse/hasLive`.
            public var hasLive: Swift.Bool?
            /// Creates a new `AccessTokenResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - accessToken:
            ///   - expirationTime:
            ///   - passwordExpirationTime:
            ///   - userStatus: Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            ///   - userId:
            ///   - name:
            ///   - hasLive:
            public init(
                errorText: Swift.String? = nil,
                accessToken: Swift.String? = nil,
                expirationTime: Foundation.Date? = nil,
                passwordExpirationTime: Foundation.Date? = nil,
                userStatus: Components.Schemas.AccessTokenResponse.userStatusPayload? = nil,
                userId: Swift.Int64? = nil,
                name: Swift.String? = nil,
                hasLive: Swift.Bool? = nil
            ) {
                self.errorText = errorText
                self.accessToken = accessToken
                self.expirationTime = expirationTime
                self.passwordExpirationTime = passwordExpirationTime
                self.userStatus = userStatus
                self.userId = userId
                self.name = name
                self.hasLive = hasLive
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case accessToken
                case expirationTime
                case passwordExpirationTime
                case userStatus
                case userId
                case name
                case hasLive
            }
        }
        /// - Remark: Generated from `#/components/schemas/Account`.
        public struct Account: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Account/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Account/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/userId`.
            public var userId: Swift.Int64
            /// Customer, Giveup, House, Omnibus, Wash
            ///
            /// - Remark: Generated from `#/components/schemas/Account/accountType`.
            @frozen public enum accountTypePayload: String, Codable, Hashable, Sendable {
                case Customer = "Customer"
                case Giveup = "Giveup"
                case House = "House"
                case Omnibus = "Omnibus"
                case Wash = "Wash"
            }
            /// Customer, Giveup, House, Omnibus, Wash
            ///
            /// - Remark: Generated from `#/components/schemas/Account/accountType`.
            public var accountType: Components.Schemas.Account.accountTypePayload
            /// - Remark: Generated from `#/components/schemas/Account/active`.
            public var active: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Account/clearingHouseId`.
            public var clearingHouseId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Account/riskCategoryId`.
            public var riskCategoryId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Account/autoLiqProfileId`.
            public var autoLiqProfileId: Swift.Int64
            /// Hedger, Speculator
            ///
            /// - Remark: Generated from `#/components/schemas/Account/marginAccountType`.
            @frozen public enum marginAccountTypePayload: String, Codable, Hashable, Sendable {
                case Hedger = "Hedger"
                case Speculator = "Speculator"
            }
            /// Hedger, Speculator
            ///
            /// - Remark: Generated from `#/components/schemas/Account/marginAccountType`.
            public var marginAccountType: Components.Schemas.Account.marginAccountTypePayload
            /// Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, PTR, Trust
            ///
            /// - Remark: Generated from `#/components/schemas/Account/legalStatus`.
            @frozen public enum legalStatusPayload: String, Codable, Hashable, Sendable {
                case Corporation = "Corporation"
                case GP = "GP"
                case IRA = "IRA"
                case Individual = "Individual"
                case Joint = "Joint"
                case LLC = "LLC"
                case LLP = "LLP"
                case LP = "LP"
                case PTR = "PTR"
                case Trust = "Trust"
            }
            /// Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, PTR, Trust
            ///
            /// - Remark: Generated from `#/components/schemas/Account/legalStatus`.
            public var legalStatus: Components.Schemas.Account.legalStatusPayload
            /// - Remark: Generated from `#/components/schemas/Account/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Account/readonly`.
            public var readonly: Swift.Bool?
            /// Creates a new `Account`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - userId:
            ///   - accountType: Customer, Giveup, House, Omnibus, Wash
            ///   - active:
            ///   - clearingHouseId:
            ///   - riskCategoryId:
            ///   - autoLiqProfileId:
            ///   - marginAccountType: Hedger, Speculator
            ///   - legalStatus: Corporation, GP, IRA, Individual, Joint, LLC, LLP, LP, PTR, Trust
            ///   - timestamp:
            ///   - readonly:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                userId: Swift.Int64,
                accountType: Components.Schemas.Account.accountTypePayload,
                active: Swift.Bool,
                clearingHouseId: Swift.Int64,
                riskCategoryId: Swift.Int64,
                autoLiqProfileId: Swift.Int64,
                marginAccountType: Components.Schemas.Account.marginAccountTypePayload,
                legalStatus: Components.Schemas.Account.legalStatusPayload,
                timestamp: Foundation.Date,
                readonly: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.userId = userId
                self.accountType = accountType
                self.active = active
                self.clearingHouseId = clearingHouseId
                self.riskCategoryId = riskCategoryId
                self.autoLiqProfileId = autoLiqProfileId
                self.marginAccountType = marginAccountType
                self.legalStatus = legalStatus
                self.timestamp = timestamp
                self.readonly = readonly
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case userId
                case accountType
                case active
                case clearingHouseId
                case riskCategoryId
                case autoLiqProfileId
                case marginAccountType
                case legalStatus
                case timestamp
                case readonly
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccountRiskStatus`.
        public struct AccountRiskStatus: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountRiskStatus/id`.
            public var id: Swift.Int64?
            /// AgreedOnLiqOnlyModeByAutoLiq, AgreedOnLiquidationByAutoLiq, DisableAutoLiq, LiquidateImmediately, LiquidateOnlyModeImmediately, LockTradingImmediately, Normal, PlaceAutoLiqOnHold
            ///
            /// - Remark: Generated from `#/components/schemas/AccountRiskStatus/adminAction`.
            @frozen public enum adminActionPayload: String, Codable, Hashable, Sendable {
                case AgreedOnLiqOnlyModeByAutoLiq = "AgreedOnLiqOnlyModeByAutoLiq"
                case AgreedOnLiquidationByAutoLiq = "AgreedOnLiquidationByAutoLiq"
                case DisableAutoLiq = "DisableAutoLiq"
                case LiquidateImmediately = "LiquidateImmediately"
                case LiquidateOnlyModeImmediately = "LiquidateOnlyModeImmediately"
                case LockTradingImmediately = "LockTradingImmediately"
                case Normal = "Normal"
                case PlaceAutoLiqOnHold = "PlaceAutoLiqOnHold"
            }
            /// AgreedOnLiqOnlyModeByAutoLiq, AgreedOnLiquidationByAutoLiq, DisableAutoLiq, LiquidateImmediately, LiquidateOnlyModeImmediately, LockTradingImmediately, Normal, PlaceAutoLiqOnHold
            ///
            /// - Remark: Generated from `#/components/schemas/AccountRiskStatus/adminAction`.
            public var adminAction: Components.Schemas.AccountRiskStatus.adminActionPayload?
            /// - Remark: Generated from `#/components/schemas/AccountRiskStatus/adminTimestamp`.
            public var adminTimestamp: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AccountRiskStatus/liquidateOnly`.
            public var liquidateOnly: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AccountRiskStatus/userTriggeredLiqOnly`.
            public var userTriggeredLiqOnly: Swift.Bool?
            /// Creates a new `AccountRiskStatus`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - adminAction: AgreedOnLiqOnlyModeByAutoLiq, AgreedOnLiquidationByAutoLiq, DisableAutoLiq, LiquidateImmediately, LiquidateOnlyModeImmediately, LockTradingImmediately, Normal, PlaceAutoLiqOnHold
            ///   - adminTimestamp:
            ///   - liquidateOnly:
            ///   - userTriggeredLiqOnly:
            public init(
                id: Swift.Int64? = nil,
                adminAction: Components.Schemas.AccountRiskStatus.adminActionPayload? = nil,
                adminTimestamp: Foundation.Date? = nil,
                liquidateOnly: Foundation.Date? = nil,
                userTriggeredLiqOnly: Swift.Bool? = nil
            ) {
                self.id = id
                self.adminAction = adminAction
                self.adminTimestamp = adminTimestamp
                self.liquidateOnly = liquidateOnly
                self.userTriggeredLiqOnly = userTriggeredLiqOnly
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case adminAction
                case adminTimestamp
                case liquidateOnly
                case userTriggeredLiqOnly
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActivateSecondMarketDataSubscriptionRenewal`.
        public struct ActivateSecondMarketDataSubscriptionRenewal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActivateSecondMarketDataSubscriptionRenewal/secondMarketDataSubscriptionId`.
            public var secondMarketDataSubscriptionId: Swift.Int64
            /// Creates a new `ActivateSecondMarketDataSubscriptionRenewal`.
            ///
            /// - Parameters:
            ///   - secondMarketDataSubscriptionId:
            public init(secondMarketDataSubscriptionId: Swift.Int64) {
                self.secondMarketDataSubscriptionId = secondMarketDataSubscriptionId
            }
            public enum CodingKeys: String, CodingKey {
                case secondMarketDataSubscriptionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AddEntitlementSubscription`.
        public struct AddEntitlementSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddEntitlementSubscription/entitlementId`.
            public var entitlementId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AddEntitlementSubscription/creditCardId`.
            public var creditCardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AddEntitlementSubscription/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AddEntitlementSubscription/userId`.
            public var userId: Swift.Int64?
            /// Creates a new `AddEntitlementSubscription`.
            ///
            /// - Parameters:
            ///   - entitlementId:
            ///   - creditCardId:
            ///   - accountId:
            ///   - userId:
            public init(
                entitlementId: Swift.Int64,
                creditCardId: Swift.Int64? = nil,
                accountId: Swift.Int64? = nil,
                userId: Swift.Int64? = nil
            ) {
                self.entitlementId = entitlementId
                self.creditCardId = creditCardId
                self.accountId = accountId
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case entitlementId
                case creditCardId
                case accountId
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AddMarketDataSubscription`.
        public struct AddMarketDataSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddMarketDataSubscription/marketDataSubscriptionPlanIds`.
            public var marketDataSubscriptionPlanIds: [Swift.Int64]
            /// - Remark: Generated from `#/components/schemas/AddMarketDataSubscription/year`.
            public var year: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/AddMarketDataSubscription/month`.
            public var month: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/AddMarketDataSubscription/creditCardId`.
            public var creditCardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AddMarketDataSubscription/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AddMarketDataSubscription/userId`.
            public var userId: Swift.Int64?
            /// Creates a new `AddMarketDataSubscription`.
            ///
            /// - Parameters:
            ///   - marketDataSubscriptionPlanIds:
            ///   - year:
            ///   - month:
            ///   - creditCardId:
            ///   - accountId:
            ///   - userId:
            public init(
                marketDataSubscriptionPlanIds: [Swift.Int64],
                year: Swift.Int32,
                month: Swift.Int32,
                creditCardId: Swift.Int64? = nil,
                accountId: Swift.Int64? = nil,
                userId: Swift.Int64? = nil
            ) {
                self.marketDataSubscriptionPlanIds = marketDataSubscriptionPlanIds
                self.year = year
                self.month = month
                self.creditCardId = creditCardId
                self.accountId = accountId
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case marketDataSubscriptionPlanIds
                case year
                case month
                case creditCardId
                case accountId
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AddSecondMarketDataSubscription`.
        public struct AddSecondMarketDataSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddSecondMarketDataSubscription/year`.
            public var year: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/AddSecondMarketDataSubscription/month`.
            public var month: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/AddSecondMarketDataSubscription/creditCardId`.
            public var creditCardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AddSecondMarketDataSubscription/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AddSecondMarketDataSubscription/userId`.
            public var userId: Swift.Int64?
            /// Creates a new `AddSecondMarketDataSubscription`.
            ///
            /// - Parameters:
            ///   - year:
            ///   - month:
            ///   - creditCardId:
            ///   - accountId:
            ///   - userId:
            public init(
                year: Swift.Int32,
                month: Swift.Int32,
                creditCardId: Swift.Int64? = nil,
                accountId: Swift.Int64? = nil,
                userId: Swift.Int64? = nil
            ) {
                self.year = year
                self.month = month
                self.creditCardId = creditCardId
                self.accountId = accountId
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case year
                case month
                case creditCardId
                case accountId
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AddTradovateSubscription`.
        public struct AddTradovateSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AddTradovateSubscription/tradovateSubscriptionPlanId`.
            public var tradovateSubscriptionPlanId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AddTradovateSubscription/creditCardId`.
            public var creditCardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AddTradovateSubscription/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AddTradovateSubscription/userId`.
            public var userId: Swift.Int64?
            /// Creates a new `AddTradovateSubscription`.
            ///
            /// - Parameters:
            ///   - tradovateSubscriptionPlanId:
            ///   - creditCardId:
            ///   - accountId:
            ///   - userId:
            public init(
                tradovateSubscriptionPlanId: Swift.Int64,
                creditCardId: Swift.Int64? = nil,
                accountId: Swift.Int64? = nil,
                userId: Swift.Int64? = nil
            ) {
                self.tradovateSubscriptionPlanId = tradovateSubscriptionPlanId
                self.creditCardId = creditCardId
                self.accountId = accountId
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case tradovateSubscriptionPlanId
                case creditCardId
                case accountId
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAlert`.
        public struct AdminAlert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAlert/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AdminAlert/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/AdminAlert/timestamp`.
            public var timestamp: Foundation.Date
            /// Creates a new `AdminAlert`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - timestamp:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                timestamp: Foundation.Date
            ) {
                self.id = id
                self.name = name
                self.timestamp = timestamp
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case timestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAlertSignal`.
        public struct AdminAlertSignal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/adminAlertId`.
            public var adminAlertId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/relatedToAccountId`.
            public var relatedToAccountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/relatedToUserId`.
            public var relatedToUserId: Swift.Int64?
            /// Owned By...
            ///
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/ownedByAdminId`.
            public var ownedByAdminId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/completed`.
            public var completed: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/emailSent`.
            public var emailSent: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignal/subjectId`.
            public var subjectId: Swift.Int64
            /// Creates a new `AdminAlertSignal`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - timestamp:
            ///   - adminAlertId:
            ///   - relatedToAccountId:
            ///   - relatedToUserId:
            ///   - ownedByAdminId: Owned By...
            ///   - completed:
            ///   - text:
            ///   - emailSent:
            ///   - subjectId:
            public init(
                id: Swift.Int64? = nil,
                timestamp: Foundation.Date,
                adminAlertId: Swift.Int64,
                relatedToAccountId: Swift.Int64? = nil,
                relatedToUserId: Swift.Int64? = nil,
                ownedByAdminId: Swift.Int64? = nil,
                completed: Foundation.Date? = nil,
                text: Swift.String,
                emailSent: Swift.Bool,
                subjectId: Swift.Int64
            ) {
                self.id = id
                self.timestamp = timestamp
                self.adminAlertId = adminAlertId
                self.relatedToAccountId = relatedToAccountId
                self.relatedToUserId = relatedToUserId
                self.ownedByAdminId = ownedByAdminId
                self.completed = completed
                self.text = text
                self.emailSent = emailSent
                self.subjectId = subjectId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case timestamp
                case adminAlertId
                case relatedToAccountId
                case relatedToUserId
                case ownedByAdminId
                case completed
                case text
                case emailSent
                case subjectId
            }
        }
        /// - Remark: Generated from `#/components/schemas/AdminAlertSignalResponse`.
        public struct AdminAlertSignalResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignalResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AdminAlertSignalResponse/adminAlertSignal`.
            public var adminAlertSignal: Components.Schemas.AdminAlertSignal?
            /// Creates a new `AdminAlertSignalResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - adminAlertSignal:
            public init(
                errorText: Swift.String? = nil,
                adminAlertSignal: Components.Schemas.AdminAlertSignal? = nil
            ) {
                self.errorText = errorText
                self.adminAlertSignal = adminAlertSignal
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case adminAlertSignal
            }
        }
        /// - Remark: Generated from `#/components/schemas/Alert`.
        public struct Alert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Alert/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Alert/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Alert/userId`.
            public var userId: Swift.Int64
            /// Active, Expired, Failed, Inactive, TriggeredOut
            ///
            /// - Remark: Generated from `#/components/schemas/Alert/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case Active = "Active"
                case Expired = "Expired"
                case Failed = "Failed"
                case Inactive = "Inactive"
                case TriggeredOut = "TriggeredOut"
            }
            /// Active, Expired, Failed, Inactive, TriggeredOut
            ///
            /// - Remark: Generated from `#/components/schemas/Alert/status`.
            public var status: Components.Schemas.Alert.statusPayload
            /// - Remark: Generated from `#/components/schemas/Alert/expression`.
            public var expression: Swift.String
            /// - Remark: Generated from `#/components/schemas/Alert/validUntil`.
            public var validUntil: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Alert/triggerLimits`.
            public var triggerLimits: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/Alert/triggeredCounter`.
            public var triggeredCounter: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/Alert/failure`.
            public var failure: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Alert/message`.
            public var message: Swift.String?
            /// Creates a new `Alert`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - timestamp:
            ///   - userId:
            ///   - status: Active, Expired, Failed, Inactive, TriggeredOut
            ///   - expression:
            ///   - validUntil:
            ///   - triggerLimits:
            ///   - triggeredCounter:
            ///   - failure:
            ///   - message:
            public init(
                id: Swift.Int64? = nil,
                timestamp: Foundation.Date,
                userId: Swift.Int64,
                status: Components.Schemas.Alert.statusPayload,
                expression: Swift.String,
                validUntil: Foundation.Date? = nil,
                triggerLimits: Swift.Int32? = nil,
                triggeredCounter: Swift.Int32? = nil,
                failure: Swift.String? = nil,
                message: Swift.String? = nil
            ) {
                self.id = id
                self.timestamp = timestamp
                self.userId = userId
                self.status = status
                self.expression = expression
                self.validUntil = validUntil
                self.triggerLimits = triggerLimits
                self.triggeredCounter = triggeredCounter
                self.failure = failure
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case timestamp
                case userId
                case status
                case expression
                case validUntil
                case triggerLimits
                case triggeredCounter
                case failure
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/AlertResponse`.
        public struct AlertResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/AlertResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AlertResponse/alert`.
            public var alert: Components.Schemas.Alert?
            /// Creates a new `AlertResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - alert:
            public init(
                errorText: Swift.String? = nil,
                alert: Components.Schemas.Alert? = nil
            ) {
                self.errorText = errorText
                self.alert = alert
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case alert
            }
        }
        /// - Remark: Generated from `#/components/schemas/AlertSignal`.
        public struct AlertSignal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AlertSignal/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/AlertSignal/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/AlertSignal/alertId`.
            public var alertId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AlertSignal/isRead`.
            public var isRead: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AlertSignal/text`.
            public var text: Swift.String
            /// Creates a new `AlertSignal`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - timestamp:
            ///   - alertId:
            ///   - isRead:
            ///   - text:
            public init(
                id: Swift.Int64? = nil,
                timestamp: Foundation.Date,
                alertId: Swift.Int64,
                isRead: Swift.Bool,
                text: Swift.String
            ) {
                self.id = id
                self.timestamp = timestamp
                self.alertId = alertId
                self.isRead = isRead
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case timestamp
                case alertId
                case isRead
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/CancelEverything`.
        public struct CancelEverything: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CancelEverything/userIds`.
            public var userIds: [Swift.Int64]
            /// - Remark: Generated from `#/components/schemas/CancelEverything/tradovateSubscriptions`.
            public var tradovateSubscriptions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CancelEverything/tradingPermissions`.
            public var tradingPermissions: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CancelEverything/userPlugins`.
            public var userPlugins: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/CancelEverything/marketDataSubscriptions`.
            public var marketDataSubscriptions: Swift.Bool?
            /// Creates a new `CancelEverything`.
            ///
            /// - Parameters:
            ///   - userIds:
            ///   - tradovateSubscriptions:
            ///   - tradingPermissions:
            ///   - userPlugins:
            ///   - marketDataSubscriptions:
            public init(
                userIds: [Swift.Int64],
                tradovateSubscriptions: Swift.Bool? = nil,
                tradingPermissions: Swift.Bool? = nil,
                userPlugins: Swift.Bool? = nil,
                marketDataSubscriptions: Swift.Bool? = nil
            ) {
                self.userIds = userIds
                self.tradovateSubscriptions = tradovateSubscriptions
                self.tradingPermissions = tradingPermissions
                self.userPlugins = userPlugins
                self.marketDataSubscriptions = marketDataSubscriptions
            }
            public enum CodingKeys: String, CodingKey {
                case userIds
                case tradovateSubscriptions
                case tradingPermissions
                case userPlugins
                case marketDataSubscriptions
            }
        }
        /// - Remark: Generated from `#/components/schemas/CancelEverythingResponse`.
        public struct CancelEverythingResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CancelEverythingResponse/tradovateSubscriptionIds`.
            public var tradovateSubscriptionIds: [Swift.Int64]
            /// - Remark: Generated from `#/components/schemas/CancelEverythingResponse/tradingPermissionIds`.
            public var tradingPermissionIds: [Swift.Int64]
            /// - Remark: Generated from `#/components/schemas/CancelEverythingResponse/userPluginIds`.
            public var userPluginIds: [Swift.Int64]
            /// - Remark: Generated from `#/components/schemas/CancelEverythingResponse/marketDataSubscriptionIds`.
            public var marketDataSubscriptionIds: [Swift.Int64]
            /// Creates a new `CancelEverythingResponse`.
            ///
            /// - Parameters:
            ///   - tradovateSubscriptionIds:
            ///   - tradingPermissionIds:
            ///   - userPluginIds:
            ///   - marketDataSubscriptionIds:
            public init(
                tradovateSubscriptionIds: [Swift.Int64],
                tradingPermissionIds: [Swift.Int64],
                userPluginIds: [Swift.Int64],
                marketDataSubscriptionIds: [Swift.Int64]
            ) {
                self.tradovateSubscriptionIds = tradovateSubscriptionIds
                self.tradingPermissionIds = tradingPermissionIds
                self.userPluginIds = userPluginIds
                self.marketDataSubscriptionIds = marketDataSubscriptionIds
            }
            public enum CodingKeys: String, CodingKey {
                case tradovateSubscriptionIds
                case tradingPermissionIds
                case userPluginIds
                case marketDataSubscriptionIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/CancelOrder`.
        public struct CancelOrder: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CancelOrder/orderId`.
            public var orderId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CancelOrder/clOrdId`.
            public var clOrdId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CancelOrder/activationTime`.
            public var activationTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/CancelOrder/customTag50`.
            public var customTag50: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CancelOrder/isAutomated`.
            public var isAutomated: Swift.Bool?
            /// Creates a new `CancelOrder`.
            ///
            /// - Parameters:
            ///   - orderId:
            ///   - clOrdId:
            ///   - activationTime:
            ///   - customTag50:
            ///   - isAutomated:
            public init(
                orderId: Swift.Int64,
                clOrdId: Swift.String? = nil,
                activationTime: Foundation.Date? = nil,
                customTag50: Swift.String? = nil,
                isAutomated: Swift.Bool? = nil
            ) {
                self.orderId = orderId
                self.clOrdId = clOrdId
                self.activationTime = activationTime
                self.customTag50 = customTag50
                self.isAutomated = isAutomated
            }
            public enum CodingKeys: String, CodingKey {
                case orderId
                case clOrdId
                case activationTime
                case customTag50
                case isAutomated
            }
        }
        /// - Remark: Generated from `#/components/schemas/CancelSecondMarketDataSubscription`.
        public struct CancelSecondMarketDataSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CancelSecondMarketDataSubscription/secondMarketDataSubscriptionId`.
            public var secondMarketDataSubscriptionId: Swift.Int64
            /// Creates a new `CancelSecondMarketDataSubscription`.
            ///
            /// - Parameters:
            ///   - secondMarketDataSubscriptionId:
            public init(secondMarketDataSubscriptionId: Swift.Int64) {
                self.secondMarketDataSubscriptionId = secondMarketDataSubscriptionId
            }
            public enum CodingKeys: String, CodingKey {
                case secondMarketDataSubscriptionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/CancelSecondMarketDataSubscriptionRenewal`.
        public struct CancelSecondMarketDataSubscriptionRenewal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CancelSecondMarketDataSubscriptionRenewal/secondMarketDataSubscriptionId`.
            public var secondMarketDataSubscriptionId: Swift.Int64
            /// Creates a new `CancelSecondMarketDataSubscriptionRenewal`.
            ///
            /// - Parameters:
            ///   - secondMarketDataSubscriptionId:
            public init(secondMarketDataSubscriptionId: Swift.Int64) {
                self.secondMarketDataSubscriptionId = secondMarketDataSubscriptionId
            }
            public enum CodingKeys: String, CodingKey {
                case secondMarketDataSubscriptionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/CancelTradovateSubscription`.
        public struct CancelTradovateSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CancelTradovateSubscription/tradovateSubscriptionId`.
            public var tradovateSubscriptionId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CancelTradovateSubscription/cancelReason`.
            public var cancelReason: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CancelTradovateSubscription/expire`.
            public var expire: Swift.Bool?
            /// Creates a new `CancelTradovateSubscription`.
            ///
            /// - Parameters:
            ///   - tradovateSubscriptionId:
            ///   - cancelReason:
            ///   - expire:
            public init(
                tradovateSubscriptionId: Swift.Int64,
                cancelReason: Swift.String? = nil,
                expire: Swift.Bool? = nil
            ) {
                self.tradovateSubscriptionId = tradovateSubscriptionId
                self.cancelReason = cancelReason
                self.expire = expire
            }
            public enum CodingKeys: String, CodingKey {
                case tradovateSubscriptionId
                case cancelReason
                case expire
            }
        }
        /// - Remark: Generated from `#/components/schemas/CashBalance`.
        public struct CashBalance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CashBalance/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CashBalance/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CashBalance/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/CashBalance/tradeDate`.
            public var tradeDate: Components.Schemas.TradeDate
            /// - Remark: Generated from `#/components/schemas/CashBalance/currencyId`.
            public var currencyId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CashBalance/amount`.
            public var amount: Swift.Double
            /// - Remark: Generated from `#/components/schemas/CashBalance/realizedPnL`.
            public var realizedPnL: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalance/weekRealizedPnL`.
            public var weekRealizedPnL: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalance/amountSOD`.
            public var amountSOD: Swift.Double?
            /// Creates a new `CashBalance`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - timestamp:
            ///   - tradeDate:
            ///   - currencyId:
            ///   - amount:
            ///   - realizedPnL:
            ///   - weekRealizedPnL:
            ///   - amountSOD:
            public init(
                id: Swift.Int64? = nil,
                accountId: Swift.Int64,
                timestamp: Foundation.Date,
                tradeDate: Components.Schemas.TradeDate,
                currencyId: Swift.Int64,
                amount: Swift.Double,
                realizedPnL: Swift.Double? = nil,
                weekRealizedPnL: Swift.Double? = nil,
                amountSOD: Swift.Double? = nil
            ) {
                self.id = id
                self.accountId = accountId
                self.timestamp = timestamp
                self.tradeDate = tradeDate
                self.currencyId = currencyId
                self.amount = amount
                self.realizedPnL = realizedPnL
                self.weekRealizedPnL = weekRealizedPnL
                self.amountSOD = amountSOD
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case accountId
                case timestamp
                case tradeDate
                case currencyId
                case amount
                case realizedPnL
                case weekRealizedPnL
                case amountSOD
            }
        }
        /// - Remark: Generated from `#/components/schemas/CashBalanceLog`.
        public struct CashBalanceLog: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/tradeDate`.
            public var tradeDate: Components.Schemas.TradeDate
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/currencyId`.
            public var currencyId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/amount`.
            public var amount: Swift.Double
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/realizedPnL`.
            public var realizedPnL: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/weekRealizedPnL`.
            public var weekRealizedPnL: Swift.Double?
            /// AccountClosureFee, AddUserFee, AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, CashSettlement, ClearingFee, Commission, Courtesy, Debit, DepositFee, DeskFee, DormantFee, EntitlementSubscription, Escheatment, ExchangeFee, FundTransaction, FundTransactionFee, GoodwillCredit, IPFee, InactivityFee, LiquidationFee, LiquidationFee2, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, NsfCheckFee, OptionsTrade, OrderRoutingFee, PROMO, RithmicFee, SeatLeasePayment, StopPaymentFee, ThirdPartyFee, TradePaired, TradovateSubscription
            ///
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/cashChangeType`.
            @frozen public enum cashChangeTypePayload: String, Codable, Hashable, Sendable {
                case AccountClosureFee = "AccountClosureFee"
                case AddUserFee = "AddUserFee"
                case AutomaticReconciliation = "AutomaticReconciliation"
                case BrokerageFee = "BrokerageFee"
                case CancelledPairedTrade = "CancelledPairedTrade"
                case CashSettlement = "CashSettlement"
                case ClearingFee = "ClearingFee"
                case Commission = "Commission"
                case Courtesy = "Courtesy"
                case Debit = "Debit"
                case DepositFee = "DepositFee"
                case DeskFee = "DeskFee"
                case DormantFee = "DormantFee"
                case EntitlementSubscription = "EntitlementSubscription"
                case Escheatment = "Escheatment"
                case ExchangeFee = "ExchangeFee"
                case FundTransaction = "FundTransaction"
                case FundTransactionFee = "FundTransactionFee"
                case GoodwillCredit = "GoodwillCredit"
                case IPFee = "IPFee"
                case InactivityFee = "InactivityFee"
                case LiquidationFee = "LiquidationFee"
                case LiquidationFee2 = "LiquidationFee2"
                case ManualAdjustment = "ManualAdjustment"
                case MarketDataSubscription = "MarketDataSubscription"
                case NewSession = "NewSession"
                case NfaFee = "NfaFee"
                case NsfCheckFee = "NsfCheckFee"
                case OptionsTrade = "OptionsTrade"
                case OrderRoutingFee = "OrderRoutingFee"
                case PROMO = "PROMO"
                case RithmicFee = "RithmicFee"
                case SeatLeasePayment = "SeatLeasePayment"
                case StopPaymentFee = "StopPaymentFee"
                case ThirdPartyFee = "ThirdPartyFee"
                case TradePaired = "TradePaired"
                case TradovateSubscription = "TradovateSubscription"
            }
            /// AccountClosureFee, AddUserFee, AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, CashSettlement, ClearingFee, Commission, Courtesy, Debit, DepositFee, DeskFee, DormantFee, EntitlementSubscription, Escheatment, ExchangeFee, FundTransaction, FundTransactionFee, GoodwillCredit, IPFee, InactivityFee, LiquidationFee, LiquidationFee2, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, NsfCheckFee, OptionsTrade, OrderRoutingFee, PROMO, RithmicFee, SeatLeasePayment, StopPaymentFee, ThirdPartyFee, TradePaired, TradovateSubscription
            ///
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/cashChangeType`.
            public var cashChangeType: Components.Schemas.CashBalanceLog.cashChangeTypePayload
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/fillPairId`.
            public var fillPairId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/fillId`.
            public var fillId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/fundTransactionId`.
            public var fundTransactionId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/comment`.
            public var comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/delta`.
            public var delta: Swift.Double
            /// - Remark: Generated from `#/components/schemas/CashBalanceLog/senderId`.
            public var senderId: Swift.Int64?
            /// Creates a new `CashBalanceLog`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - timestamp:
            ///   - tradeDate:
            ///   - currencyId:
            ///   - amount:
            ///   - realizedPnL:
            ///   - weekRealizedPnL:
            ///   - cashChangeType: AccountClosureFee, AddUserFee, AutomaticReconciliation, BrokerageFee, CancelledPairedTrade, CashSettlement, ClearingFee, Commission, Courtesy, Debit, DepositFee, DeskFee, DormantFee, EntitlementSubscription, Escheatment, ExchangeFee, FundTransaction, FundTransactionFee, GoodwillCredit, IPFee, InactivityFee, LiquidationFee, LiquidationFee2, ManualAdjustment, MarketDataSubscription, NewSession, NfaFee, NsfCheckFee, OptionsTrade, OrderRoutingFee, PROMO, RithmicFee, SeatLeasePayment, StopPaymentFee, ThirdPartyFee, TradePaired, TradovateSubscription
            ///   - fillPairId:
            ///   - fillId:
            ///   - fundTransactionId:
            ///   - comment:
            ///   - delta:
            ///   - senderId:
            public init(
                id: Swift.Int64? = nil,
                accountId: Swift.Int64,
                timestamp: Foundation.Date,
                tradeDate: Components.Schemas.TradeDate,
                currencyId: Swift.Int64,
                amount: Swift.Double,
                realizedPnL: Swift.Double? = nil,
                weekRealizedPnL: Swift.Double? = nil,
                cashChangeType: Components.Schemas.CashBalanceLog.cashChangeTypePayload,
                fillPairId: Swift.Int64? = nil,
                fillId: Swift.Int64? = nil,
                fundTransactionId: Swift.Int64? = nil,
                comment: Swift.String? = nil,
                delta: Swift.Double,
                senderId: Swift.Int64? = nil
            ) {
                self.id = id
                self.accountId = accountId
                self.timestamp = timestamp
                self.tradeDate = tradeDate
                self.currencyId = currencyId
                self.amount = amount
                self.realizedPnL = realizedPnL
                self.weekRealizedPnL = weekRealizedPnL
                self.cashChangeType = cashChangeType
                self.fillPairId = fillPairId
                self.fillId = fillId
                self.fundTransactionId = fundTransactionId
                self.comment = comment
                self.delta = delta
                self.senderId = senderId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case accountId
                case timestamp
                case tradeDate
                case currencyId
                case amount
                case realizedPnL
                case weekRealizedPnL
                case cashChangeType
                case fillPairId
                case fillId
                case fundTransactionId
                case comment
                case delta
                case senderId
            }
        }
        /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot`.
        public struct CashBalanceSnapshot: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/totalCashValue`.
            public var totalCashValue: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/totalPnL`.
            public var totalPnL: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/initialMargin`.
            public var initialMargin: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/maintenanceMargin`.
            public var maintenanceMargin: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/netLiq`.
            public var netLiq: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/openPnL`.
            public var openPnL: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/realizedPnL`.
            public var realizedPnL: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CashBalanceSnapshot/weekRealizedPnL`.
            public var weekRealizedPnL: Swift.Double?
            /// Creates a new `CashBalanceSnapshot`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - totalCashValue:
            ///   - totalPnL:
            ///   - initialMargin:
            ///   - maintenanceMargin:
            ///   - netLiq:
            ///   - openPnL:
            ///   - realizedPnL:
            ///   - weekRealizedPnL:
            public init(
                errorText: Swift.String? = nil,
                totalCashValue: Swift.Double? = nil,
                totalPnL: Swift.Double? = nil,
                initialMargin: Swift.Double? = nil,
                maintenanceMargin: Swift.Double? = nil,
                netLiq: Swift.Double? = nil,
                openPnL: Swift.Double? = nil,
                realizedPnL: Swift.Double? = nil,
                weekRealizedPnL: Swift.Double? = nil
            ) {
                self.errorText = errorText
                self.totalCashValue = totalCashValue
                self.totalPnL = totalPnL
                self.initialMargin = initialMargin
                self.maintenanceMargin = maintenanceMargin
                self.netLiq = netLiq
                self.openPnL = openPnL
                self.realizedPnL = realizedPnL
                self.weekRealizedPnL = weekRealizedPnL
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case totalCashValue
                case totalPnL
                case initialMargin
                case maintenanceMargin
                case netLiq
                case openPnL
                case realizedPnL
                case weekRealizedPnL
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChangePluginPermission`.
        public struct ChangePluginPermission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChangePluginPermission/userId`.
            public var userId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ChangePluginPermission/pluginName`.
            public var pluginName: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChangePluginPermission/approval`.
            public var approval: Swift.Bool
            /// Creates a new `ChangePluginPermission`.
            ///
            /// - Parameters:
            ///   - userId:
            ///   - pluginName:
            ///   - approval:
            public init(
                userId: Swift.Int64? = nil,
                pluginName: Swift.String,
                approval: Swift.Bool
            ) {
                self.userId = userId
                self.pluginName = pluginName
                self.approval = approval
            }
            public enum CodingKeys: String, CodingKey {
                case userId
                case pluginName
                case approval
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChangeSpeed`.
        public struct ChangeSpeed: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChangeSpeed/speed`.
            public var speed: Swift.Int32
            /// Creates a new `ChangeSpeed`.
            ///
            /// - Parameters:
            ///   - speed:
            public init(speed: Swift.Int32) {
                self.speed = speed
            }
            public enum CodingKeys: String, CodingKey {
                case speed
            }
        }
        /// - Remark: Generated from `#/components/schemas/Chat`.
        public struct Chat: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Chat/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Chat/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Chat/timestamp`.
            public var timestamp: Foundation.Date
            /// Support, TradeDesk
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/category`.
            @frozen public enum categoryPayload: String, Codable, Hashable, Sendable {
                case Support = "Support"
                case TradeDesk = "TradeDesk"
            }
            /// Support, TradeDesk
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/category`.
            public var category: Components.Schemas.Chat.categoryPayload
            /// Assigned To
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/assignedSupportId`.
            public var assignedSupportId: Swift.Int64?
            /// Closed By
            ///
            /// - Remark: Generated from `#/components/schemas/Chat/closedById`.
            public var closedById: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Chat/closeTimestamp`.
            public var closeTimestamp: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Chat/updatedTimestamp`.
            public var updatedTimestamp: Foundation.Date?
            /// Creates a new `Chat`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - timestamp:
            ///   - category: Support, TradeDesk
            ///   - assignedSupportId: Assigned To
            ///   - closedById: Closed By
            ///   - closeTimestamp:
            ///   - updatedTimestamp:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                timestamp: Foundation.Date,
                category: Components.Schemas.Chat.categoryPayload,
                assignedSupportId: Swift.Int64? = nil,
                closedById: Swift.Int64? = nil,
                closeTimestamp: Foundation.Date? = nil,
                updatedTimestamp: Foundation.Date? = nil
            ) {
                self.id = id
                self.userId = userId
                self.timestamp = timestamp
                self.category = category
                self.assignedSupportId = assignedSupportId
                self.closedById = closedById
                self.closeTimestamp = closeTimestamp
                self.updatedTimestamp = updatedTimestamp
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case timestamp
                case category
                case assignedSupportId
                case closedById
                case closeTimestamp
                case updatedTimestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatMessage`.
        public struct ChatMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ChatMessage/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ChatMessage/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/ChatMessage/chatId`.
            public var chatId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ChatMessage/senderId`.
            public var senderId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ChatMessage/senderName`.
            public var senderName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatMessage/text`.
            public var text: Swift.String
            /// - Remark: Generated from `#/components/schemas/ChatMessage/readStatus`.
            public var readStatus: Swift.Bool
            /// Creates a new `ChatMessage`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - timestamp:
            ///   - chatId:
            ///   - senderId:
            ///   - senderName:
            ///   - text:
            ///   - readStatus:
            public init(
                id: Swift.Int64? = nil,
                timestamp: Foundation.Date,
                chatId: Swift.Int64,
                senderId: Swift.Int64,
                senderName: Swift.String? = nil,
                text: Swift.String,
                readStatus: Swift.Bool
            ) {
                self.id = id
                self.timestamp = timestamp
                self.chatId = chatId
                self.senderId = senderId
                self.senderName = senderName
                self.text = text
                self.readStatus = readStatus
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case timestamp
                case chatId
                case senderId
                case senderName
                case text
                case readStatus
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatMessageResponse`.
        public struct ChatMessageResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/ChatMessageResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatMessageResponse/chatMessage`.
            public var chatMessage: Components.Schemas.ChatMessage?
            /// Creates a new `ChatMessageResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - chatMessage:
            public init(
                errorText: Swift.String? = nil,
                chatMessage: Components.Schemas.ChatMessage? = nil
            ) {
                self.errorText = errorText
                self.chatMessage = chatMessage
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case chatMessage
            }
        }
        /// - Remark: Generated from `#/components/schemas/ChatResponse`.
        public struct ChatResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/ChatResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ChatResponse/chat`.
            public var chat: Components.Schemas.Chat?
            /// Creates a new `ChatResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - chat:
            public init(
                errorText: Swift.String? = nil,
                chat: Components.Schemas.Chat? = nil
            ) {
                self.errorText = errorText
                self.chat = chat
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case chat
            }
        }
        /// - Remark: Generated from `#/components/schemas/CheckReplaySession`.
        public struct CheckReplaySession: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CheckReplaySession/startTimestamp`.
            public var startTimestamp: Foundation.Date
            /// Creates a new `CheckReplaySession`.
            ///
            /// - Parameters:
            ///   - startTimestamp:
            public init(startTimestamp: Foundation.Date) {
                self.startTimestamp = startTimestamp
            }
            public enum CodingKeys: String, CodingKey {
                case startTimestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/CheckReplaySessionResponse`.
        public struct CheckReplaySessionResponse: Codable, Hashable, Sendable {
            /// Ineligible, OK, StartTimestampAdjusted
            ///
            /// - Remark: Generated from `#/components/schemas/CheckReplaySessionResponse/checkStatus`.
            @frozen public enum checkStatusPayload: String, Codable, Hashable, Sendable {
                case Ineligible = "Ineligible"
                case OK = "OK"
                case StartTimestampAdjusted = "StartTimestampAdjusted"
            }
            /// Ineligible, OK, StartTimestampAdjusted
            ///
            /// - Remark: Generated from `#/components/schemas/CheckReplaySessionResponse/checkStatus`.
            public var checkStatus: Components.Schemas.CheckReplaySessionResponse.checkStatusPayload
            /// - Remark: Generated from `#/components/schemas/CheckReplaySessionResponse/startTimestamp`.
            public var startTimestamp: Foundation.Date?
            /// Creates a new `CheckReplaySessionResponse`.
            ///
            /// - Parameters:
            ///   - checkStatus: Ineligible, OK, StartTimestampAdjusted
            ///   - startTimestamp:
            public init(
                checkStatus: Components.Schemas.CheckReplaySessionResponse.checkStatusPayload,
                startTimestamp: Foundation.Date? = nil
            ) {
                self.checkStatus = checkStatus
                self.startTimestamp = startTimestamp
            }
            public enum CodingKeys: String, CodingKey {
                case checkStatus
                case startTimestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/CheckStripeFundingEligibility`.
        public struct CheckStripeFundingEligibility: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CheckStripeFundingEligibility/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CheckStripeFundingEligibility/amount`.
            public var amount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CheckStripeFundingEligibility/currencyId`.
            public var currencyId: Swift.Int64
            /// Creates a new `CheckStripeFundingEligibility`.
            ///
            /// - Parameters:
            ///   - accountId:
            ///   - amount:
            ///   - currencyId:
            public init(
                accountId: Swift.Int64,
                amount: Swift.Double? = nil,
                currencyId: Swift.Int64
            ) {
                self.accountId = accountId
                self.amount = amount
                self.currencyId = currencyId
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
                case amount
                case currencyId
            }
        }
        /// - Remark: Generated from `#/components/schemas/CheckStripeFundingEligibilityResponse`.
        public struct CheckStripeFundingEligibilityResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/CheckStripeFundingEligibilityResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CheckStripeFundingEligibilityResponse/minimumAmount`.
            public var minimumAmount: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/CheckStripeFundingEligibilityResponse/maximumAmount`.
            public var maximumAmount: Swift.Double?
            /// Creates a new `CheckStripeFundingEligibilityResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - minimumAmount:
            ///   - maximumAmount:
            public init(
                errorText: Swift.String? = nil,
                minimumAmount: Swift.Double? = nil,
                maximumAmount: Swift.Double? = nil
            ) {
                self.errorText = errorText
                self.minimumAmount = minimumAmount
                self.maximumAmount = maximumAmount
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case minimumAmount
                case maximumAmount
            }
        }
        /// - Remark: Generated from `#/components/schemas/ClearingHouse`.
        public struct ClearingHouse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ClearingHouse/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ClearingHouse/name`.
            public var name: Swift.String
            /// Creates a new `ClearingHouse`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/CloseChat`.
        public struct CloseChat: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CloseChat/chatId`.
            public var chatId: Swift.Int64
            /// Creates a new `CloseChat`.
            ///
            /// - Parameters:
            ///   - chatId:
            public init(chatId: Swift.Int64) {
                self.chatId = chatId
            }
            public enum CodingKeys: String, CodingKey {
                case chatId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Command`.
        public struct Command: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Command/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Command/orderId`.
            public var orderId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Command/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Command/clOrdId`.
            public var clOrdId: Swift.String?
            /// Cancel, Modify, New
            ///
            /// - Remark: Generated from `#/components/schemas/Command/commandType`.
            @frozen public enum commandTypePayload: String, Codable, Hashable, Sendable {
                case Cancel = "Cancel"
                case Modify = "Modify"
                case New = "New"
            }
            /// Cancel, Modify, New
            ///
            /// - Remark: Generated from `#/components/schemas/Command/commandType`.
            public var commandType: Components.Schemas.Command.commandTypePayload
            /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
            ///
            /// - Remark: Generated from `#/components/schemas/Command/commandStatus`.
            @frozen public enum commandStatusPayload: String, Codable, Hashable, Sendable {
                case AtExecution = "AtExecution"
                case ExecutionRejected = "ExecutionRejected"
                case ExecutionStopped = "ExecutionStopped"
                case ExecutionSuspended = "ExecutionSuspended"
                case OnHold = "OnHold"
                case Pending = "Pending"
                case PendingExecution = "PendingExecution"
                case Replaced = "Replaced"
                case RiskPassed = "RiskPassed"
                case RiskRejected = "RiskRejected"
            }
            /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
            ///
            /// - Remark: Generated from `#/components/schemas/Command/commandStatus`.
            public var commandStatus: Components.Schemas.Command.commandStatusPayload
            /// - Remark: Generated from `#/components/schemas/Command/senderId`.
            public var senderId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Command/userSessionId`.
            public var userSessionId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Command/activationTime`.
            public var activationTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/Command/customTag50`.
            public var customTag50: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Command/isAutomated`.
            public var isAutomated: Swift.Bool?
            /// Creates a new `Command`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - orderId:
            ///   - timestamp:
            ///   - clOrdId:
            ///   - commandType: Cancel, Modify, New
            ///   - commandStatus: AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
            ///   - senderId:
            ///   - userSessionId:
            ///   - activationTime:
            ///   - customTag50:
            ///   - isAutomated:
            public init(
                id: Swift.Int64? = nil,
                orderId: Swift.Int64,
                timestamp: Foundation.Date,
                clOrdId: Swift.String? = nil,
                commandType: Components.Schemas.Command.commandTypePayload,
                commandStatus: Components.Schemas.Command.commandStatusPayload,
                senderId: Swift.Int64? = nil,
                userSessionId: Swift.Int64? = nil,
                activationTime: Foundation.Date? = nil,
                customTag50: Swift.String? = nil,
                isAutomated: Swift.Bool? = nil
            ) {
                self.id = id
                self.orderId = orderId
                self.timestamp = timestamp
                self.clOrdId = clOrdId
                self.commandType = commandType
                self.commandStatus = commandStatus
                self.senderId = senderId
                self.userSessionId = userSessionId
                self.activationTime = activationTime
                self.customTag50 = customTag50
                self.isAutomated = isAutomated
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case orderId
                case timestamp
                case clOrdId
                case commandType
                case commandStatus
                case senderId
                case userSessionId
                case activationTime
                case customTag50
                case isAutomated
            }
        }
        /// - Remark: Generated from `#/components/schemas/CommandReport`.
        public struct CommandReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CommandReport/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CommandReport/commandId`.
            public var commandId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CommandReport/timestamp`.
            public var timestamp: Foundation.Date
            /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
            ///
            /// - Remark: Generated from `#/components/schemas/CommandReport/commandStatus`.
            @frozen public enum commandStatusPayload: String, Codable, Hashable, Sendable {
                case AtExecution = "AtExecution"
                case ExecutionRejected = "ExecutionRejected"
                case ExecutionStopped = "ExecutionStopped"
                case ExecutionSuspended = "ExecutionSuspended"
                case OnHold = "OnHold"
                case Pending = "Pending"
                case PendingExecution = "PendingExecution"
                case Replaced = "Replaced"
                case RiskPassed = "RiskPassed"
                case RiskRejected = "RiskRejected"
            }
            /// AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
            ///
            /// - Remark: Generated from `#/components/schemas/CommandReport/commandStatus`.
            public var commandStatus: Components.Schemas.CommandReport.commandStatusPayload
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/CommandReport/rejectReason`.
            @frozen public enum rejectReasonPayload: String, Codable, Hashable, Sendable {
                case AccountClosed = "AccountClosed"
                case AdvancedTrailingStopUnsupported = "AdvancedTrailingStopUnsupported"
                case AnotherCommandPending = "AnotherCommandPending"
                case BackMonthProhibited = "BackMonthProhibited"
                case ExecutionProviderNotConfigured = "ExecutionProviderNotConfigured"
                case ExecutionProviderUnavailable = "ExecutionProviderUnavailable"
                case InvalidContract = "InvalidContract"
                case InvalidPrice = "InvalidPrice"
                case LiquidationOnly = "LiquidationOnly"
                case LiquidationOnlyBeforeExpiration = "LiquidationOnlyBeforeExpiration"
                case MaxOrderQtyIsNotSpecified = "MaxOrderQtyIsNotSpecified"
                case MaxOrderQtyLimitReached = "MaxOrderQtyLimitReached"
                case MaxPosLimitMisconfigured = "MaxPosLimitMisconfigured"
                case MaxPosLimitReached = "MaxPosLimitReached"
                case MaxTotalPosLimitReached = "MaxTotalPosLimitReached"
                case MultipleAccountPlanRequired = "MultipleAccountPlanRequired"
                case NoQuote = "NoQuote"
                case NotEnoughLiquidity = "NotEnoughLiquidity"
                case OtherExecutionRelated = "OtherExecutionRelated"
                case ParentRejected = "ParentRejected"
                case RiskCheckTimeout = "RiskCheckTimeout"
                case SessionClosed = "SessionClosed"
                case Success = "Success"
                case TooLate = "TooLate"
                case TradingLocked = "TradingLocked"
                case TrailingStopNonOrderQtyModify = "TrailingStopNonOrderQtyModify"
                case Unauthorized = "Unauthorized"
                case UnknownReason = "UnknownReason"
                case Unsupported = "Unsupported"
            }
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/CommandReport/rejectReason`.
            public var rejectReason: Components.Schemas.CommandReport.rejectReasonPayload?
            /// - Remark: Generated from `#/components/schemas/CommandReport/text`.
            public var text: Swift.String?
            /// Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            ///
            /// - Remark: Generated from `#/components/schemas/CommandReport/ordStatus`.
            @frozen public enum ordStatusPayload: String, Codable, Hashable, Sendable {
                case Canceled = "Canceled"
                case Completed = "Completed"
                case Expired = "Expired"
                case Filled = "Filled"
                case PendingCancel = "PendingCancel"
                case PendingNew = "PendingNew"
                case PendingReplace = "PendingReplace"
                case Rejected = "Rejected"
                case Suspended = "Suspended"
                case Unknown = "Unknown"
                case Working = "Working"
            }
            /// Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            ///
            /// - Remark: Generated from `#/components/schemas/CommandReport/ordStatus`.
            public var ordStatus: Components.Schemas.CommandReport.ordStatusPayload?
            /// Creates a new `CommandReport`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - commandId:
            ///   - timestamp:
            ///   - commandStatus: AtExecution, ExecutionRejected, ExecutionStopped, ExecutionSuspended, OnHold, Pending, PendingExecution, Replaced, RiskPassed, RiskRejected
            ///   - rejectReason: AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///   - text:
            ///   - ordStatus: Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            public init(
                id: Swift.Int64? = nil,
                commandId: Swift.Int64,
                timestamp: Foundation.Date,
                commandStatus: Components.Schemas.CommandReport.commandStatusPayload,
                rejectReason: Components.Schemas.CommandReport.rejectReasonPayload? = nil,
                text: Swift.String? = nil,
                ordStatus: Components.Schemas.CommandReport.ordStatusPayload? = nil
            ) {
                self.id = id
                self.commandId = commandId
                self.timestamp = timestamp
                self.commandStatus = commandStatus
                self.rejectReason = rejectReason
                self.text = text
                self.ordStatus = ordStatus
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case commandId
                case timestamp
                case commandStatus
                case rejectReason
                case text
                case ordStatus
            }
        }
        /// - Remark: Generated from `#/components/schemas/CommandResult`.
        public struct CommandResult: Codable, Hashable, Sendable {
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/CommandResult/failureReason`.
            @frozen public enum failureReasonPayload: String, Codable, Hashable, Sendable {
                case AccountClosed = "AccountClosed"
                case AdvancedTrailingStopUnsupported = "AdvancedTrailingStopUnsupported"
                case AnotherCommandPending = "AnotherCommandPending"
                case BackMonthProhibited = "BackMonthProhibited"
                case ExecutionProviderNotConfigured = "ExecutionProviderNotConfigured"
                case ExecutionProviderUnavailable = "ExecutionProviderUnavailable"
                case InvalidContract = "InvalidContract"
                case InvalidPrice = "InvalidPrice"
                case LiquidationOnly = "LiquidationOnly"
                case LiquidationOnlyBeforeExpiration = "LiquidationOnlyBeforeExpiration"
                case MaxOrderQtyIsNotSpecified = "MaxOrderQtyIsNotSpecified"
                case MaxOrderQtyLimitReached = "MaxOrderQtyLimitReached"
                case MaxPosLimitMisconfigured = "MaxPosLimitMisconfigured"
                case MaxPosLimitReached = "MaxPosLimitReached"
                case MaxTotalPosLimitReached = "MaxTotalPosLimitReached"
                case MultipleAccountPlanRequired = "MultipleAccountPlanRequired"
                case NoQuote = "NoQuote"
                case NotEnoughLiquidity = "NotEnoughLiquidity"
                case OtherExecutionRelated = "OtherExecutionRelated"
                case ParentRejected = "ParentRejected"
                case RiskCheckTimeout = "RiskCheckTimeout"
                case SessionClosed = "SessionClosed"
                case Success = "Success"
                case TooLate = "TooLate"
                case TradingLocked = "TradingLocked"
                case TrailingStopNonOrderQtyModify = "TrailingStopNonOrderQtyModify"
                case Unauthorized = "Unauthorized"
                case UnknownReason = "UnknownReason"
                case Unsupported = "Unsupported"
            }
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/CommandResult/failureReason`.
            public var failureReason: Components.Schemas.CommandResult.failureReasonPayload?
            /// - Remark: Generated from `#/components/schemas/CommandResult/failureText`.
            public var failureText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/CommandResult/commandId`.
            public var commandId: Swift.Int64?
            /// Creates a new `CommandResult`.
            ///
            /// - Parameters:
            ///   - failureReason: AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///   - failureText:
            ///   - commandId:
            public init(
                failureReason: Components.Schemas.CommandResult.failureReasonPayload? = nil,
                failureText: Swift.String? = nil,
                commandId: Swift.Int64? = nil
            ) {
                self.failureReason = failureReason
                self.failureText = failureText
                self.commandId = commandId
            }
            public enum CodingKeys: String, CodingKey {
                case failureReason
                case failureText
                case commandId
            }
        }
        /// - Remark: Generated from `#/components/schemas/CompleteAlertSignal`.
        public struct CompleteAlertSignal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CompleteAlertSignal/adminAlertSignalId`.
            public var adminAlertSignalId: Swift.Int64
            /// Creates a new `CompleteAlertSignal`.
            ///
            /// - Parameters:
            ///   - adminAlertSignalId:
            public init(adminAlertSignalId: Swift.Int64) {
                self.adminAlertSignalId = adminAlertSignalId
            }
            public enum CodingKeys: String, CodingKey {
                case adminAlertSignalId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContactInfo`.
        public struct ContactInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContactInfo/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ContactInfo/firstName`.
            public var firstName: Swift.String
            /// - Remark: Generated from `#/components/schemas/ContactInfo/lastName`.
            public var lastName: Swift.String
            /// - Remark: Generated from `#/components/schemas/ContactInfo/streetAddress1`.
            public var streetAddress1: Swift.String
            /// - Remark: Generated from `#/components/schemas/ContactInfo/streetAddress2`.
            public var streetAddress2: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/city`.
            public var city: Swift.String
            /// - Remark: Generated from `#/components/schemas/ContactInfo/state`.
            public var state: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/postCode`.
            public var postCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/country`.
            public var country: Swift.String
            /// - Remark: Generated from `#/components/schemas/ContactInfo/phone`.
            public var phone: Swift.String
            /// - Remark: Generated from `#/components/schemas/ContactInfo/mailingIsDifferent`.
            public var mailingIsDifferent: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/mailingStreetAddress1`.
            public var mailingStreetAddress1: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/mailingStreetAddress2`.
            public var mailingStreetAddress2: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/mailingCity`.
            public var mailingCity: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/mailingState`.
            public var mailingState: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/mailingPostCode`.
            public var mailingPostCode: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/mailingCountry`.
            public var mailingCountry: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/jointFirstName`.
            public var jointFirstName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ContactInfo/jointLastName`.
            public var jointLastName: Swift.String?
            /// Creates a new `ContactInfo`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - firstName:
            ///   - lastName:
            ///   - streetAddress1:
            ///   - streetAddress2:
            ///   - city:
            ///   - state:
            ///   - postCode:
            ///   - country:
            ///   - phone:
            ///   - mailingIsDifferent:
            ///   - mailingStreetAddress1:
            ///   - mailingStreetAddress2:
            ///   - mailingCity:
            ///   - mailingState:
            ///   - mailingPostCode:
            ///   - mailingCountry:
            ///   - jointFirstName:
            ///   - jointLastName:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                firstName: Swift.String,
                lastName: Swift.String,
                streetAddress1: Swift.String,
                streetAddress2: Swift.String? = nil,
                city: Swift.String,
                state: Swift.String? = nil,
                postCode: Swift.String? = nil,
                country: Swift.String,
                phone: Swift.String,
                mailingIsDifferent: Swift.Bool? = nil,
                mailingStreetAddress1: Swift.String? = nil,
                mailingStreetAddress2: Swift.String? = nil,
                mailingCity: Swift.String? = nil,
                mailingState: Swift.String? = nil,
                mailingPostCode: Swift.String? = nil,
                mailingCountry: Swift.String? = nil,
                jointFirstName: Swift.String? = nil,
                jointLastName: Swift.String? = nil
            ) {
                self.id = id
                self.userId = userId
                self.firstName = firstName
                self.lastName = lastName
                self.streetAddress1 = streetAddress1
                self.streetAddress2 = streetAddress2
                self.city = city
                self.state = state
                self.postCode = postCode
                self.country = country
                self.phone = phone
                self.mailingIsDifferent = mailingIsDifferent
                self.mailingStreetAddress1 = mailingStreetAddress1
                self.mailingStreetAddress2 = mailingStreetAddress2
                self.mailingCity = mailingCity
                self.mailingState = mailingState
                self.mailingPostCode = mailingPostCode
                self.mailingCountry = mailingCountry
                self.jointFirstName = jointFirstName
                self.jointLastName = jointLastName
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case firstName
                case lastName
                case streetAddress1
                case streetAddress2
                case city
                case state
                case postCode
                case country
                case phone
                case mailingIsDifferent
                case mailingStreetAddress1
                case mailingStreetAddress2
                case mailingCity
                case mailingState
                case mailingPostCode
                case mailingCountry
                case jointFirstName
                case jointLastName
            }
        }
        /// - Remark: Generated from `#/components/schemas/Contract`.
        public struct Contract: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Contract/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Contract/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Contract/contractMaturityId`.
            public var contractMaturityId: Swift.Int64
            /// Creates a new `Contract`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - contractMaturityId:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                contractMaturityId: Swift.Int64
            ) {
                self.id = id
                self.name = name
                self.contractMaturityId = contractMaturityId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case contractMaturityId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContractGroup`.
        public struct ContractGroup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContractGroup/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContractGroup/name`.
            public var name: Swift.String
            /// Creates a new `ContractGroup`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContractMargin`.
        public struct ContractMargin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContractMargin/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContractMargin/initialMargin`.
            public var initialMargin: Swift.Double
            /// - Remark: Generated from `#/components/schemas/ContractMargin/maintenanceMargin`.
            public var maintenanceMargin: Swift.Double
            /// - Remark: Generated from `#/components/schemas/ContractMargin/timestamp`.
            public var timestamp: Foundation.Date
            /// Creates a new `ContractMargin`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - initialMargin:
            ///   - maintenanceMargin:
            ///   - timestamp:
            public init(
                id: Swift.Int64? = nil,
                initialMargin: Swift.Double,
                maintenanceMargin: Swift.Double,
                timestamp: Foundation.Date
            ) {
                self.id = id
                self.initialMargin = initialMargin
                self.maintenanceMargin = maintenanceMargin
                self.timestamp = timestamp
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case initialMargin
                case maintenanceMargin
                case timestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContractMaturity`.
        public struct ContractMaturity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContractMaturity/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContractMaturity/productId`.
            public var productId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ContractMaturity/expirationMonth`.
            public var expirationMonth: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/ContractMaturity/expirationDate`.
            public var expirationDate: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/ContractMaturity/firstIntentDate`.
            public var firstIntentDate: Foundation.Date?
            /// Underlying
            ///
            /// - Remark: Generated from `#/components/schemas/ContractMaturity/underlyingId`.
            public var underlyingId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ContractMaturity/isFront`.
            public var isFront: Swift.Bool
            /// Creates a new `ContractMaturity`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - productId:
            ///   - expirationMonth:
            ///   - expirationDate:
            ///   - firstIntentDate:
            ///   - underlyingId: Underlying
            ///   - isFront:
            public init(
                id: Swift.Int64? = nil,
                productId: Swift.Int64,
                expirationMonth: Swift.Int32,
                expirationDate: Foundation.Date,
                firstIntentDate: Foundation.Date? = nil,
                underlyingId: Swift.Int64? = nil,
                isFront: Swift.Bool
            ) {
                self.id = id
                self.productId = productId
                self.expirationMonth = expirationMonth
                self.expirationDate = expirationDate
                self.firstIntentDate = firstIntentDate
                self.underlyingId = underlyingId
                self.isFront = isFront
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case productId
                case expirationMonth
                case expirationDate
                case firstIntentDate
                case underlyingId
                case isFront
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateAlert`.
        public struct CreateAlert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateAlert/expression`.
            public var expression: Swift.String
            /// - Remark: Generated from `#/components/schemas/CreateAlert/validUntil`.
            public var validUntil: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/CreateAlert/triggerLimits`.
            public var triggerLimits: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/CreateAlert/message`.
            public var message: Swift.String?
            /// Creates a new `CreateAlert`.
            ///
            /// - Parameters:
            ///   - expression:
            ///   - validUntil:
            ///   - triggerLimits:
            ///   - message:
            public init(
                expression: Swift.String,
                validUntil: Foundation.Date? = nil,
                triggerLimits: Swift.Int32? = nil,
                message: Swift.String? = nil
            ) {
                self.expression = expression
                self.validUntil = validUntil
                self.triggerLimits = triggerLimits
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case expression
                case validUntil
                case triggerLimits
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreateTradingPermission`.
        public struct CreateTradingPermission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreateTradingPermission/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CreateTradingPermission/userId`.
            public var userId: Swift.Int64
            /// Creates a new `CreateTradingPermission`.
            ///
            /// - Parameters:
            ///   - accountId:
            ///   - userId:
            public init(
                accountId: Swift.Int64,
                userId: Swift.Int64
            ) {
                self.accountId = accountId
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Currency`.
        public struct Currency: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Currency/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Currency/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Currency/symbol`.
            public var symbol: Swift.String?
            /// Creates a new `Currency`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - symbol:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                symbol: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.symbol = symbol
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case symbol
            }
        }
        /// - Remark: Generated from `#/components/schemas/CurrencyRate`.
        public struct CurrencyRate: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CurrencyRate/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/CurrencyRate/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/CurrencyRate/rate`.
            public var rate: Swift.Double
            /// Creates a new `CurrencyRate`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - timestamp:
            ///   - rate:
            public init(
                id: Swift.Int64? = nil,
                timestamp: Foundation.Date,
                rate: Swift.Double
            ) {
                self.id = id
                self.timestamp = timestamp
                self.rate = rate
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case timestamp
                case rate
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteAlert`.
        public struct DeleteAlert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteAlert/alertId`.
            public var alertId: Swift.Int64
            /// Creates a new `DeleteAlert`.
            ///
            /// - Parameters:
            ///   - alertId:
            public init(alertId: Swift.Int64) {
                self.alertId = alertId
            }
            public enum CodingKeys: String, CodingKey {
                case alertId
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteResultResponse`.
        public struct DeleteResultResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/DeleteResultResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DeleteResultResponse/success`.
            public var success: Swift.Bool?
            /// Creates a new `DeleteResultResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - success:
            public init(
                errorText: Swift.String? = nil,
                success: Swift.Bool? = nil
            ) {
                self.errorText = errorText
                self.success = success
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case success
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteUserAccountPositionLimit`.
        public struct DeleteUserAccountPositionLimit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteUserAccountPositionLimit/userAccountPositionLimitId`.
            public var userAccountPositionLimitId: Swift.Int64
            /// Creates a new `DeleteUserAccountPositionLimit`.
            ///
            /// - Parameters:
            ///   - userAccountPositionLimitId:
            public init(userAccountPositionLimitId: Swift.Int64) {
                self.userAccountPositionLimitId = userAccountPositionLimitId
            }
            public enum CodingKeys: String, CodingKey {
                case userAccountPositionLimitId
            }
        }
        /// - Remark: Generated from `#/components/schemas/DeleteUserAccountRiskParameter`.
        public struct DeleteUserAccountRiskParameter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DeleteUserAccountRiskParameter/userAccountRiskParameterId`.
            public var userAccountRiskParameterId: Swift.Int64
            /// Creates a new `DeleteUserAccountRiskParameter`.
            ///
            /// - Parameters:
            ///   - userAccountRiskParameterId:
            public init(userAccountRiskParameterId: Swift.Int64) {
                self.userAccountRiskParameterId = userAccountRiskParameterId
            }
            public enum CodingKeys: String, CodingKey {
                case userAccountRiskParameterId
            }
        }
        /// - Remark: Generated from `#/components/schemas/DismissAlert`.
        public struct DismissAlert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DismissAlert/alertId`.
            public var alertId: Swift.Int64
            /// Creates a new `DismissAlert`.
            ///
            /// - Parameters:
            ///   - alertId:
            public init(alertId: Swift.Int64) {
                self.alertId = alertId
            }
            public enum CodingKeys: String, CodingKey {
                case alertId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Entitlement`.
        public struct Entitlement: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Entitlement/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Entitlement/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/Entitlement/price`.
            public var price: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Entitlement/startDate`.
            public var startDate: Components.Schemas.TradeDate?
            /// - Remark: Generated from `#/components/schemas/Entitlement/discontinuedDate`.
            public var discontinuedDate: Components.Schemas.TradeDate?
            /// - Remark: Generated from `#/components/schemas/Entitlement/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Entitlement/duration`.
            public var duration: Swift.Int32?
            /// Lifetime, Month, Quarter, Week, Year
            ///
            /// - Remark: Generated from `#/components/schemas/Entitlement/durationUnits`.
            @frozen public enum durationUnitsPayload: String, Codable, Hashable, Sendable {
                case Lifetime = "Lifetime"
                case Month = "Month"
                case Quarter = "Quarter"
                case Week = "Week"
                case Year = "Year"
            }
            /// Lifetime, Month, Quarter, Week, Year
            ///
            /// - Remark: Generated from `#/components/schemas/Entitlement/durationUnits`.
            public var durationUnits: Components.Schemas.Entitlement.durationUnitsPayload?
            /// - Remark: Generated from `#/components/schemas/Entitlement/autorenewal`.
            public var autorenewal: Swift.Bool?
            /// Creates a new `Entitlement`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - title:
            ///   - price:
            ///   - startDate:
            ///   - discontinuedDate:
            ///   - name:
            ///   - duration:
            ///   - durationUnits: Lifetime, Month, Quarter, Week, Year
            ///   - autorenewal:
            public init(
                id: Swift.Int64? = nil,
                title: Swift.String,
                price: Swift.Double,
                startDate: Components.Schemas.TradeDate? = nil,
                discontinuedDate: Components.Schemas.TradeDate? = nil,
                name: Swift.String,
                duration: Swift.Int32? = nil,
                durationUnits: Components.Schemas.Entitlement.durationUnitsPayload? = nil,
                autorenewal: Swift.Bool? = nil
            ) {
                self.id = id
                self.title = title
                self.price = price
                self.startDate = startDate
                self.discontinuedDate = discontinuedDate
                self.name = name
                self.duration = duration
                self.durationUnits = durationUnits
                self.autorenewal = autorenewal
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case title
                case price
                case startDate
                case discontinuedDate
                case name
                case duration
                case durationUnits
                case autorenewal
            }
        }
        /// - Remark: Generated from `#/components/schemas/EntitlementSubscriptionResponse`.
        public struct EntitlementSubscriptionResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/EntitlementSubscriptionResponse/errorText`.
            public var errorText: Swift.String?
            /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///
            /// - Remark: Generated from `#/components/schemas/EntitlementSubscriptionResponse/errorCode`.
            @frozen public enum errorCodePayload: String, Codable, Hashable, Sendable {
                case ConflictWithExisting = "ConflictWithExisting"
                case DowngradeNotAllowed = "DowngradeNotAllowed"
                case IncompatibleCMEMarketDataSubscriptionPlans = "IncompatibleCMEMarketDataSubscriptionPlans"
                case IncorrectPaymentMethod = "IncorrectPaymentMethod"
                case InsufficientFunds = "InsufficientFunds"
                case PaymentProviderError = "PaymentProviderError"
                case PlanDiscontinued = "PlanDiscontinued"
                case SingleTrialOnly = "SingleTrialOnly"
                case Success = "Success"
                case UnknownError = "UnknownError"
            }
            /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///
            /// - Remark: Generated from `#/components/schemas/EntitlementSubscriptionResponse/errorCode`.
            public var errorCode: Components.Schemas.EntitlementSubscriptionResponse.errorCodePayload?
            /// - Remark: Generated from `#/components/schemas/EntitlementSubscriptionResponse/entitlementSubscription`.
            public var entitlementSubscription: Components.Schemas.UserPlugin?
            /// Creates a new `EntitlementSubscriptionResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - errorCode: ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///   - entitlementSubscription:
            public init(
                errorText: Swift.String? = nil,
                errorCode: Components.Schemas.EntitlementSubscriptionResponse.errorCodePayload? = nil,
                entitlementSubscription: Components.Schemas.UserPlugin? = nil
            ) {
                self.errorText = errorText
                self.errorCode = errorCode
                self.entitlementSubscription = entitlementSubscription
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case errorCode
                case entitlementSubscription
            }
        }
        /// - Remark: Generated from `#/components/schemas/Exchange`.
        public struct Exchange: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Exchange/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Exchange/name`.
            public var name: Swift.String
            /// Creates a new `Exchange`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ExecutionReport`.
        public struct ExecutionReport: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/commandId`.
            public var commandId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/contractId`.
            public var contractId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/tradeDate`.
            public var tradeDate: Components.Schemas.TradeDate?
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/orderId`.
            public var orderId: Swift.Int64
            /// Canceled, Completed, DoneForDay, Expired, New, OrderStatus, PendingCancel, PendingNew, PendingReplace, Rejected, Replaced, Stopped, Suspended, Trade, TradeCancel, TradeCorrect
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/execType`.
            @frozen public enum execTypePayload: String, Codable, Hashable, Sendable {
                case Canceled = "Canceled"
                case Completed = "Completed"
                case DoneForDay = "DoneForDay"
                case Expired = "Expired"
                case New = "New"
                case OrderStatus = "OrderStatus"
                case PendingCancel = "PendingCancel"
                case PendingNew = "PendingNew"
                case PendingReplace = "PendingReplace"
                case Rejected = "Rejected"
                case Replaced = "Replaced"
                case Stopped = "Stopped"
                case Suspended = "Suspended"
                case Trade = "Trade"
                case TradeCancel = "TradeCancel"
                case TradeCorrect = "TradeCorrect"
            }
            /// Canceled, Completed, DoneForDay, Expired, New, OrderStatus, PendingCancel, PendingNew, PendingReplace, Rejected, Replaced, Stopped, Suspended, Trade, TradeCancel, TradeCorrect
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/execType`.
            public var execType: Components.Schemas.ExecutionReport.execTypePayload
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/execRefId`.
            public var execRefId: Swift.String?
            /// Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/ordStatus`.
            @frozen public enum ordStatusPayload: String, Codable, Hashable, Sendable {
                case Canceled = "Canceled"
                case Completed = "Completed"
                case Expired = "Expired"
                case Filled = "Filled"
                case PendingCancel = "PendingCancel"
                case PendingNew = "PendingNew"
                case PendingReplace = "PendingReplace"
                case Rejected = "Rejected"
                case Suspended = "Suspended"
                case Unknown = "Unknown"
                case Working = "Working"
            }
            /// Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/ordStatus`.
            public var ordStatus: Components.Schemas.ExecutionReport.ordStatusPayload?
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/action`.
            public var action: Components.Schemas.ExecutionReport.actionPayload
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/cumQty`.
            public var cumQty: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/avgPx`.
            public var avgPx: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/lastQty`.
            public var lastQty: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/lastPx`.
            public var lastPx: Swift.Double?
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/rejectReason`.
            @frozen public enum rejectReasonPayload: String, Codable, Hashable, Sendable {
                case AccountClosed = "AccountClosed"
                case AdvancedTrailingStopUnsupported = "AdvancedTrailingStopUnsupported"
                case AnotherCommandPending = "AnotherCommandPending"
                case BackMonthProhibited = "BackMonthProhibited"
                case ExecutionProviderNotConfigured = "ExecutionProviderNotConfigured"
                case ExecutionProviderUnavailable = "ExecutionProviderUnavailable"
                case InvalidContract = "InvalidContract"
                case InvalidPrice = "InvalidPrice"
                case LiquidationOnly = "LiquidationOnly"
                case LiquidationOnlyBeforeExpiration = "LiquidationOnlyBeforeExpiration"
                case MaxOrderQtyIsNotSpecified = "MaxOrderQtyIsNotSpecified"
                case MaxOrderQtyLimitReached = "MaxOrderQtyLimitReached"
                case MaxPosLimitMisconfigured = "MaxPosLimitMisconfigured"
                case MaxPosLimitReached = "MaxPosLimitReached"
                case MaxTotalPosLimitReached = "MaxTotalPosLimitReached"
                case MultipleAccountPlanRequired = "MultipleAccountPlanRequired"
                case NoQuote = "NoQuote"
                case NotEnoughLiquidity = "NotEnoughLiquidity"
                case OtherExecutionRelated = "OtherExecutionRelated"
                case ParentRejected = "ParentRejected"
                case RiskCheckTimeout = "RiskCheckTimeout"
                case SessionClosed = "SessionClosed"
                case Success = "Success"
                case TooLate = "TooLate"
                case TradingLocked = "TradingLocked"
                case TrailingStopNonOrderQtyModify = "TrailingStopNonOrderQtyModify"
                case Unauthorized = "Unauthorized"
                case UnknownReason = "UnknownReason"
                case Unsupported = "Unsupported"
            }
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/rejectReason`.
            public var rejectReason: Components.Schemas.ExecutionReport.rejectReasonPayload?
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ExecutionReport/exchangeOrderId`.
            public var exchangeOrderId: Swift.String?
            /// Creates a new `ExecutionReport`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - commandId:
            ///   - name:
            ///   - accountId:
            ///   - contractId:
            ///   - timestamp:
            ///   - tradeDate:
            ///   - orderId:
            ///   - execType: Canceled, Completed, DoneForDay, Expired, New, OrderStatus, PendingCancel, PendingNew, PendingReplace, Rejected, Replaced, Stopped, Suspended, Trade, TradeCancel, TradeCorrect
            ///   - execRefId:
            ///   - ordStatus: Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            ///   - action: Buy, Sell
            ///   - cumQty:
            ///   - avgPx:
            ///   - lastQty:
            ///   - lastPx:
            ///   - rejectReason: AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///   - text:
            ///   - exchangeOrderId:
            public init(
                id: Swift.Int64? = nil,
                commandId: Swift.Int64,
                name: Swift.String,
                accountId: Swift.Int64,
                contractId: Swift.Int64,
                timestamp: Foundation.Date,
                tradeDate: Components.Schemas.TradeDate? = nil,
                orderId: Swift.Int64,
                execType: Components.Schemas.ExecutionReport.execTypePayload,
                execRefId: Swift.String? = nil,
                ordStatus: Components.Schemas.ExecutionReport.ordStatusPayload? = nil,
                action: Components.Schemas.ExecutionReport.actionPayload,
                cumQty: Swift.Int32? = nil,
                avgPx: Swift.Double? = nil,
                lastQty: Swift.Int32? = nil,
                lastPx: Swift.Double? = nil,
                rejectReason: Components.Schemas.ExecutionReport.rejectReasonPayload? = nil,
                text: Swift.String? = nil,
                exchangeOrderId: Swift.String? = nil
            ) {
                self.id = id
                self.commandId = commandId
                self.name = name
                self.accountId = accountId
                self.contractId = contractId
                self.timestamp = timestamp
                self.tradeDate = tradeDate
                self.orderId = orderId
                self.execType = execType
                self.execRefId = execRefId
                self.ordStatus = ordStatus
                self.action = action
                self.cumQty = cumQty
                self.avgPx = avgPx
                self.lastQty = lastQty
                self.lastPx = lastPx
                self.rejectReason = rejectReason
                self.text = text
                self.exchangeOrderId = exchangeOrderId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case commandId
                case name
                case accountId
                case contractId
                case timestamp
                case tradeDate
                case orderId
                case execType
                case execRefId
                case ordStatus
                case action
                case cumQty
                case avgPx
                case lastQty
                case lastPx
                case rejectReason
                case text
                case exchangeOrderId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Fill`.
        public struct Fill: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Fill/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Fill/orderId`.
            public var orderId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Fill/contractId`.
            public var contractId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Fill/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Fill/tradeDate`.
            public var tradeDate: Components.Schemas.TradeDate
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/Fill/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/Fill/action`.
            public var action: Components.Schemas.Fill.actionPayload
            /// - Remark: Generated from `#/components/schemas/Fill/qty`.
            public var qty: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/Fill/price`.
            public var price: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Fill/active`.
            public var active: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Fill/finallyPaired`.
            public var finallyPaired: Swift.Int32
            /// Creates a new `Fill`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - orderId:
            ///   - contractId:
            ///   - timestamp:
            ///   - tradeDate:
            ///   - action: Buy, Sell
            ///   - qty:
            ///   - price:
            ///   - active:
            ///   - finallyPaired:
            public init(
                id: Swift.Int64? = nil,
                orderId: Swift.Int64,
                contractId: Swift.Int64,
                timestamp: Foundation.Date,
                tradeDate: Components.Schemas.TradeDate,
                action: Components.Schemas.Fill.actionPayload,
                qty: Swift.Int32,
                price: Swift.Double,
                active: Swift.Bool,
                finallyPaired: Swift.Int32
            ) {
                self.id = id
                self.orderId = orderId
                self.contractId = contractId
                self.timestamp = timestamp
                self.tradeDate = tradeDate
                self.action = action
                self.qty = qty
                self.price = price
                self.active = active
                self.finallyPaired = finallyPaired
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case orderId
                case contractId
                case timestamp
                case tradeDate
                case action
                case qty
                case price
                case active
                case finallyPaired
            }
        }
        /// - Remark: Generated from `#/components/schemas/FillFee`.
        public struct FillFee: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FillFee/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FillFee/clearingFee`.
            public var clearingFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/FillFee/clearingCurrencyId`.
            public var clearingCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FillFee/exchangeFee`.
            public var exchangeFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/FillFee/exchangeCurrencyId`.
            public var exchangeCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FillFee/nfaFee`.
            public var nfaFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/FillFee/nfaCurrencyId`.
            public var nfaCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FillFee/brokerageFee`.
            public var brokerageFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/FillFee/brokerageCurrencyId`.
            public var brokerageCurrencyId: Swift.Int64?
            /// IP/TT Fee
            ///
            /// - Remark: Generated from `#/components/schemas/FillFee/ipFee`.
            public var ipFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/FillFee/ipCurrencyId`.
            public var ipCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FillFee/commission`.
            public var commission: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/FillFee/commissionCurrencyId`.
            public var commissionCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FillFee/orderRoutingFee`.
            public var orderRoutingFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/FillFee/orderRoutingCurrencyId`.
            public var orderRoutingCurrencyId: Swift.Int64?
            /// Creates a new `FillFee`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - clearingFee:
            ///   - clearingCurrencyId:
            ///   - exchangeFee:
            ///   - exchangeCurrencyId:
            ///   - nfaFee:
            ///   - nfaCurrencyId:
            ///   - brokerageFee:
            ///   - brokerageCurrencyId:
            ///   - ipFee: IP/TT Fee
            ///   - ipCurrencyId:
            ///   - commission:
            ///   - commissionCurrencyId:
            ///   - orderRoutingFee:
            ///   - orderRoutingCurrencyId:
            public init(
                id: Swift.Int64? = nil,
                clearingFee: Swift.Double? = nil,
                clearingCurrencyId: Swift.Int64? = nil,
                exchangeFee: Swift.Double? = nil,
                exchangeCurrencyId: Swift.Int64? = nil,
                nfaFee: Swift.Double? = nil,
                nfaCurrencyId: Swift.Int64? = nil,
                brokerageFee: Swift.Double? = nil,
                brokerageCurrencyId: Swift.Int64? = nil,
                ipFee: Swift.Double? = nil,
                ipCurrencyId: Swift.Int64? = nil,
                commission: Swift.Double? = nil,
                commissionCurrencyId: Swift.Int64? = nil,
                orderRoutingFee: Swift.Double? = nil,
                orderRoutingCurrencyId: Swift.Int64? = nil
            ) {
                self.id = id
                self.clearingFee = clearingFee
                self.clearingCurrencyId = clearingCurrencyId
                self.exchangeFee = exchangeFee
                self.exchangeCurrencyId = exchangeCurrencyId
                self.nfaFee = nfaFee
                self.nfaCurrencyId = nfaCurrencyId
                self.brokerageFee = brokerageFee
                self.brokerageCurrencyId = brokerageCurrencyId
                self.ipFee = ipFee
                self.ipCurrencyId = ipCurrencyId
                self.commission = commission
                self.commissionCurrencyId = commissionCurrencyId
                self.orderRoutingFee = orderRoutingFee
                self.orderRoutingCurrencyId = orderRoutingCurrencyId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case clearingFee
                case clearingCurrencyId
                case exchangeFee
                case exchangeCurrencyId
                case nfaFee
                case nfaCurrencyId
                case brokerageFee
                case brokerageCurrencyId
                case ipFee
                case ipCurrencyId
                case commission
                case commissionCurrencyId
                case orderRoutingFee
                case orderRoutingCurrencyId
            }
        }
        /// - Remark: Generated from `#/components/schemas/FillPair`.
        public struct FillPair: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FillPair/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/FillPair/positionId`.
            public var positionId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/FillPair/buyFillId`.
            public var buyFillId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/FillPair/sellFillId`.
            public var sellFillId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/FillPair/qty`.
            public var qty: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/FillPair/buyPrice`.
            public var buyPrice: Swift.Double
            /// - Remark: Generated from `#/components/schemas/FillPair/sellPrice`.
            public var sellPrice: Swift.Double
            /// - Remark: Generated from `#/components/schemas/FillPair/active`.
            public var active: Swift.Bool
            /// Creates a new `FillPair`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - positionId:
            ///   - buyFillId:
            ///   - sellFillId:
            ///   - qty:
            ///   - buyPrice:
            ///   - sellPrice:
            ///   - active:
            public init(
                id: Swift.Int64? = nil,
                positionId: Swift.Int64,
                buyFillId: Swift.Int64,
                sellFillId: Swift.Int64,
                qty: Swift.Int32,
                buyPrice: Swift.Double,
                sellPrice: Swift.Double,
                active: Swift.Bool
            ) {
                self.id = id
                self.positionId = positionId
                self.buyFillId = buyFillId
                self.sellFillId = sellFillId
                self.qty = qty
                self.buyPrice = buyPrice
                self.sellPrice = sellPrice
                self.active = active
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case positionId
                case buyFillId
                case sellFillId
                case qty
                case buyPrice
                case sellPrice
                case active
            }
        }
        /// - Remark: Generated from `#/components/schemas/GetAccountTradingPermissions`.
        public struct GetAccountTradingPermissions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GetAccountTradingPermissions/accountId`.
            public var accountId: Swift.Int64
            /// Creates a new `GetAccountTradingPermissions`.
            ///
            /// - Parameters:
            ///   - accountId:
            public init(accountId: Swift.Int64) {
                self.accountId = accountId
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
            }
        }
        /// - Remark: Generated from `#/components/schemas/GetCashBalanceSnapshot`.
        public struct GetCashBalanceSnapshot: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GetCashBalanceSnapshot/accountId`.
            public var accountId: Swift.Int64
            /// Creates a new `GetCashBalanceSnapshot`.
            ///
            /// - Parameters:
            ///   - accountId:
            public init(accountId: Swift.Int64) {
                self.accountId = accountId
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
            }
        }
        /// - Remark: Generated from `#/components/schemas/GetProductFeeParams`.
        public struct GetProductFeeParams: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GetProductFeeParams/productIds`.
            public var productIds: [Swift.Int64]
            /// Creates a new `GetProductFeeParams`.
            ///
            /// - Parameters:
            ///   - productIds:
            public init(productIds: [Swift.Int64]) {
                self.productIds = productIds
            }
            public enum CodingKeys: String, CodingKey {
                case productIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/GetSecondMarketDataSubscriptionCost`.
        public struct GetSecondMarketDataSubscriptionCost: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GetSecondMarketDataSubscriptionCost/year`.
            public var year: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/GetSecondMarketDataSubscriptionCost/month`.
            public var month: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/GetSecondMarketDataSubscriptionCost/userId`.
            public var userId: Swift.Int64?
            /// Creates a new `GetSecondMarketDataSubscriptionCost`.
            ///
            /// - Parameters:
            ///   - year:
            ///   - month:
            ///   - userId:
            public init(
                year: Swift.Int32,
                month: Swift.Int32,
                userId: Swift.Int64? = nil
            ) {
                self.year = year
                self.month = month
                self.userId = userId
            }
            public enum CodingKeys: String, CodingKey {
                case year
                case month
                case userId
            }
        }
        /// - Remark: Generated from `#/components/schemas/InitializeClock`.
        public struct InitializeClock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InitializeClock/startTimestamp`.
            public var startTimestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/InitializeClock/speed`.
            public var speed: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/InitializeClock/initialBalance`.
            public var initialBalance: Swift.Double?
            /// Creates a new `InitializeClock`.
            ///
            /// - Parameters:
            ///   - startTimestamp:
            ///   - speed:
            ///   - initialBalance:
            public init(
                startTimestamp: Foundation.Date,
                speed: Swift.Int32,
                initialBalance: Swift.Double? = nil
            ) {
                self.startTimestamp = startTimestamp
                self.speed = speed
                self.initialBalance = initialBalance
            }
            public enum CodingKeys: String, CodingKey {
                case startTimestamp
                case speed
                case initialBalance
            }
        }
        /// - Remark: Generated from `#/components/schemas/InterruptOrderStrategy`.
        public struct InterruptOrderStrategy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InterruptOrderStrategy/orderStrategyId`.
            public var orderStrategyId: Swift.Int64
            /// Creates a new `InterruptOrderStrategy`.
            ///
            /// - Parameters:
            ///   - orderStrategyId:
            public init(orderStrategyId: Swift.Int64) {
                self.orderStrategyId = orderStrategyId
            }
            public enum CodingKeys: String, CodingKey {
                case orderStrategyId
            }
        }
        /// - Remark: Generated from `#/components/schemas/LiquidatePosition`.
        public struct LiquidatePosition: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/LiquidatePosition/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/LiquidatePosition/contractId`.
            public var contractId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/LiquidatePosition/admin`.
            public var admin: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/LiquidatePosition/customTag50`.
            public var customTag50: Swift.String?
            /// Creates a new `LiquidatePosition`.
            ///
            /// - Parameters:
            ///   - accountId:
            ///   - contractId:
            ///   - admin:
            ///   - customTag50:
            public init(
                accountId: Swift.Int64,
                contractId: Swift.Int64,
                admin: Swift.Bool,
                customTag50: Swift.String? = nil
            ) {
                self.accountId = accountId
                self.contractId = contractId
                self.admin = admin
                self.customTag50 = customTag50
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
                case contractId
                case admin
                case customTag50
            }
        }
        /// - Remark: Generated from `#/components/schemas/MarginSnapshot`.
        public struct MarginSnapshot: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/riskTimePeriodId`.
            public var riskTimePeriodId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/initialMargin`.
            public var initialMargin: Swift.Double
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/maintenanceMargin`.
            public var maintenanceMargin: Swift.Double
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/autoLiqLevel`.
            public var autoLiqLevel: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/liqOnlyLevel`.
            public var liqOnlyLevel: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/totalUsedMargin`.
            public var totalUsedMargin: Swift.Double
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/fullInitialMargin`.
            public var fullInitialMargin: Swift.Double
            /// - Remark: Generated from `#/components/schemas/MarginSnapshot/positionMargin`.
            public var positionMargin: Swift.Double
            /// Creates a new `MarginSnapshot`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - timestamp:
            ///   - riskTimePeriodId:
            ///   - initialMargin:
            ///   - maintenanceMargin:
            ///   - autoLiqLevel:
            ///   - liqOnlyLevel:
            ///   - totalUsedMargin:
            ///   - fullInitialMargin:
            ///   - positionMargin:
            public init(
                id: Swift.Int64? = nil,
                timestamp: Foundation.Date,
                riskTimePeriodId: Swift.Int64,
                initialMargin: Swift.Double,
                maintenanceMargin: Swift.Double,
                autoLiqLevel: Swift.Double? = nil,
                liqOnlyLevel: Swift.Double? = nil,
                totalUsedMargin: Swift.Double,
                fullInitialMargin: Swift.Double,
                positionMargin: Swift.Double
            ) {
                self.id = id
                self.timestamp = timestamp
                self.riskTimePeriodId = riskTimePeriodId
                self.initialMargin = initialMargin
                self.maintenanceMargin = maintenanceMargin
                self.autoLiqLevel = autoLiqLevel
                self.liqOnlyLevel = liqOnlyLevel
                self.totalUsedMargin = totalUsedMargin
                self.fullInitialMargin = fullInitialMargin
                self.positionMargin = positionMargin
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case timestamp
                case riskTimePeriodId
                case initialMargin
                case maintenanceMargin
                case autoLiqLevel
                case liqOnlyLevel
                case totalUsedMargin
                case fullInitialMargin
                case positionMargin
            }
        }
        /// - Remark: Generated from `#/components/schemas/MarkAsReadChatMessage`.
        public struct MarkAsReadChatMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MarkAsReadChatMessage/chatMessageId`.
            public var chatMessageId: Swift.Int64
            /// Creates a new `MarkAsReadChatMessage`.
            ///
            /// - Parameters:
            ///   - chatMessageId:
            public init(chatMessageId: Swift.Int64) {
                self.chatMessageId = chatMessageId
            }
            public enum CodingKeys: String, CodingKey {
                case chatMessageId
            }
        }
        /// - Remark: Generated from `#/components/schemas/MarkReadAlertSignal`.
        public struct MarkReadAlertSignal: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MarkReadAlertSignal/alertId`.
            public var alertId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MarkReadAlertSignal/alertSignalId`.
            public var alertSignalId: Swift.Int64
            /// Creates a new `MarkReadAlertSignal`.
            ///
            /// - Parameters:
            ///   - alertId:
            ///   - alertSignalId:
            public init(
                alertId: Swift.Int64,
                alertSignalId: Swift.Int64
            ) {
                self.alertId = alertId
                self.alertSignalId = alertSignalId
            }
            public enum CodingKeys: String, CodingKey {
                case alertId
                case alertSignalId
            }
        }
        /// - Remark: Generated from `#/components/schemas/MarketDataSubscription`.
        public struct MarketDataSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/planPrice`.
            public var planPrice: Swift.Double
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/creditCardTransactionId`.
            public var creditCardTransactionId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/cashBalanceLogId`.
            public var cashBalanceLogId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/creditCardId`.
            public var creditCardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/marketDataSubscriptionPlanId`.
            public var marketDataSubscriptionPlanId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/year`.
            public var year: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/month`.
            public var month: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/expired`.
            public var expired: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/renewalCreditCardId`.
            public var renewalCreditCardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscription/renewalAccountId`.
            public var renewalAccountId: Swift.Int64?
            /// Creates a new `MarketDataSubscription`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - timestamp:
            ///   - planPrice:
            ///   - creditCardTransactionId:
            ///   - cashBalanceLogId:
            ///   - creditCardId:
            ///   - accountId:
            ///   - marketDataSubscriptionPlanId:
            ///   - year:
            ///   - month:
            ///   - expired:
            ///   - renewalCreditCardId:
            ///   - renewalAccountId:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                timestamp: Foundation.Date,
                planPrice: Swift.Double,
                creditCardTransactionId: Swift.Int64? = nil,
                cashBalanceLogId: Swift.Int64? = nil,
                creditCardId: Swift.Int64? = nil,
                accountId: Swift.Int64? = nil,
                marketDataSubscriptionPlanId: Swift.Int64,
                year: Swift.Int32,
                month: Swift.Int32,
                expired: Swift.Bool,
                renewalCreditCardId: Swift.Int64? = nil,
                renewalAccountId: Swift.Int64? = nil
            ) {
                self.id = id
                self.userId = userId
                self.timestamp = timestamp
                self.planPrice = planPrice
                self.creditCardTransactionId = creditCardTransactionId
                self.cashBalanceLogId = cashBalanceLogId
                self.creditCardId = creditCardId
                self.accountId = accountId
                self.marketDataSubscriptionPlanId = marketDataSubscriptionPlanId
                self.year = year
                self.month = month
                self.expired = expired
                self.renewalCreditCardId = renewalCreditCardId
                self.renewalAccountId = renewalAccountId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case timestamp
                case planPrice
                case creditCardTransactionId
                case cashBalanceLogId
                case creditCardId
                case accountId
                case marketDataSubscriptionPlanId
                case year
                case month
                case expired
                case renewalCreditCardId
                case renewalAccountId
            }
        }
        /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionExchangeScope`.
        public struct MarketDataSubscriptionExchangeScope: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionExchangeScope/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionExchangeScope/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionExchangeScope/bundleOf`.
            public var bundleOf: Swift.String?
            /// Creates a new `MarketDataSubscriptionExchangeScope`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - bundleOf:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                bundleOf: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.bundleOf = bundleOf
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case bundleOf
            }
        }
        /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan`.
        public struct MarketDataSubscriptionPlan: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/price`.
            public var price: Swift.Double
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/startDate`.
            public var startDate: Components.Schemas.TradeDate?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/discontinuedDate`.
            public var discontinuedDate: Components.Schemas.TradeDate?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/exchangeScopeId`.
            public var exchangeScopeId: Swift.Int64
            /// DOM, Top
            ///
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/dataType`.
            @frozen public enum dataTypePayload: String, Codable, Hashable, Sendable {
                case DOM = "DOM"
                case Top = "Top"
            }
            /// DOM, Top
            ///
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/dataType`.
            public var dataType: Components.Schemas.MarketDataSubscriptionPlan.dataTypePayload
            /// Either, NonProfessional, Professional
            ///
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/professional`.
            @frozen public enum professionalPayload: String, Codable, Hashable, Sendable {
                case Either = "Either"
                case NonProfessional = "NonProfessional"
                case Professional = "Professional"
            }
            /// Either, NonProfessional, Professional
            ///
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/professional`.
            public var professional: Components.Schemas.MarketDataSubscriptionPlan.professionalPayload
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionPlan/tooltip`.
            public var tooltip: Swift.String?
            /// Creates a new `MarketDataSubscriptionPlan`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - title:
            ///   - price:
            ///   - startDate:
            ///   - discontinuedDate:
            ///   - exchangeScopeId:
            ///   - dataType: DOM, Top
            ///   - professional: Either, NonProfessional, Professional
            ///   - tooltip:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                title: Swift.String,
                price: Swift.Double,
                startDate: Components.Schemas.TradeDate? = nil,
                discontinuedDate: Components.Schemas.TradeDate? = nil,
                exchangeScopeId: Swift.Int64,
                dataType: Components.Schemas.MarketDataSubscriptionPlan.dataTypePayload,
                professional: Components.Schemas.MarketDataSubscriptionPlan.professionalPayload,
                tooltip: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.title = title
                self.price = price
                self.startDate = startDate
                self.discontinuedDate = discontinuedDate
                self.exchangeScopeId = exchangeScopeId
                self.dataType = dataType
                self.professional = professional
                self.tooltip = tooltip
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case title
                case price
                case startDate
                case discontinuedDate
                case exchangeScopeId
                case dataType
                case professional
                case tooltip
            }
        }
        /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionResponse`.
        public struct MarketDataSubscriptionResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionResponse/errorText`.
            public var errorText: Swift.String?
            /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionResponse/errorCode`.
            @frozen public enum errorCodePayload: String, Codable, Hashable, Sendable {
                case ConflictWithExisting = "ConflictWithExisting"
                case DowngradeNotAllowed = "DowngradeNotAllowed"
                case IncompatibleCMEMarketDataSubscriptionPlans = "IncompatibleCMEMarketDataSubscriptionPlans"
                case IncorrectPaymentMethod = "IncorrectPaymentMethod"
                case InsufficientFunds = "InsufficientFunds"
                case PaymentProviderError = "PaymentProviderError"
                case PlanDiscontinued = "PlanDiscontinued"
                case SingleTrialOnly = "SingleTrialOnly"
                case Success = "Success"
                case UnknownError = "UnknownError"
            }
            /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionResponse/errorCode`.
            public var errorCode: Components.Schemas.MarketDataSubscriptionResponse.errorCodePayload?
            /// - Remark: Generated from `#/components/schemas/MarketDataSubscriptionResponse/marketDataSubscription`.
            public var marketDataSubscription: Components.Schemas.MarketDataSubscription?
            /// Creates a new `MarketDataSubscriptionResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - errorCode: ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///   - marketDataSubscription:
            public init(
                errorText: Swift.String? = nil,
                errorCode: Components.Schemas.MarketDataSubscriptionResponse.errorCodePayload? = nil,
                marketDataSubscription: Components.Schemas.MarketDataSubscription? = nil
            ) {
                self.errorText = errorText
                self.errorCode = errorCode
                self.marketDataSubscription = marketDataSubscription
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case errorCode
                case marketDataSubscription
            }
        }
        /// - Remark: Generated from `#/components/schemas/Me`.
        public typealias Me = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/ModifyAlert`.
        public struct ModifyAlert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyAlert/alertId`.
            public var alertId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ModifyAlert/expression`.
            public var expression: Swift.String
            /// - Remark: Generated from `#/components/schemas/ModifyAlert/validUntil`.
            public var validUntil: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/ModifyAlert/triggerLimits`.
            public var triggerLimits: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/ModifyAlert/message`.
            public var message: Swift.String?
            /// Creates a new `ModifyAlert`.
            ///
            /// - Parameters:
            ///   - alertId:
            ///   - expression:
            ///   - validUntil:
            ///   - triggerLimits:
            ///   - message:
            public init(
                alertId: Swift.Int64,
                expression: Swift.String,
                validUntil: Foundation.Date? = nil,
                triggerLimits: Swift.Int32? = nil,
                message: Swift.String? = nil
            ) {
                self.alertId = alertId
                self.expression = expression
                self.validUntil = validUntil
                self.triggerLimits = triggerLimits
                self.message = message
            }
            public enum CodingKeys: String, CodingKey {
                case alertId
                case expression
                case validUntil
                case triggerLimits
                case message
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyCredentials`.
        public struct ModifyCredentials: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyCredentials/userId`.
            public var userId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ModifyCredentials/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ModifyCredentials/password`.
            public var password: Swift.String
            /// - Remark: Generated from `#/components/schemas/ModifyCredentials/currentPassword`.
            public var currentPassword: Swift.String
            /// Creates a new `ModifyCredentials`.
            ///
            /// - Parameters:
            ///   - userId:
            ///   - name:
            ///   - password:
            ///   - currentPassword:
            public init(
                userId: Swift.Int64? = nil,
                name: Swift.String,
                password: Swift.String,
                currentPassword: Swift.String
            ) {
                self.userId = userId
                self.name = name
                self.password = password
                self.currentPassword = currentPassword
            }
            public enum CodingKeys: String, CodingKey {
                case userId
                case name
                case password
                case currentPassword
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyEmailAddress`.
        public struct ModifyEmailAddress: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyEmailAddress/userId`.
            public var userId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ModifyEmailAddress/email`.
            public var email: Swift.String
            /// Creates a new `ModifyEmailAddress`.
            ///
            /// - Parameters:
            ///   - userId:
            ///   - email:
            public init(
                userId: Swift.Int64? = nil,
                email: Swift.String
            ) {
                self.userId = userId
                self.email = email
            }
            public enum CodingKeys: String, CodingKey {
                case userId
                case email
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyOrder`.
        public struct ModifyOrder: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/orderId`.
            public var orderId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/clOrdId`.
            public var clOrdId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/orderQty`.
            public var orderQty: Swift.Int32
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/orderType`.
            @frozen public enum orderTypePayload: String, Codable, Hashable, Sendable {
                case Limit = "Limit"
                case MIT = "MIT"
                case Market = "Market"
                case QTS = "QTS"
                case Stop = "Stop"
                case StopLimit = "StopLimit"
                case TrailingStop = "TrailingStop"
                case TrailingStopLimit = "TrailingStopLimit"
            }
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/orderType`.
            public var orderType: Components.Schemas.ModifyOrder.orderTypePayload
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/price`.
            public var price: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/stopPrice`.
            public var stopPrice: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/maxShow`.
            public var maxShow: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/pegDifference`.
            public var pegDifference: Swift.Double?
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/timeInForce`.
            @frozen public enum timeInForcePayload: String, Codable, Hashable, Sendable {
                case Day = "Day"
                case FOK = "FOK"
                case GTC = "GTC"
                case GTD = "GTD"
                case IOC = "IOC"
            }
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/timeInForce`.
            public var timeInForce: Components.Schemas.ModifyOrder.timeInForcePayload?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/expireTime`.
            public var expireTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/activationTime`.
            public var activationTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/customTag50`.
            public var customTag50: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ModifyOrder/isAutomated`.
            public var isAutomated: Swift.Bool?
            /// Creates a new `ModifyOrder`.
            ///
            /// - Parameters:
            ///   - orderId:
            ///   - clOrdId:
            ///   - orderQty:
            ///   - orderType: Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///   - price:
            ///   - stopPrice:
            ///   - maxShow:
            ///   - pegDifference:
            ///   - timeInForce: Day, FOK, GTC, GTD, IOC
            ///   - expireTime:
            ///   - text:
            ///   - activationTime:
            ///   - customTag50:
            ///   - isAutomated:
            public init(
                orderId: Swift.Int64,
                clOrdId: Swift.String? = nil,
                orderQty: Swift.Int32,
                orderType: Components.Schemas.ModifyOrder.orderTypePayload,
                price: Swift.Double? = nil,
                stopPrice: Swift.Double? = nil,
                maxShow: Swift.Int32? = nil,
                pegDifference: Swift.Double? = nil,
                timeInForce: Components.Schemas.ModifyOrder.timeInForcePayload? = nil,
                expireTime: Foundation.Date? = nil,
                text: Swift.String? = nil,
                activationTime: Foundation.Date? = nil,
                customTag50: Swift.String? = nil,
                isAutomated: Swift.Bool? = nil
            ) {
                self.orderId = orderId
                self.clOrdId = clOrdId
                self.orderQty = orderQty
                self.orderType = orderType
                self.price = price
                self.stopPrice = stopPrice
                self.maxShow = maxShow
                self.pegDifference = pegDifference
                self.timeInForce = timeInForce
                self.expireTime = expireTime
                self.text = text
                self.activationTime = activationTime
                self.customTag50 = customTag50
                self.isAutomated = isAutomated
            }
            public enum CodingKeys: String, CodingKey {
                case orderId
                case clOrdId
                case orderQty
                case orderType
                case price
                case stopPrice
                case maxShow
                case pegDifference
                case timeInForce
                case expireTime
                case text
                case activationTime
                case customTag50
                case isAutomated
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyOrderStrategy`.
        public struct ModifyOrderStrategy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyOrderStrategy/orderStrategyId`.
            public var orderStrategyId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ModifyOrderStrategy/command`.
            public var command: Swift.String
            /// - Remark: Generated from `#/components/schemas/ModifyOrderStrategy/customTag50`.
            public var customTag50: Swift.String?
            /// Creates a new `ModifyOrderStrategy`.
            ///
            /// - Parameters:
            ///   - orderStrategyId:
            ///   - command:
            ///   - customTag50:
            public init(
                orderStrategyId: Swift.Int64,
                command: Swift.String,
                customTag50: Swift.String? = nil
            ) {
                self.orderStrategyId = orderStrategyId
                self.command = command
                self.customTag50 = customTag50
            }
            public enum CodingKeys: String, CodingKey {
                case orderStrategyId
                case command
                case customTag50
            }
        }
        /// - Remark: Generated from `#/components/schemas/ModifyPassword`.
        public struct ModifyPassword: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ModifyPassword/userId`.
            public var userId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ModifyPassword/password`.
            public var password: Swift.String
            /// - Remark: Generated from `#/components/schemas/ModifyPassword/currentPassword`.
            public var currentPassword: Swift.String
            /// Creates a new `ModifyPassword`.
            ///
            /// - Parameters:
            ///   - userId:
            ///   - password:
            ///   - currentPassword:
            public init(
                userId: Swift.Int64? = nil,
                password: Swift.String,
                currentPassword: Swift.String
            ) {
                self.userId = userId
                self.password = password
                self.currentPassword = currentPassword
            }
            public enum CodingKeys: String, CodingKey {
                case userId
                case password
                case currentPassword
            }
        }
        /// - Remark: Generated from `#/components/schemas/OAuthMeResponse`.
        public struct OAuthMeResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/OAuthMeResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthMeResponse/userId`.
            public var userId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/OAuthMeResponse/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthMeResponse/fullName`.
            public var fullName: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthMeResponse/email`.
            public var email: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthMeResponse/emailVerified`.
            public var emailVerified: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/OAuthMeResponse/isTrial`.
            public var isTrial: Swift.Bool?
            /// Creates a new `OAuthMeResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - userId:
            ///   - name:
            ///   - fullName:
            ///   - email:
            ///   - emailVerified:
            ///   - isTrial:
            public init(
                errorText: Swift.String? = nil,
                userId: Swift.Int64? = nil,
                name: Swift.String? = nil,
                fullName: Swift.String? = nil,
                email: Swift.String? = nil,
                emailVerified: Swift.Bool? = nil,
                isTrial: Swift.Bool? = nil
            ) {
                self.errorText = errorText
                self.userId = userId
                self.name = name
                self.fullName = fullName
                self.email = email
                self.emailVerified = emailVerified
                self.isTrial = isTrial
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case userId
                case name
                case fullName
                case email
                case emailVerified
                case isTrial
            }
        }
        /// - Remark: Generated from `#/components/schemas/OAuthToken`.
        public struct OAuthToken: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OAuthToken/grant_type`.
            public var grant_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/OAuthToken/code`.
            public var code: Swift.String
            /// - Remark: Generated from `#/components/schemas/OAuthToken/redirect_uri`.
            public var redirect_uri: Swift.String
            /// - Remark: Generated from `#/components/schemas/OAuthToken/client_id`.
            public var client_id: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthToken/client_secret`.
            public var client_secret: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthToken/httpAuth`.
            public var httpAuth: Swift.String?
            /// Creates a new `OAuthToken`.
            ///
            /// - Parameters:
            ///   - grant_type:
            ///   - code:
            ///   - redirect_uri:
            ///   - client_id:
            ///   - client_secret:
            ///   - httpAuth:
            public init(
                grant_type: Swift.String,
                code: Swift.String,
                redirect_uri: Swift.String,
                client_id: Swift.String? = nil,
                client_secret: Swift.String? = nil,
                httpAuth: Swift.String? = nil
            ) {
                self.grant_type = grant_type
                self.code = code
                self.redirect_uri = redirect_uri
                self.client_id = client_id
                self.client_secret = client_secret
                self.httpAuth = httpAuth
            }
            public enum CodingKeys: String, CodingKey {
                case grant_type
                case code
                case redirect_uri
                case client_id
                case client_secret
                case httpAuth
            }
        }
        /// - Remark: Generated from `#/components/schemas/OAuthTokenResponse`.
        public struct OAuthTokenResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OAuthTokenResponse/access_token`.
            public var access_token: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthTokenResponse/token_type`.
            public var token_type: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthTokenResponse/expires_in`.
            public var expires_in: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/OAuthTokenResponse/error`.
            public var error: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OAuthTokenResponse/error_description`.
            public var error_description: Swift.String?
            /// Creates a new `OAuthTokenResponse`.
            ///
            /// - Parameters:
            ///   - access_token:
            ///   - token_type:
            ///   - expires_in:
            ///   - error:
            ///   - error_description:
            public init(
                access_token: Swift.String? = nil,
                token_type: Swift.String? = nil,
                expires_in: Swift.Int32? = nil,
                error: Swift.String? = nil,
                error_description: Swift.String? = nil
            ) {
                self.access_token = access_token
                self.token_type = token_type
                self.expires_in = expires_in
                self.error = error
                self.error_description = error_description
            }
            public enum CodingKeys: String, CodingKey {
                case access_token
                case token_type
                case expires_in
                case error
                case error_description
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpenDemoAccount`.
        public struct OpenDemoAccount: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OpenDemoAccount/templateAccountId`.
            public var templateAccountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/OpenDemoAccount/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenDemoAccount/initialBalance`.
            public var initialBalance: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/OpenDemoAccount/defaultAutoLiq`.
            public var defaultAutoLiq: Components.Schemas.UserAccountAutoLiq?
            /// Creates a new `OpenDemoAccount`.
            ///
            /// - Parameters:
            ///   - templateAccountId:
            ///   - name:
            ///   - initialBalance:
            ///   - defaultAutoLiq:
            public init(
                templateAccountId: Swift.Int64? = nil,
                name: Swift.String? = nil,
                initialBalance: Swift.Double? = nil,
                defaultAutoLiq: Components.Schemas.UserAccountAutoLiq? = nil
            ) {
                self.templateAccountId = templateAccountId
                self.name = name
                self.initialBalance = initialBalance
                self.defaultAutoLiq = defaultAutoLiq
            }
            public enum CodingKeys: String, CodingKey {
                case templateAccountId
                case name
                case initialBalance
                case defaultAutoLiq
            }
        }
        /// - Remark: Generated from `#/components/schemas/OpenDemoAccountResponse`.
        public struct OpenDemoAccountResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/OpenDemoAccountResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OpenDemoAccountResponse/accountId`.
            public var accountId: Swift.Int64?
            /// Creates a new `OpenDemoAccountResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - accountId:
            public init(
                errorText: Swift.String? = nil,
                accountId: Swift.Int64? = nil
            ) {
                self.errorText = errorText
                self.accountId = accountId
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case accountId
            }
        }
        /// - Remark: Generated from `#/components/schemas/Order`.
        public struct Order: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Order/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Order/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Order/contractId`.
            public var contractId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Order/spreadDefinitionId`.
            public var spreadDefinitionId: Swift.Int64?
            /// Create Time
            ///
            /// - Remark: Generated from `#/components/schemas/Order/timestamp`.
            public var timestamp: Foundation.Date
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/Order/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/Order/action`.
            public var action: Components.Schemas.Order.actionPayload
            /// Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            ///
            /// - Remark: Generated from `#/components/schemas/Order/ordStatus`.
            @frozen public enum ordStatusPayload: String, Codable, Hashable, Sendable {
                case Canceled = "Canceled"
                case Completed = "Completed"
                case Expired = "Expired"
                case Filled = "Filled"
                case PendingCancel = "PendingCancel"
                case PendingNew = "PendingNew"
                case PendingReplace = "PendingReplace"
                case Rejected = "Rejected"
                case Suspended = "Suspended"
                case Unknown = "Unknown"
                case Working = "Working"
            }
            /// Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            ///
            /// - Remark: Generated from `#/components/schemas/Order/ordStatus`.
            public var ordStatus: Components.Schemas.Order.ordStatusPayload
            /// - Remark: Generated from `#/components/schemas/Order/executionProviderId`.
            public var executionProviderId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Order/ocoId`.
            public var ocoId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Order/parentId`.
            public var parentId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Order/linkedId`.
            public var linkedId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Order/admin`.
            public var admin: Swift.Bool
            /// Creates a new `Order`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - contractId:
            ///   - spreadDefinitionId:
            ///   - timestamp: Create Time
            ///   - action: Buy, Sell
            ///   - ordStatus: Canceled, Completed, Expired, Filled, PendingCancel, PendingNew, PendingReplace, Rejected, Suspended, Unknown, Working
            ///   - executionProviderId:
            ///   - ocoId:
            ///   - parentId:
            ///   - linkedId:
            ///   - admin:
            public init(
                id: Swift.Int64? = nil,
                accountId: Swift.Int64,
                contractId: Swift.Int64? = nil,
                spreadDefinitionId: Swift.Int64? = nil,
                timestamp: Foundation.Date,
                action: Components.Schemas.Order.actionPayload,
                ordStatus: Components.Schemas.Order.ordStatusPayload,
                executionProviderId: Swift.Int64? = nil,
                ocoId: Swift.Int64? = nil,
                parentId: Swift.Int64? = nil,
                linkedId: Swift.Int64? = nil,
                admin: Swift.Bool
            ) {
                self.id = id
                self.accountId = accountId
                self.contractId = contractId
                self.spreadDefinitionId = spreadDefinitionId
                self.timestamp = timestamp
                self.action = action
                self.ordStatus = ordStatus
                self.executionProviderId = executionProviderId
                self.ocoId = ocoId
                self.parentId = parentId
                self.linkedId = linkedId
                self.admin = admin
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case accountId
                case contractId
                case spreadDefinitionId
                case timestamp
                case action
                case ordStatus
                case executionProviderId
                case ocoId
                case parentId
                case linkedId
                case admin
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderStrategy`.
        public struct OrderStrategy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/contractId`.
            public var contractId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/orderStrategyTypeId`.
            public var orderStrategyTypeId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/initiatorId`.
            public var initiatorId: Swift.Int64?
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/action`.
            public var action: Components.Schemas.OrderStrategy.actionPayload
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/params`.
            public var params: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/uuid`.
            public var uuid: Swift.String?
            /// ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser
            ///
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case ActiveStrategy = "ActiveStrategy"
                case ExecutionFailed = "ExecutionFailed"
                case ExecutionFinished = "ExecutionFinished"
                case ExecutionInterrupted = "ExecutionInterrupted"
                case InactiveStrategy = "InactiveStrategy"
                case NotEnoughLiquidity = "NotEnoughLiquidity"
                case StoppedByUser = "StoppedByUser"
            }
            /// ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser
            ///
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/status`.
            public var status: Components.Schemas.OrderStrategy.statusPayload
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/failureMessage`.
            public var failureMessage: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/senderId`.
            public var senderId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/customTag50`.
            public var customTag50: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OrderStrategy/userSessionId`.
            public var userSessionId: Swift.Int64?
            /// Creates a new `OrderStrategy`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - timestamp:
            ///   - contractId:
            ///   - orderStrategyTypeId:
            ///   - initiatorId:
            ///   - action: Buy, Sell
            ///   - params:
            ///   - uuid:
            ///   - status: ActiveStrategy, ExecutionFailed, ExecutionFinished, ExecutionInterrupted, InactiveStrategy, NotEnoughLiquidity, StoppedByUser
            ///   - failureMessage:
            ///   - senderId:
            ///   - customTag50:
            ///   - userSessionId:
            public init(
                id: Swift.Int64? = nil,
                accountId: Swift.Int64,
                timestamp: Foundation.Date,
                contractId: Swift.Int64,
                orderStrategyTypeId: Swift.Int64,
                initiatorId: Swift.Int64? = nil,
                action: Components.Schemas.OrderStrategy.actionPayload,
                params: Swift.String? = nil,
                uuid: Swift.String? = nil,
                status: Components.Schemas.OrderStrategy.statusPayload,
                failureMessage: Swift.String? = nil,
                senderId: Swift.Int64? = nil,
                customTag50: Swift.String? = nil,
                userSessionId: Swift.Int64? = nil
            ) {
                self.id = id
                self.accountId = accountId
                self.timestamp = timestamp
                self.contractId = contractId
                self.orderStrategyTypeId = orderStrategyTypeId
                self.initiatorId = initiatorId
                self.action = action
                self.params = params
                self.uuid = uuid
                self.status = status
                self.failureMessage = failureMessage
                self.senderId = senderId
                self.customTag50 = customTag50
                self.userSessionId = userSessionId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case accountId
                case timestamp
                case contractId
                case orderStrategyTypeId
                case initiatorId
                case action
                case params
                case uuid
                case status
                case failureMessage
                case senderId
                case customTag50
                case userSessionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderStrategyLink`.
        public struct OrderStrategyLink: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrderStrategyLink/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/OrderStrategyLink/orderStrategyId`.
            public var orderStrategyId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/OrderStrategyLink/orderId`.
            public var orderId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/OrderStrategyLink/label`.
            public var label: Swift.String
            /// Creates a new `OrderStrategyLink`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - orderStrategyId:
            ///   - orderId:
            ///   - label:
            public init(
                id: Swift.Int64? = nil,
                orderStrategyId: Swift.Int64,
                orderId: Swift.Int64,
                label: Swift.String
            ) {
                self.id = id
                self.orderStrategyId = orderStrategyId
                self.orderId = orderId
                self.label = label
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case orderStrategyId
                case orderId
                case label
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderStrategyStatusResponse`.
        public struct OrderStrategyStatusResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/OrderStrategyStatusResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/OrderStrategyStatusResponse/orderStrategy`.
            public var orderStrategy: Components.Schemas.OrderStrategy?
            /// Creates a new `OrderStrategyStatusResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - orderStrategy:
            public init(
                errorText: Swift.String? = nil,
                orderStrategy: Components.Schemas.OrderStrategy? = nil
            ) {
                self.errorText = errorText
                self.orderStrategy = orderStrategy
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case orderStrategy
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderStrategyType`.
        public struct OrderStrategyType: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrderStrategyType/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/OrderStrategyType/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/OrderStrategyType/enabled`.
            public var enabled: Swift.Bool
            /// Creates a new `OrderStrategyType`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - enabled:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                enabled: Swift.Bool
            ) {
                self.id = id
                self.name = name
                self.enabled = enabled
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case enabled
            }
        }
        /// - Remark: Generated from `#/components/schemas/OrderVersion`.
        public struct OrderVersion: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OrderVersion/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/OrderVersion/orderId`.
            public var orderId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/OrderVersion/orderQty`.
            public var orderQty: Swift.Int32
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/OrderVersion/orderType`.
            @frozen public enum orderTypePayload: String, Codable, Hashable, Sendable {
                case Limit = "Limit"
                case MIT = "MIT"
                case Market = "Market"
                case QTS = "QTS"
                case Stop = "Stop"
                case StopLimit = "StopLimit"
                case TrailingStop = "TrailingStop"
                case TrailingStopLimit = "TrailingStopLimit"
            }
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/OrderVersion/orderType`.
            public var orderType: Components.Schemas.OrderVersion.orderTypePayload
            /// - Remark: Generated from `#/components/schemas/OrderVersion/price`.
            public var price: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/OrderVersion/stopPrice`.
            public var stopPrice: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/OrderVersion/maxShow`.
            public var maxShow: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/OrderVersion/pegDifference`.
            public var pegDifference: Swift.Double?
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/OrderVersion/timeInForce`.
            @frozen public enum timeInForcePayload: String, Codable, Hashable, Sendable {
                case Day = "Day"
                case FOK = "FOK"
                case GTC = "GTC"
                case GTD = "GTD"
                case IOC = "IOC"
            }
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/OrderVersion/timeInForce`.
            public var timeInForce: Components.Schemas.OrderVersion.timeInForcePayload?
            /// - Remark: Generated from `#/components/schemas/OrderVersion/expireTime`.
            public var expireTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/OrderVersion/text`.
            public var text: Swift.String?
            /// Creates a new `OrderVersion`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - orderId:
            ///   - orderQty:
            ///   - orderType: Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///   - price:
            ///   - stopPrice:
            ///   - maxShow:
            ///   - pegDifference:
            ///   - timeInForce: Day, FOK, GTC, GTD, IOC
            ///   - expireTime:
            ///   - text:
            public init(
                id: Swift.Int64? = nil,
                orderId: Swift.Int64,
                orderQty: Swift.Int32,
                orderType: Components.Schemas.OrderVersion.orderTypePayload,
                price: Swift.Double? = nil,
                stopPrice: Swift.Double? = nil,
                maxShow: Swift.Int32? = nil,
                pegDifference: Swift.Double? = nil,
                timeInForce: Components.Schemas.OrderVersion.timeInForcePayload? = nil,
                expireTime: Foundation.Date? = nil,
                text: Swift.String? = nil
            ) {
                self.id = id
                self.orderId = orderId
                self.orderQty = orderQty
                self.orderType = orderType
                self.price = price
                self.stopPrice = stopPrice
                self.maxShow = maxShow
                self.pegDifference = pegDifference
                self.timeInForce = timeInForce
                self.expireTime = expireTime
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case orderId
                case orderQty
                case orderType
                case price
                case stopPrice
                case maxShow
                case pegDifference
                case timeInForce
                case expireTime
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/Organization`.
        public struct Organization: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Organization/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Organization/name`.
            public var name: Swift.String
            /// Creates a new `Organization`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String
            ) {
                self.id = id
                self.name = name
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaceOCO`.
        public struct PlaceOCO: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/accountSpec`.
            public var accountSpec: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/clOrdId`.
            public var clOrdId: Swift.String?
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/action`.
            public var action: Components.Schemas.PlaceOCO.actionPayload
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/symbol`.
            public var symbol: Swift.String
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/orderQty`.
            public var orderQty: Swift.Int32
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/orderType`.
            @frozen public enum orderTypePayload: String, Codable, Hashable, Sendable {
                case Limit = "Limit"
                case MIT = "MIT"
                case Market = "Market"
                case QTS = "QTS"
                case Stop = "Stop"
                case StopLimit = "StopLimit"
                case TrailingStop = "TrailingStop"
                case TrailingStopLimit = "TrailingStopLimit"
            }
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/orderType`.
            public var orderType: Components.Schemas.PlaceOCO.orderTypePayload
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/price`.
            public var price: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/stopPrice`.
            public var stopPrice: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/maxShow`.
            public var maxShow: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/pegDifference`.
            public var pegDifference: Swift.Double?
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/timeInForce`.
            @frozen public enum timeInForcePayload: String, Codable, Hashable, Sendable {
                case Day = "Day"
                case FOK = "FOK"
                case GTC = "GTC"
                case GTD = "GTD"
                case IOC = "IOC"
            }
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/timeInForce`.
            public var timeInForce: Components.Schemas.PlaceOCO.timeInForcePayload?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/expireTime`.
            public var expireTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/activationTime`.
            public var activationTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/customTag50`.
            public var customTag50: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/isAutomated`.
            public var isAutomated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PlaceOCO/other`.
            public var other: Components.Schemas.RestrainedOrderVersion
            /// Creates a new `PlaceOCO`.
            ///
            /// - Parameters:
            ///   - accountSpec:
            ///   - accountId:
            ///   - clOrdId:
            ///   - action: Buy, Sell
            ///   - symbol:
            ///   - orderQty:
            ///   - orderType: Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///   - price:
            ///   - stopPrice:
            ///   - maxShow:
            ///   - pegDifference:
            ///   - timeInForce: Day, FOK, GTC, GTD, IOC
            ///   - expireTime:
            ///   - text:
            ///   - activationTime:
            ///   - customTag50:
            ///   - isAutomated:
            ///   - other:
            public init(
                accountSpec: Swift.String? = nil,
                accountId: Swift.Int64? = nil,
                clOrdId: Swift.String? = nil,
                action: Components.Schemas.PlaceOCO.actionPayload,
                symbol: Swift.String,
                orderQty: Swift.Int32,
                orderType: Components.Schemas.PlaceOCO.orderTypePayload,
                price: Swift.Double? = nil,
                stopPrice: Swift.Double? = nil,
                maxShow: Swift.Int32? = nil,
                pegDifference: Swift.Double? = nil,
                timeInForce: Components.Schemas.PlaceOCO.timeInForcePayload? = nil,
                expireTime: Foundation.Date? = nil,
                text: Swift.String? = nil,
                activationTime: Foundation.Date? = nil,
                customTag50: Swift.String? = nil,
                isAutomated: Swift.Bool? = nil,
                other: Components.Schemas.RestrainedOrderVersion
            ) {
                self.accountSpec = accountSpec
                self.accountId = accountId
                self.clOrdId = clOrdId
                self.action = action
                self.symbol = symbol
                self.orderQty = orderQty
                self.orderType = orderType
                self.price = price
                self.stopPrice = stopPrice
                self.maxShow = maxShow
                self.pegDifference = pegDifference
                self.timeInForce = timeInForce
                self.expireTime = expireTime
                self.text = text
                self.activationTime = activationTime
                self.customTag50 = customTag50
                self.isAutomated = isAutomated
                self.other = other
            }
            public enum CodingKeys: String, CodingKey {
                case accountSpec
                case accountId
                case clOrdId
                case action
                case symbol
                case orderQty
                case orderType
                case price
                case stopPrice
                case maxShow
                case pegDifference
                case timeInForce
                case expireTime
                case text
                case activationTime
                case customTag50
                case isAutomated
                case other
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaceOSO`.
        public struct PlaceOSO: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/accountSpec`.
            public var accountSpec: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/clOrdId`.
            public var clOrdId: Swift.String?
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/action`.
            public var action: Components.Schemas.PlaceOSO.actionPayload
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/symbol`.
            public var symbol: Swift.String
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/orderQty`.
            public var orderQty: Swift.Int32
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/orderType`.
            @frozen public enum orderTypePayload: String, Codable, Hashable, Sendable {
                case Limit = "Limit"
                case MIT = "MIT"
                case Market = "Market"
                case QTS = "QTS"
                case Stop = "Stop"
                case StopLimit = "StopLimit"
                case TrailingStop = "TrailingStop"
                case TrailingStopLimit = "TrailingStopLimit"
            }
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/orderType`.
            public var orderType: Components.Schemas.PlaceOSO.orderTypePayload
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/price`.
            public var price: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/stopPrice`.
            public var stopPrice: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/maxShow`.
            public var maxShow: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/pegDifference`.
            public var pegDifference: Swift.Double?
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/timeInForce`.
            @frozen public enum timeInForcePayload: String, Codable, Hashable, Sendable {
                case Day = "Day"
                case FOK = "FOK"
                case GTC = "GTC"
                case GTD = "GTD"
                case IOC = "IOC"
            }
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/timeInForce`.
            public var timeInForce: Components.Schemas.PlaceOSO.timeInForcePayload?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/expireTime`.
            public var expireTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/activationTime`.
            public var activationTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/customTag50`.
            public var customTag50: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/isAutomated`.
            public var isAutomated: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/bracket1`.
            public var bracket1: Components.Schemas.RestrainedOrderVersion
            /// - Remark: Generated from `#/components/schemas/PlaceOSO/bracket2`.
            public var bracket2: Components.Schemas.RestrainedOrderVersion?
            /// Creates a new `PlaceOSO`.
            ///
            /// - Parameters:
            ///   - accountSpec:
            ///   - accountId:
            ///   - clOrdId:
            ///   - action: Buy, Sell
            ///   - symbol:
            ///   - orderQty:
            ///   - orderType: Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///   - price:
            ///   - stopPrice:
            ///   - maxShow:
            ///   - pegDifference:
            ///   - timeInForce: Day, FOK, GTC, GTD, IOC
            ///   - expireTime:
            ///   - text:
            ///   - activationTime:
            ///   - customTag50:
            ///   - isAutomated:
            ///   - bracket1:
            ///   - bracket2:
            public init(
                accountSpec: Swift.String? = nil,
                accountId: Swift.Int64? = nil,
                clOrdId: Swift.String? = nil,
                action: Components.Schemas.PlaceOSO.actionPayload,
                symbol: Swift.String,
                orderQty: Swift.Int32,
                orderType: Components.Schemas.PlaceOSO.orderTypePayload,
                price: Swift.Double? = nil,
                stopPrice: Swift.Double? = nil,
                maxShow: Swift.Int32? = nil,
                pegDifference: Swift.Double? = nil,
                timeInForce: Components.Schemas.PlaceOSO.timeInForcePayload? = nil,
                expireTime: Foundation.Date? = nil,
                text: Swift.String? = nil,
                activationTime: Foundation.Date? = nil,
                customTag50: Swift.String? = nil,
                isAutomated: Swift.Bool? = nil,
                bracket1: Components.Schemas.RestrainedOrderVersion,
                bracket2: Components.Schemas.RestrainedOrderVersion? = nil
            ) {
                self.accountSpec = accountSpec
                self.accountId = accountId
                self.clOrdId = clOrdId
                self.action = action
                self.symbol = symbol
                self.orderQty = orderQty
                self.orderType = orderType
                self.price = price
                self.stopPrice = stopPrice
                self.maxShow = maxShow
                self.pegDifference = pegDifference
                self.timeInForce = timeInForce
                self.expireTime = expireTime
                self.text = text
                self.activationTime = activationTime
                self.customTag50 = customTag50
                self.isAutomated = isAutomated
                self.bracket1 = bracket1
                self.bracket2 = bracket2
            }
            public enum CodingKeys: String, CodingKey {
                case accountSpec
                case accountId
                case clOrdId
                case action
                case symbol
                case orderQty
                case orderType
                case price
                case stopPrice
                case maxShow
                case pegDifference
                case timeInForce
                case expireTime
                case text
                case activationTime
                case customTag50
                case isAutomated
                case bracket1
                case bracket2
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaceOcoResult`.
        public struct PlaceOcoResult: Codable, Hashable, Sendable {
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOcoResult/failureReason`.
            @frozen public enum failureReasonPayload: String, Codable, Hashable, Sendable {
                case AccountClosed = "AccountClosed"
                case AdvancedTrailingStopUnsupported = "AdvancedTrailingStopUnsupported"
                case AnotherCommandPending = "AnotherCommandPending"
                case BackMonthProhibited = "BackMonthProhibited"
                case ExecutionProviderNotConfigured = "ExecutionProviderNotConfigured"
                case ExecutionProviderUnavailable = "ExecutionProviderUnavailable"
                case InvalidContract = "InvalidContract"
                case InvalidPrice = "InvalidPrice"
                case LiquidationOnly = "LiquidationOnly"
                case LiquidationOnlyBeforeExpiration = "LiquidationOnlyBeforeExpiration"
                case MaxOrderQtyIsNotSpecified = "MaxOrderQtyIsNotSpecified"
                case MaxOrderQtyLimitReached = "MaxOrderQtyLimitReached"
                case MaxPosLimitMisconfigured = "MaxPosLimitMisconfigured"
                case MaxPosLimitReached = "MaxPosLimitReached"
                case MaxTotalPosLimitReached = "MaxTotalPosLimitReached"
                case MultipleAccountPlanRequired = "MultipleAccountPlanRequired"
                case NoQuote = "NoQuote"
                case NotEnoughLiquidity = "NotEnoughLiquidity"
                case OtherExecutionRelated = "OtherExecutionRelated"
                case ParentRejected = "ParentRejected"
                case RiskCheckTimeout = "RiskCheckTimeout"
                case SessionClosed = "SessionClosed"
                case Success = "Success"
                case TooLate = "TooLate"
                case TradingLocked = "TradingLocked"
                case TrailingStopNonOrderQtyModify = "TrailingStopNonOrderQtyModify"
                case Unauthorized = "Unauthorized"
                case UnknownReason = "UnknownReason"
                case Unsupported = "Unsupported"
            }
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOcoResult/failureReason`.
            public var failureReason: Components.Schemas.PlaceOcoResult.failureReasonPayload?
            /// - Remark: Generated from `#/components/schemas/PlaceOcoResult/failureText`.
            public var failureText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOcoResult/orderId`.
            public var orderId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/PlaceOcoResult/ocoId`.
            public var ocoId: Swift.Int64?
            /// Creates a new `PlaceOcoResult`.
            ///
            /// - Parameters:
            ///   - failureReason: AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///   - failureText:
            ///   - orderId:
            ///   - ocoId:
            public init(
                failureReason: Components.Schemas.PlaceOcoResult.failureReasonPayload? = nil,
                failureText: Swift.String? = nil,
                orderId: Swift.Int64? = nil,
                ocoId: Swift.Int64? = nil
            ) {
                self.failureReason = failureReason
                self.failureText = failureText
                self.orderId = orderId
                self.ocoId = ocoId
            }
            public enum CodingKeys: String, CodingKey {
                case failureReason
                case failureText
                case orderId
                case ocoId
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaceOrder`.
        public struct PlaceOrder: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/accountSpec`.
            public var accountSpec: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/clOrdId`.
            public var clOrdId: Swift.String?
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/action`.
            public var action: Components.Schemas.PlaceOrder.actionPayload
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/symbol`.
            public var symbol: Swift.String
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/orderQty`.
            public var orderQty: Swift.Int32
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/orderType`.
            @frozen public enum orderTypePayload: String, Codable, Hashable, Sendable {
                case Limit = "Limit"
                case MIT = "MIT"
                case Market = "Market"
                case QTS = "QTS"
                case Stop = "Stop"
                case StopLimit = "StopLimit"
                case TrailingStop = "TrailingStop"
                case TrailingStopLimit = "TrailingStopLimit"
            }
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/orderType`.
            public var orderType: Components.Schemas.PlaceOrder.orderTypePayload
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/price`.
            public var price: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/stopPrice`.
            public var stopPrice: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/maxShow`.
            public var maxShow: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/pegDifference`.
            public var pegDifference: Swift.Double?
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/timeInForce`.
            @frozen public enum timeInForcePayload: String, Codable, Hashable, Sendable {
                case Day = "Day"
                case FOK = "FOK"
                case GTC = "GTC"
                case GTD = "GTD"
                case IOC = "IOC"
            }
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/timeInForce`.
            public var timeInForce: Components.Schemas.PlaceOrder.timeInForcePayload?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/expireTime`.
            public var expireTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/text`.
            public var text: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/activationTime`.
            public var activationTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/customTag50`.
            public var customTag50: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOrder/isAutomated`.
            public var isAutomated: Swift.Bool?
            /// Creates a new `PlaceOrder`.
            ///
            /// - Parameters:
            ///   - accountSpec:
            ///   - accountId:
            ///   - clOrdId:
            ///   - action: Buy, Sell
            ///   - symbol:
            ///   - orderQty:
            ///   - orderType: Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///   - price:
            ///   - stopPrice:
            ///   - maxShow:
            ///   - pegDifference:
            ///   - timeInForce: Day, FOK, GTC, GTD, IOC
            ///   - expireTime:
            ///   - text:
            ///   - activationTime:
            ///   - customTag50:
            ///   - isAutomated:
            public init(
                accountSpec: Swift.String? = nil,
                accountId: Swift.Int64? = nil,
                clOrdId: Swift.String? = nil,
                action: Components.Schemas.PlaceOrder.actionPayload,
                symbol: Swift.String,
                orderQty: Swift.Int32,
                orderType: Components.Schemas.PlaceOrder.orderTypePayload,
                price: Swift.Double? = nil,
                stopPrice: Swift.Double? = nil,
                maxShow: Swift.Int32? = nil,
                pegDifference: Swift.Double? = nil,
                timeInForce: Components.Schemas.PlaceOrder.timeInForcePayload? = nil,
                expireTime: Foundation.Date? = nil,
                text: Swift.String? = nil,
                activationTime: Foundation.Date? = nil,
                customTag50: Swift.String? = nil,
                isAutomated: Swift.Bool? = nil
            ) {
                self.accountSpec = accountSpec
                self.accountId = accountId
                self.clOrdId = clOrdId
                self.action = action
                self.symbol = symbol
                self.orderQty = orderQty
                self.orderType = orderType
                self.price = price
                self.stopPrice = stopPrice
                self.maxShow = maxShow
                self.pegDifference = pegDifference
                self.timeInForce = timeInForce
                self.expireTime = expireTime
                self.text = text
                self.activationTime = activationTime
                self.customTag50 = customTag50
                self.isAutomated = isAutomated
            }
            public enum CodingKeys: String, CodingKey {
                case accountSpec
                case accountId
                case clOrdId
                case action
                case symbol
                case orderQty
                case orderType
                case price
                case stopPrice
                case maxShow
                case pegDifference
                case timeInForce
                case expireTime
                case text
                case activationTime
                case customTag50
                case isAutomated
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaceOrderResult`.
        public struct PlaceOrderResult: Codable, Hashable, Sendable {
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOrderResult/failureReason`.
            @frozen public enum failureReasonPayload: String, Codable, Hashable, Sendable {
                case AccountClosed = "AccountClosed"
                case AdvancedTrailingStopUnsupported = "AdvancedTrailingStopUnsupported"
                case AnotherCommandPending = "AnotherCommandPending"
                case BackMonthProhibited = "BackMonthProhibited"
                case ExecutionProviderNotConfigured = "ExecutionProviderNotConfigured"
                case ExecutionProviderUnavailable = "ExecutionProviderUnavailable"
                case InvalidContract = "InvalidContract"
                case InvalidPrice = "InvalidPrice"
                case LiquidationOnly = "LiquidationOnly"
                case LiquidationOnlyBeforeExpiration = "LiquidationOnlyBeforeExpiration"
                case MaxOrderQtyIsNotSpecified = "MaxOrderQtyIsNotSpecified"
                case MaxOrderQtyLimitReached = "MaxOrderQtyLimitReached"
                case MaxPosLimitMisconfigured = "MaxPosLimitMisconfigured"
                case MaxPosLimitReached = "MaxPosLimitReached"
                case MaxTotalPosLimitReached = "MaxTotalPosLimitReached"
                case MultipleAccountPlanRequired = "MultipleAccountPlanRequired"
                case NoQuote = "NoQuote"
                case NotEnoughLiquidity = "NotEnoughLiquidity"
                case OtherExecutionRelated = "OtherExecutionRelated"
                case ParentRejected = "ParentRejected"
                case RiskCheckTimeout = "RiskCheckTimeout"
                case SessionClosed = "SessionClosed"
                case Success = "Success"
                case TooLate = "TooLate"
                case TradingLocked = "TradingLocked"
                case TrailingStopNonOrderQtyModify = "TrailingStopNonOrderQtyModify"
                case Unauthorized = "Unauthorized"
                case UnknownReason = "UnknownReason"
                case Unsupported = "Unsupported"
            }
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOrderResult/failureReason`.
            public var failureReason: Components.Schemas.PlaceOrderResult.failureReasonPayload?
            /// - Remark: Generated from `#/components/schemas/PlaceOrderResult/failureText`.
            public var failureText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOrderResult/orderId`.
            public var orderId: Swift.Int64?
            /// Creates a new `PlaceOrderResult`.
            ///
            /// - Parameters:
            ///   - failureReason: AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///   - failureText:
            ///   - orderId:
            public init(
                failureReason: Components.Schemas.PlaceOrderResult.failureReasonPayload? = nil,
                failureText: Swift.String? = nil,
                orderId: Swift.Int64? = nil
            ) {
                self.failureReason = failureReason
                self.failureText = failureText
                self.orderId = orderId
            }
            public enum CodingKeys: String, CodingKey {
                case failureReason
                case failureText
                case orderId
            }
        }
        /// - Remark: Generated from `#/components/schemas/PlaceOsoResult`.
        public struct PlaceOsoResult: Codable, Hashable, Sendable {
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOsoResult/failureReason`.
            @frozen public enum failureReasonPayload: String, Codable, Hashable, Sendable {
                case AccountClosed = "AccountClosed"
                case AdvancedTrailingStopUnsupported = "AdvancedTrailingStopUnsupported"
                case AnotherCommandPending = "AnotherCommandPending"
                case BackMonthProhibited = "BackMonthProhibited"
                case ExecutionProviderNotConfigured = "ExecutionProviderNotConfigured"
                case ExecutionProviderUnavailable = "ExecutionProviderUnavailable"
                case InvalidContract = "InvalidContract"
                case InvalidPrice = "InvalidPrice"
                case LiquidationOnly = "LiquidationOnly"
                case LiquidationOnlyBeforeExpiration = "LiquidationOnlyBeforeExpiration"
                case MaxOrderQtyIsNotSpecified = "MaxOrderQtyIsNotSpecified"
                case MaxOrderQtyLimitReached = "MaxOrderQtyLimitReached"
                case MaxPosLimitMisconfigured = "MaxPosLimitMisconfigured"
                case MaxPosLimitReached = "MaxPosLimitReached"
                case MaxTotalPosLimitReached = "MaxTotalPosLimitReached"
                case MultipleAccountPlanRequired = "MultipleAccountPlanRequired"
                case NoQuote = "NoQuote"
                case NotEnoughLiquidity = "NotEnoughLiquidity"
                case OtherExecutionRelated = "OtherExecutionRelated"
                case ParentRejected = "ParentRejected"
                case RiskCheckTimeout = "RiskCheckTimeout"
                case SessionClosed = "SessionClosed"
                case Success = "Success"
                case TooLate = "TooLate"
                case TradingLocked = "TradingLocked"
                case TrailingStopNonOrderQtyModify = "TrailingStopNonOrderQtyModify"
                case Unauthorized = "Unauthorized"
                case UnknownReason = "UnknownReason"
                case Unsupported = "Unsupported"
            }
            /// AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///
            /// - Remark: Generated from `#/components/schemas/PlaceOsoResult/failureReason`.
            public var failureReason: Components.Schemas.PlaceOsoResult.failureReasonPayload?
            /// - Remark: Generated from `#/components/schemas/PlaceOsoResult/failureText`.
            public var failureText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/PlaceOsoResult/orderId`.
            public var orderId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/PlaceOsoResult/oso1Id`.
            public var oso1Id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/PlaceOsoResult/oso2Id`.
            public var oso2Id: Swift.Int64?
            /// Creates a new `PlaceOsoResult`.
            ///
            /// - Parameters:
            ///   - failureReason: AccountClosed, AdvancedTrailingStopUnsupported, AnotherCommandPending, BackMonthProhibited, ExecutionProviderNotConfigured, ExecutionProviderUnavailable, InvalidContract, InvalidPrice, LiquidationOnly, LiquidationOnlyBeforeExpiration, MaxOrderQtyIsNotSpecified, MaxOrderQtyLimitReached, MaxPosLimitMisconfigured, MaxPosLimitReached, MaxTotalPosLimitReached, MultipleAccountPlanRequired, NoQuote, NotEnoughLiquidity, OtherExecutionRelated, ParentRejected, RiskCheckTimeout, SessionClosed, Success, TooLate, TradingLocked, TrailingStopNonOrderQtyModify, Unauthorized, UnknownReason, Unsupported
            ///   - failureText:
            ///   - orderId:
            ///   - oso1Id:
            ///   - oso2Id:
            public init(
                failureReason: Components.Schemas.PlaceOsoResult.failureReasonPayload? = nil,
                failureText: Swift.String? = nil,
                orderId: Swift.Int64? = nil,
                oso1Id: Swift.Int64? = nil,
                oso2Id: Swift.Int64? = nil
            ) {
                self.failureReason = failureReason
                self.failureText = failureText
                self.orderId = orderId
                self.oso1Id = oso1Id
                self.oso2Id = oso2Id
            }
            public enum CodingKeys: String, CodingKey {
                case failureReason
                case failureText
                case orderId
                case oso1Id
                case oso2Id
            }
        }
        /// - Remark: Generated from `#/components/schemas/Position`.
        public struct Position: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Position/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Position/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Position/contractId`.
            public var contractId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Position/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/Position/tradeDate`.
            public var tradeDate: Components.Schemas.TradeDate
            /// - Remark: Generated from `#/components/schemas/Position/netPos`.
            public var netPos: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/Position/netPrice`.
            public var netPrice: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/Position/bought`.
            public var bought: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/Position/boughtValue`.
            public var boughtValue: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Position/sold`.
            public var sold: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/Position/soldValue`.
            public var soldValue: Swift.Double
            /// - Remark: Generated from `#/components/schemas/Position/prevPos`.
            public var prevPos: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/Position/prevPrice`.
            public var prevPrice: Swift.Double?
            /// Creates a new `Position`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - accountId:
            ///   - contractId:
            ///   - timestamp:
            ///   - tradeDate:
            ///   - netPos:
            ///   - netPrice:
            ///   - bought:
            ///   - boughtValue:
            ///   - sold:
            ///   - soldValue:
            ///   - prevPos:
            ///   - prevPrice:
            public init(
                id: Swift.Int64? = nil,
                accountId: Swift.Int64,
                contractId: Swift.Int64,
                timestamp: Foundation.Date,
                tradeDate: Components.Schemas.TradeDate,
                netPos: Swift.Int32,
                netPrice: Swift.Double? = nil,
                bought: Swift.Int32,
                boughtValue: Swift.Double,
                sold: Swift.Int32,
                soldValue: Swift.Double,
                prevPos: Swift.Int32,
                prevPrice: Swift.Double? = nil
            ) {
                self.id = id
                self.accountId = accountId
                self.contractId = contractId
                self.timestamp = timestamp
                self.tradeDate = tradeDate
                self.netPos = netPos
                self.netPrice = netPrice
                self.bought = bought
                self.boughtValue = boughtValue
                self.sold = sold
                self.soldValue = soldValue
                self.prevPos = prevPos
                self.prevPrice = prevPrice
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case accountId
                case contractId
                case timestamp
                case tradeDate
                case netPos
                case netPrice
                case bought
                case boughtValue
                case sold
                case soldValue
                case prevPos
                case prevPrice
            }
        }
        /// - Remark: Generated from `#/components/schemas/PostChatMessage`.
        public struct PostChatMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PostChatMessage/userId`.
            public var userId: Swift.Int64?
            /// Support, TradeDesk
            ///
            /// - Remark: Generated from `#/components/schemas/PostChatMessage/category`.
            @frozen public enum categoryPayload: String, Codable, Hashable, Sendable {
                case Support = "Support"
                case TradeDesk = "TradeDesk"
            }
            /// Support, TradeDesk
            ///
            /// - Remark: Generated from `#/components/schemas/PostChatMessage/category`.
            public var category: Components.Schemas.PostChatMessage.categoryPayload
            /// - Remark: Generated from `#/components/schemas/PostChatMessage/text`.
            public var text: Swift.String
            /// Creates a new `PostChatMessage`.
            ///
            /// - Parameters:
            ///   - userId:
            ///   - category: Support, TradeDesk
            ///   - text:
            public init(
                userId: Swift.Int64? = nil,
                category: Components.Schemas.PostChatMessage.categoryPayload,
                text: Swift.String
            ) {
                self.userId = userId
                self.category = category
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case userId
                case category
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/Product`.
        public struct Product: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Product/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Product/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/Product/currencyId`.
            public var currencyId: Swift.Int64
            /// CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///
            /// - Remark: Generated from `#/components/schemas/Product/productType`.
            @frozen public enum productTypePayload: String, Codable, Hashable, Sendable {
                case CommonStock = "CommonStock"
                case Continuous = "Continuous"
                case Cryptocurrency = "Cryptocurrency"
                case Futures = "Futures"
                case MarketInternals = "MarketInternals"
                case Options = "Options"
                case Spread = "Spread"
            }
            /// CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///
            /// - Remark: Generated from `#/components/schemas/Product/productType`.
            public var productType: Components.Schemas.Product.productTypePayload
            /// - Remark: Generated from `#/components/schemas/Product/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/Product/exchangeId`.
            public var exchangeId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Product/contractGroupId`.
            public var contractGroupId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Product/riskDiscountContractGroupId`.
            public var riskDiscountContractGroupId: Swift.Int64?
            /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///
            /// - Remark: Generated from `#/components/schemas/Product/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case Inactive = "Inactive"
                case Locked = "Locked"
                case ReadyForContracts = "ReadyForContracts"
                case ReadyToTrade = "ReadyToTrade"
                case Verified = "Verified"
            }
            /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///
            /// - Remark: Generated from `#/components/schemas/Product/status`.
            public var status: Components.Schemas.Product.statusPayload
            /// - Remark: Generated from `#/components/schemas/Product/months`.
            public var months: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Product/isSecured`.
            public var isSecured: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Product/valuePerPoint`.
            public var valuePerPoint: Swift.Double
            /// Decimal, Fractional
            ///
            /// - Remark: Generated from `#/components/schemas/Product/priceFormatType`.
            @frozen public enum priceFormatTypePayload: String, Codable, Hashable, Sendable {
                case Decimal = "Decimal"
                case Fractional = "Fractional"
            }
            /// Decimal, Fractional
            ///
            /// - Remark: Generated from `#/components/schemas/Product/priceFormatType`.
            public var priceFormatType: Components.Schemas.Product.priceFormatTypePayload
            /// - Remark: Generated from `#/components/schemas/Product/priceFormat`.
            public var priceFormat: Swift.Int32
            /// Product Tick Size
            ///
            /// - Remark: Generated from `#/components/schemas/Product/tickSize`.
            public var tickSize: Swift.Double
            /// Creates a new `Product`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - currencyId:
            ///   - productType: CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///   - description:
            ///   - exchangeId:
            ///   - contractGroupId:
            ///   - riskDiscountContractGroupId:
            ///   - status: Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///   - months:
            ///   - isSecured:
            ///   - valuePerPoint:
            ///   - priceFormatType: Decimal, Fractional
            ///   - priceFormat:
            ///   - tickSize: Product Tick Size
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                currencyId: Swift.Int64,
                productType: Components.Schemas.Product.productTypePayload,
                description: Swift.String,
                exchangeId: Swift.Int64,
                contractGroupId: Swift.Int64,
                riskDiscountContractGroupId: Swift.Int64? = nil,
                status: Components.Schemas.Product.statusPayload,
                months: Swift.String? = nil,
                isSecured: Swift.Bool? = nil,
                valuePerPoint: Swift.Double,
                priceFormatType: Components.Schemas.Product.priceFormatTypePayload,
                priceFormat: Swift.Int32,
                tickSize: Swift.Double
            ) {
                self.id = id
                self.name = name
                self.currencyId = currencyId
                self.productType = productType
                self.description = description
                self.exchangeId = exchangeId
                self.contractGroupId = contractGroupId
                self.riskDiscountContractGroupId = riskDiscountContractGroupId
                self.status = status
                self.months = months
                self.isSecured = isSecured
                self.valuePerPoint = valuePerPoint
                self.priceFormatType = priceFormatType
                self.priceFormat = priceFormat
                self.tickSize = tickSize
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case currencyId
                case productType
                case description
                case exchangeId
                case contractGroupId
                case riskDiscountContractGroupId
                case status
                case months
                case isSecured
                case valuePerPoint
                case priceFormatType
                case priceFormat
                case tickSize
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProductFeeParams`.
        public struct ProductFeeParams: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/clearingFee`.
            public var clearingFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/clearingCurrencyId`.
            public var clearingCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/exchangeFee`.
            public var exchangeFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/exchangeCurrencyId`.
            public var exchangeCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/nfaFee`.
            public var nfaFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/nfaCurrencyId`.
            public var nfaCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/brokerageFee`.
            public var brokerageFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/brokerageCurrencyId`.
            public var brokerageCurrencyId: Swift.Int64?
            /// IP/TT Fee
            ///
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/ipFee`.
            public var ipFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/ipCurrencyId`.
            public var ipCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/commission`.
            public var commission: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/commissionCurrencyId`.
            public var commissionCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/orderRoutingFee`.
            public var orderRoutingFee: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/orderRoutingCurrencyId`.
            public var orderRoutingCurrencyId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/productId`.
            public var productId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/dayMargin`.
            public var dayMargin: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/nightMargin`.
            public var nightMargin: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/ProductFeeParams/fullMargin`.
            public var fullMargin: Components.Schemas.ProductMargin?
            /// Creates a new `ProductFeeParams`.
            ///
            /// - Parameters:
            ///   - clearingFee:
            ///   - clearingCurrencyId:
            ///   - exchangeFee:
            ///   - exchangeCurrencyId:
            ///   - nfaFee:
            ///   - nfaCurrencyId:
            ///   - brokerageFee:
            ///   - brokerageCurrencyId:
            ///   - ipFee: IP/TT Fee
            ///   - ipCurrencyId:
            ///   - commission:
            ///   - commissionCurrencyId:
            ///   - orderRoutingFee:
            ///   - orderRoutingCurrencyId:
            ///   - productId:
            ///   - dayMargin:
            ///   - nightMargin:
            ///   - fullMargin:
            public init(
                clearingFee: Swift.Double? = nil,
                clearingCurrencyId: Swift.Int64? = nil,
                exchangeFee: Swift.Double? = nil,
                exchangeCurrencyId: Swift.Int64? = nil,
                nfaFee: Swift.Double? = nil,
                nfaCurrencyId: Swift.Int64? = nil,
                brokerageFee: Swift.Double? = nil,
                brokerageCurrencyId: Swift.Int64? = nil,
                ipFee: Swift.Double? = nil,
                ipCurrencyId: Swift.Int64? = nil,
                commission: Swift.Double? = nil,
                commissionCurrencyId: Swift.Int64? = nil,
                orderRoutingFee: Swift.Double? = nil,
                orderRoutingCurrencyId: Swift.Int64? = nil,
                productId: Swift.Int64,
                dayMargin: Swift.Double? = nil,
                nightMargin: Swift.Double? = nil,
                fullMargin: Components.Schemas.ProductMargin? = nil
            ) {
                self.clearingFee = clearingFee
                self.clearingCurrencyId = clearingCurrencyId
                self.exchangeFee = exchangeFee
                self.exchangeCurrencyId = exchangeCurrencyId
                self.nfaFee = nfaFee
                self.nfaCurrencyId = nfaCurrencyId
                self.brokerageFee = brokerageFee
                self.brokerageCurrencyId = brokerageCurrencyId
                self.ipFee = ipFee
                self.ipCurrencyId = ipCurrencyId
                self.commission = commission
                self.commissionCurrencyId = commissionCurrencyId
                self.orderRoutingFee = orderRoutingFee
                self.orderRoutingCurrencyId = orderRoutingCurrencyId
                self.productId = productId
                self.dayMargin = dayMargin
                self.nightMargin = nightMargin
                self.fullMargin = fullMargin
            }
            public enum CodingKeys: String, CodingKey {
                case clearingFee
                case clearingCurrencyId
                case exchangeFee
                case exchangeCurrencyId
                case nfaFee
                case nfaCurrencyId
                case brokerageFee
                case brokerageCurrencyId
                case ipFee
                case ipCurrencyId
                case commission
                case commissionCurrencyId
                case orderRoutingFee
                case orderRoutingCurrencyId
                case productId
                case dayMargin
                case nightMargin
                case fullMargin
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProductFeeParamsResponse`.
        public struct ProductFeeParamsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProductFeeParamsResponse/params`.
            public var params: [Components.Schemas.ProductFeeParams]
            /// Creates a new `ProductFeeParamsResponse`.
            ///
            /// - Parameters:
            ///   - params:
            public init(params: [Components.Schemas.ProductFeeParams]) {
                self.params = params
            }
            public enum CodingKeys: String, CodingKey {
                case params
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProductMargin`.
        public struct ProductMargin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProductMargin/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProductMargin/initialMargin`.
            public var initialMargin: Swift.Double
            /// - Remark: Generated from `#/components/schemas/ProductMargin/maintenanceMargin`.
            public var maintenanceMargin: Swift.Double
            /// - Remark: Generated from `#/components/schemas/ProductMargin/timestamp`.
            public var timestamp: Foundation.Date
            /// Creates a new `ProductMargin`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - initialMargin:
            ///   - maintenanceMargin:
            ///   - timestamp:
            public init(
                id: Swift.Int64? = nil,
                initialMargin: Swift.Double,
                maintenanceMargin: Swift.Double,
                timestamp: Foundation.Date
            ) {
                self.id = id
                self.initialMargin = initialMargin
                self.maintenanceMargin = maintenanceMargin
                self.timestamp = timestamp
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case initialMargin
                case maintenanceMargin
                case timestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/ProductSession`.
        public struct ProductSession: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ProductSession/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ProductSession/openTime`.
            public var openTime: Components.Schemas.TradeTime
            /// - Remark: Generated from `#/components/schemas/ProductSession/startTime`.
            public var startTime: Components.Schemas.TradeTime
            /// - Remark: Generated from `#/components/schemas/ProductSession/stopTime`.
            public var stopTime: Components.Schemas.TradeTime
            /// - Remark: Generated from `#/components/schemas/ProductSession/closeTime`.
            public var closeTime: Components.Schemas.TradeTime
            /// - Remark: Generated from `#/components/schemas/ProductSession/sundayOpenTime`.
            public var sundayOpenTime: Components.Schemas.TradeTime?
            /// Creates a new `ProductSession`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - openTime:
            ///   - startTime:
            ///   - stopTime:
            ///   - closeTime:
            ///   - sundayOpenTime:
            public init(
                id: Swift.Int64? = nil,
                openTime: Components.Schemas.TradeTime,
                startTime: Components.Schemas.TradeTime,
                stopTime: Components.Schemas.TradeTime,
                closeTime: Components.Schemas.TradeTime,
                sundayOpenTime: Components.Schemas.TradeTime? = nil
            ) {
                self.id = id
                self.openTime = openTime
                self.startTime = startTime
                self.stopTime = stopTime
                self.closeTime = closeTime
                self.sundayOpenTime = sundayOpenTime
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case openTime
                case startTime
                case stopTime
                case closeTime
                case sundayOpenTime
            }
        }
        /// - Remark: Generated from `#/components/schemas/Property`.
        public struct Property: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Property/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Property/name`.
            public var name: Swift.String
            /// Boolean, Enum, Integer, String
            ///
            /// - Remark: Generated from `#/components/schemas/Property/propertyType`.
            @frozen public enum propertyTypePayload: String, Codable, Hashable, Sendable {
                case Boolean = "Boolean"
                case Enum = "Enum"
                case Integer = "Integer"
                case _String = "String"
            }
            /// Boolean, Enum, Integer, String
            ///
            /// - Remark: Generated from `#/components/schemas/Property/propertyType`.
            public var propertyType: Components.Schemas.Property.propertyTypePayload
            /// - Remark: Generated from `#/components/schemas/Property/enumOptions`.
            public var enumOptions: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Property/defaultValue`.
            public var defaultValue: Swift.String?
            /// Creates a new `Property`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - propertyType: Boolean, Enum, Integer, String
            ///   - enumOptions:
            ///   - defaultValue:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                propertyType: Components.Schemas.Property.propertyTypePayload,
                enumOptions: Swift.String? = nil,
                defaultValue: Swift.String? = nil
            ) {
                self.id = id
                self.name = name
                self.propertyType = propertyType
                self.enumOptions = enumOptions
                self.defaultValue = defaultValue
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case propertyType
                case enumOptions
                case defaultValue
            }
        }
        /// - Remark: Generated from `#/components/schemas/RenewAccessToken`.
        public typealias RenewAccessToken = OpenAPIRuntime.OpenAPIObjectContainer
        /// - Remark: Generated from `#/components/schemas/RequestTradingPermission`.
        public struct RequestTradingPermission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RequestTradingPermission/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/RequestTradingPermission/ctaContact`.
            public var ctaContact: Swift.String
            /// - Remark: Generated from `#/components/schemas/RequestTradingPermission/ctaEmail`.
            public var ctaEmail: Swift.String
            /// Creates a new `RequestTradingPermission`.
            ///
            /// - Parameters:
            ///   - accountId:
            ///   - ctaContact:
            ///   - ctaEmail:
            public init(
                accountId: Swift.Int64,
                ctaContact: Swift.String,
                ctaEmail: Swift.String
            ) {
                self.accountId = accountId
                self.ctaContact = ctaContact
                self.ctaEmail = ctaEmail
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
                case ctaContact
                case ctaEmail
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResetAlert`.
        public struct ResetAlert: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ResetAlert/alertId`.
            public var alertId: Swift.Int64
            /// Creates a new `ResetAlert`.
            ///
            /// - Parameters:
            ///   - alertId:
            public init(alertId: Swift.Int64) {
                self.alertId = alertId
            }
            public enum CodingKeys: String, CodingKey {
                case alertId
            }
        }
        /// - Remark: Generated from `#/components/schemas/ResetDemoAccountState`.
        public struct ResetDemoAccountState: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ResetDemoAccountState/accountIds`.
            public var accountIds: [Swift.Int64]
            /// - Remark: Generated from `#/components/schemas/ResetDemoAccountState/resetTradeDate`.
            public var resetTradeDate: Components.Schemas.TradeDate
            /// Creates a new `ResetDemoAccountState`.
            ///
            /// - Parameters:
            ///   - accountIds:
            ///   - resetTradeDate:
            public init(
                accountIds: [Swift.Int64],
                resetTradeDate: Components.Schemas.TradeDate
            ) {
                self.accountIds = accountIds
                self.resetTradeDate = resetTradeDate
            }
            public enum CodingKeys: String, CodingKey {
                case accountIds
                case resetTradeDate
            }
        }
        /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion`.
        public struct RestrainedOrderVersion: Codable, Hashable, Sendable {
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/action`.
            public var action: Components.Schemas.RestrainedOrderVersion.actionPayload
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/clOrdId`.
            public var clOrdId: Swift.String?
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/orderType`.
            @frozen public enum orderTypePayload: String, Codable, Hashable, Sendable {
                case Limit = "Limit"
                case MIT = "MIT"
                case Market = "Market"
                case QTS = "QTS"
                case Stop = "Stop"
                case StopLimit = "StopLimit"
                case TrailingStop = "TrailingStop"
                case TrailingStopLimit = "TrailingStopLimit"
            }
            /// Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/orderType`.
            public var orderType: Components.Schemas.RestrainedOrderVersion.orderTypePayload
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/price`.
            public var price: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/stopPrice`.
            public var stopPrice: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/maxShow`.
            public var maxShow: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/pegDifference`.
            public var pegDifference: Swift.Double?
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/timeInForce`.
            @frozen public enum timeInForcePayload: String, Codable, Hashable, Sendable {
                case Day = "Day"
                case FOK = "FOK"
                case GTC = "GTC"
                case GTD = "GTD"
                case IOC = "IOC"
            }
            /// Day, FOK, GTC, GTD, IOC
            ///
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/timeInForce`.
            public var timeInForce: Components.Schemas.RestrainedOrderVersion.timeInForcePayload?
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/expireTime`.
            public var expireTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/RestrainedOrderVersion/text`.
            public var text: Swift.String?
            /// Creates a new `RestrainedOrderVersion`.
            ///
            /// - Parameters:
            ///   - action: Buy, Sell
            ///   - clOrdId:
            ///   - orderType: Limit, MIT, Market, QTS, Stop, StopLimit, TrailingStop, TrailingStopLimit
            ///   - price:
            ///   - stopPrice:
            ///   - maxShow:
            ///   - pegDifference:
            ///   - timeInForce: Day, FOK, GTC, GTD, IOC
            ///   - expireTime:
            ///   - text:
            public init(
                action: Components.Schemas.RestrainedOrderVersion.actionPayload,
                clOrdId: Swift.String? = nil,
                orderType: Components.Schemas.RestrainedOrderVersion.orderTypePayload,
                price: Swift.Double? = nil,
                stopPrice: Swift.Double? = nil,
                maxShow: Swift.Int32? = nil,
                pegDifference: Swift.Double? = nil,
                timeInForce: Components.Schemas.RestrainedOrderVersion.timeInForcePayload? = nil,
                expireTime: Foundation.Date? = nil,
                text: Swift.String? = nil
            ) {
                self.action = action
                self.clOrdId = clOrdId
                self.orderType = orderType
                self.price = price
                self.stopPrice = stopPrice
                self.maxShow = maxShow
                self.pegDifference = pegDifference
                self.timeInForce = timeInForce
                self.expireTime = expireTime
                self.text = text
            }
            public enum CodingKeys: String, CodingKey {
                case action
                case clOrdId
                case orderType
                case price
                case stopPrice
                case maxShow
                case pegDifference
                case timeInForce
                case expireTime
                case text
            }
        }
        /// - Remark: Generated from `#/components/schemas/RevokeTradingPermission`.
        public struct RevokeTradingPermission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RevokeTradingPermission/tradingPermissionId`.
            public var tradingPermissionId: Swift.Int64
            /// Creates a new `RevokeTradingPermission`.
            ///
            /// - Parameters:
            ///   - tradingPermissionId:
            public init(tradingPermissionId: Swift.Int64) {
                self.tradingPermissionId = tradingPermissionId
            }
            public enum CodingKeys: String, CodingKey {
                case tradingPermissionId
            }
        }
        /// - Remark: Generated from `#/components/schemas/RevokeTradingPermissions`.
        public struct RevokeTradingPermissions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RevokeTradingPermissions/tradingPermissionIds`.
            public var tradingPermissionIds: [Swift.Int64]
            /// Creates a new `RevokeTradingPermissions`.
            ///
            /// - Parameters:
            ///   - tradingPermissionIds:
            public init(tradingPermissionIds: [Swift.Int64]) {
                self.tradingPermissionIds = tradingPermissionIds
            }
            public enum CodingKeys: String, CodingKey {
                case tradingPermissionIds
            }
        }
        /// - Remark: Generated from `#/components/schemas/RollContract`.
        public struct RollContract: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RollContract/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/RollContract/forward`.
            public var forward: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RollContract/ifExpired`.
            public var ifExpired: Swift.Bool?
            /// Creates a new `RollContract`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - forward:
            ///   - ifExpired:
            public init(
                name: Swift.String,
                forward: Swift.Bool,
                ifExpired: Swift.Bool? = nil
            ) {
                self.name = name
                self.forward = forward
                self.ifExpired = ifExpired
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case forward
                case ifExpired
            }
        }
        /// - Remark: Generated from `#/components/schemas/RollContractBase`.
        public struct RollContractBase: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RollContractBase/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/RollContractBase/forward`.
            public var forward: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/RollContractBase/ifExpired`.
            public var ifExpired: Swift.Bool?
            /// Creates a new `RollContractBase`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - forward:
            ///   - ifExpired:
            public init(
                name: Swift.String,
                forward: Swift.Bool,
                ifExpired: Swift.Bool? = nil
            ) {
                self.name = name
                self.forward = forward
                self.ifExpired = ifExpired
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case forward
                case ifExpired
            }
        }
        /// - Remark: Generated from `#/components/schemas/RollContractResponse`.
        public struct RollContractResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/RollContractResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RollContractResponse/contract`.
            public var contract: Components.Schemas.Contract?
            /// Creates a new `RollContractResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - contract:
            public init(
                errorText: Swift.String? = nil,
                contract: Components.Schemas.Contract? = nil
            ) {
                self.errorText = errorText
                self.contract = contract
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case contract
            }
        }
        /// - Remark: Generated from `#/components/schemas/RollContracts`.
        public struct RollContracts: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RollContracts/rollContracts`.
            public var rollContracts: [Components.Schemas.RollContractBase]
            /// Creates a new `RollContracts`.
            ///
            /// - Parameters:
            ///   - rollContracts:
            public init(rollContracts: [Components.Schemas.RollContractBase]) {
                self.rollContracts = rollContracts
            }
            public enum CodingKeys: String, CodingKey {
                case rollContracts
            }
        }
        /// - Remark: Generated from `#/components/schemas/RollContractsResponse`.
        public struct RollContractsResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/RollContractsResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/RollContractsResponse/contracts`.
            public var contracts: OpenAPIRuntime.OpenAPIObjectContainer
            /// Creates a new `RollContractsResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - contracts:
            public init(
                errorText: Swift.String? = nil,
                contracts: OpenAPIRuntime.OpenAPIObjectContainer
            ) {
                self.errorText = errorText
                self.contracts = contracts
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case contracts
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscription`.
        public struct SecondMarketDataSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscription/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscription/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscription/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscription/year`.
            public var year: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscription/month`.
            public var month: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscription/cancelledRenewal`.
            public var cancelledRenewal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscription/cancellationTimestamp`.
            public var cancellationTimestamp: Foundation.Date?
            /// Creates a new `SecondMarketDataSubscription`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - timestamp:
            ///   - year:
            ///   - month:
            ///   - cancelledRenewal:
            ///   - cancellationTimestamp:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                timestamp: Foundation.Date,
                year: Swift.Int32,
                month: Swift.Int32,
                cancelledRenewal: Swift.Bool? = nil,
                cancellationTimestamp: Foundation.Date? = nil
            ) {
                self.id = id
                self.userId = userId
                self.timestamp = timestamp
                self.year = year
                self.month = month
                self.cancelledRenewal = cancelledRenewal
                self.cancellationTimestamp = cancellationTimestamp
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case timestamp
                case year
                case month
                case cancelledRenewal
                case cancellationTimestamp
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscriptionCostResponse`.
        public struct SecondMarketDataSubscriptionCostResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscriptionCostResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscriptionCostResponse/monthlyCost`.
            public var monthlyCost: Swift.Double?
            /// Creates a new `SecondMarketDataSubscriptionCostResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - monthlyCost:
            public init(
                errorText: Swift.String? = nil,
                monthlyCost: Swift.Double? = nil
            ) {
                self.errorText = errorText
                self.monthlyCost = monthlyCost
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case monthlyCost
            }
        }
        /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscriptionResponse`.
        public struct SecondMarketDataSubscriptionResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscriptionResponse/errorText`.
            public var errorText: Swift.String?
            /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscriptionResponse/errorCode`.
            @frozen public enum errorCodePayload: String, Codable, Hashable, Sendable {
                case ConflictWithExisting = "ConflictWithExisting"
                case DowngradeNotAllowed = "DowngradeNotAllowed"
                case IncompatibleCMEMarketDataSubscriptionPlans = "IncompatibleCMEMarketDataSubscriptionPlans"
                case IncorrectPaymentMethod = "IncorrectPaymentMethod"
                case InsufficientFunds = "InsufficientFunds"
                case PaymentProviderError = "PaymentProviderError"
                case PlanDiscontinued = "PlanDiscontinued"
                case SingleTrialOnly = "SingleTrialOnly"
                case Success = "Success"
                case UnknownError = "UnknownError"
            }
            /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscriptionResponse/errorCode`.
            public var errorCode: Components.Schemas.SecondMarketDataSubscriptionResponse.errorCodePayload?
            /// - Remark: Generated from `#/components/schemas/SecondMarketDataSubscriptionResponse/secondMarketDataSubscription`.
            public var secondMarketDataSubscription: Components.Schemas.SecondMarketDataSubscription?
            /// Creates a new `SecondMarketDataSubscriptionResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - errorCode: ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///   - secondMarketDataSubscription:
            public init(
                errorText: Swift.String? = nil,
                errorCode: Components.Schemas.SecondMarketDataSubscriptionResponse.errorCodePayload? = nil,
                secondMarketDataSubscription: Components.Schemas.SecondMarketDataSubscription? = nil
            ) {
                self.errorText = errorText
                self.errorCode = errorCode
                self.secondMarketDataSubscription = secondMarketDataSubscription
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case errorCode
                case secondMarketDataSubscription
            }
        }
        /// - Remark: Generated from `#/components/schemas/SignUpOrganizationMember`.
        public struct SignUpOrganizationMember: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SignUpOrganizationMember/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/SignUpOrganizationMember/email`.
            public var email: Swift.String
            /// - Remark: Generated from `#/components/schemas/SignUpOrganizationMember/password`.
            public var password: Swift.String
            /// - Remark: Generated from `#/components/schemas/SignUpOrganizationMember/firstName`.
            public var firstName: Swift.String
            /// - Remark: Generated from `#/components/schemas/SignUpOrganizationMember/lastName`.
            public var lastName: Swift.String
            /// Creates a new `SignUpOrganizationMember`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - email:
            ///   - password:
            ///   - firstName:
            ///   - lastName:
            public init(
                name: Swift.String,
                email: Swift.String,
                password: Swift.String,
                firstName: Swift.String,
                lastName: Swift.String
            ) {
                self.name = name
                self.email = email
                self.password = password
                self.firstName = firstName
                self.lastName = lastName
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case email
                case password
                case firstName
                case lastName
            }
        }
        /// - Remark: Generated from `#/components/schemas/SignUpResponse`.
        public struct SignUpResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/SignUpResponse/errorText`.
            public var errorText: Swift.String?
            /// DataError, EmailAlreadyRegistered, EmailPolicyFailed, FailedRecaptcha, Success, UnknownError, UserAlreadyExists, WeakPassword, WrongChallenge, WrongChallengeOrigin
            ///
            /// - Remark: Generated from `#/components/schemas/SignUpResponse/errorCode`.
            @frozen public enum errorCodePayload: String, Codable, Hashable, Sendable {
                case DataError = "DataError"
                case EmailAlreadyRegistered = "EmailAlreadyRegistered"
                case EmailPolicyFailed = "EmailPolicyFailed"
                case FailedRecaptcha = "FailedRecaptcha"
                case Success = "Success"
                case UnknownError = "UnknownError"
                case UserAlreadyExists = "UserAlreadyExists"
                case WeakPassword = "WeakPassword"
                case WrongChallenge = "WrongChallenge"
                case WrongChallengeOrigin = "WrongChallengeOrigin"
            }
            /// DataError, EmailAlreadyRegistered, EmailPolicyFailed, FailedRecaptcha, Success, UnknownError, UserAlreadyExists, WeakPassword, WrongChallenge, WrongChallengeOrigin
            ///
            /// - Remark: Generated from `#/components/schemas/SignUpResponse/errorCode`.
            public var errorCode: Components.Schemas.SignUpResponse.errorCodePayload
            /// - Remark: Generated from `#/components/schemas/SignUpResponse/userId`.
            public var userId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SignUpResponse/emailVerified`.
            public var emailVerified: Swift.Bool
            /// Creates a new `SignUpResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - errorCode: DataError, EmailAlreadyRegistered, EmailPolicyFailed, FailedRecaptcha, Success, UnknownError, UserAlreadyExists, WeakPassword, WrongChallenge, WrongChallengeOrigin
            ///   - userId:
            ///   - emailVerified:
            public init(
                errorText: Swift.String? = nil,
                errorCode: Components.Schemas.SignUpResponse.errorCodePayload,
                userId: Swift.Int64? = nil,
                emailVerified: Swift.Bool
            ) {
                self.errorText = errorText
                self.errorCode = errorCode
                self.userId = userId
                self.emailVerified = emailVerified
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case errorCode
                case userId
                case emailVerified
            }
        }
        /// - Remark: Generated from `#/components/schemas/SimpleResponse`.
        public struct SimpleResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/SimpleResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SimpleResponse/ok`.
            public var ok: Swift.Bool
            /// Creates a new `SimpleResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - ok:
            public init(
                errorText: Swift.String? = nil,
                ok: Swift.Bool
            ) {
                self.errorText = errorText
                self.ok = ok
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case ok
            }
        }
        /// - Remark: Generated from `#/components/schemas/SpreadDefinition`.
        public struct SpreadDefinition: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SpreadDefinition/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SpreadDefinition/timestamp`.
            public var timestamp: Foundation.Date
            /// Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadDefinition/spreadType`.
            @frozen public enum spreadTypePayload: String, Codable, Hashable, Sendable {
                case Bundle = "Bundle"
                case BundleSpread = "BundleSpread"
                case Butterfly = "Butterfly"
                case CalendarSpread = "CalendarSpread"
                case Condor = "Condor"
                case Crack = "Crack"
                case DoubleButterfly = "DoubleButterfly"
                case General = "General"
                case IntercommoditySpread = "IntercommoditySpread"
                case LaggedIntercommoditySpread = "LaggedIntercommoditySpread"
                case Pack = "Pack"
                case PackButterfly = "PackButterfly"
                case PackSpread = "PackSpread"
                case ReducedTickCalendarSpread = "ReducedTickCalendarSpread"
                case ReverseIntercommoditySpread = "ReverseIntercommoditySpread"
                case ReverseSpread = "ReverseSpread"
                case Strip = "Strip"
                case TreasuryIntercommoditySpread = "TreasuryIntercommoditySpread"
            }
            /// Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread
            ///
            /// - Remark: Generated from `#/components/schemas/SpreadDefinition/spreadType`.
            public var spreadType: Components.Schemas.SpreadDefinition.spreadTypePayload
            /// - Remark: Generated from `#/components/schemas/SpreadDefinition/uds`.
            public var uds: Swift.Bool
            /// Creates a new `SpreadDefinition`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - timestamp:
            ///   - spreadType: Bundle, BundleSpread, Butterfly, CalendarSpread, Condor, Crack, DoubleButterfly, General, IntercommoditySpread, LaggedIntercommoditySpread, Pack, PackButterfly, PackSpread, ReducedTickCalendarSpread, ReverseIntercommoditySpread, ReverseSpread, Strip, TreasuryIntercommoditySpread
            ///   - uds:
            public init(
                id: Swift.Int64? = nil,
                timestamp: Foundation.Date,
                spreadType: Components.Schemas.SpreadDefinition.spreadTypePayload,
                uds: Swift.Bool
            ) {
                self.id = id
                self.timestamp = timestamp
                self.spreadType = spreadType
                self.uds = uds
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case timestamp
                case spreadType
                case uds
            }
        }
        /// - Remark: Generated from `#/components/schemas/StartOrderStrategy`.
        public struct StartOrderStrategy: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/accountSpec`.
            public var accountSpec: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/symbol`.
            public var symbol: Swift.String
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/orderStrategyTypeId`.
            public var orderStrategyTypeId: Swift.Int64
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/action`.
            @frozen public enum actionPayload: String, Codable, Hashable, Sendable {
                case Buy = "Buy"
                case Sell = "Sell"
            }
            /// Buy, Sell
            ///
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/action`.
            public var action: Components.Schemas.StartOrderStrategy.actionPayload
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/params`.
            public var params: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/uuid`.
            public var uuid: Swift.String?
            /// - Remark: Generated from `#/components/schemas/StartOrderStrategy/customTag50`.
            public var customTag50: Swift.String?
            /// Creates a new `StartOrderStrategy`.
            ///
            /// - Parameters:
            ///   - accountId:
            ///   - accountSpec:
            ///   - symbol:
            ///   - orderStrategyTypeId:
            ///   - action: Buy, Sell
            ///   - params:
            ///   - uuid:
            ///   - customTag50:
            public init(
                accountId: Swift.Int64? = nil,
                accountSpec: Swift.String? = nil,
                symbol: Swift.String,
                orderStrategyTypeId: Swift.Int64,
                action: Components.Schemas.StartOrderStrategy.actionPayload,
                params: Swift.String? = nil,
                uuid: Swift.String? = nil,
                customTag50: Swift.String? = nil
            ) {
                self.accountId = accountId
                self.accountSpec = accountSpec
                self.symbol = symbol
                self.orderStrategyTypeId = orderStrategyTypeId
                self.action = action
                self.params = params
                self.uuid = uuid
                self.customTag50 = customTag50
            }
            public enum CodingKeys: String, CodingKey {
                case accountId
                case accountSpec
                case symbol
                case orderStrategyTypeId
                case action
                case params
                case uuid
                case customTag50
            }
        }
        /// - Remark: Generated from `#/components/schemas/SyncMessage`.
        public struct SyncMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SyncMessage/users`.
            public var users: [Components.Schemas.User]
            /// - Remark: Generated from `#/components/schemas/SyncMessage/accounts`.
            public var accounts: [Components.Schemas.Account]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/accountRiskStatuses`.
            public var accountRiskStatuses: [Components.Schemas.AccountRiskStatus]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/marginSnapshots`.
            public var marginSnapshots: [Components.Schemas.MarginSnapshot]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/userAccountAutoLiqs`.
            public var userAccountAutoLiqs: [Components.Schemas.UserAccountAutoLiq]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/cashBalances`.
            public var cashBalances: [Components.Schemas.CashBalance]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/currencies`.
            public var currencies: [Components.Schemas.Currency]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/positions`.
            public var positions: [Components.Schemas.Position]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/fillPairs`.
            public var fillPairs: [Components.Schemas.FillPair]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/orders`.
            public var orders: [Components.Schemas.Order]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/contracts`.
            public var contracts: [Components.Schemas.Contract]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/contractMaturities`.
            public var contractMaturities: [Components.Schemas.ContractMaturity]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/products`.
            public var products: [Components.Schemas.Product]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/exchanges`.
            public var exchanges: [Components.Schemas.Exchange]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/spreadDefinitions`.
            public var spreadDefinitions: [Components.Schemas.SpreadDefinition]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/commands`.
            public var commands: [Components.Schemas.Command]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/commandReports`.
            public var commandReports: [Components.Schemas.CommandReport]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/executionReports`.
            public var executionReports: [Components.Schemas.ExecutionReport]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/orderVersions`.
            public var orderVersions: [Components.Schemas.OrderVersion]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/fills`.
            public var fills: [Components.Schemas.Fill]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/orderStrategies`.
            public var orderStrategies: [Components.Schemas.OrderStrategy]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/orderStrategyLinks`.
            public var orderStrategyLinks: [Components.Schemas.OrderStrategyLink]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/userProperties`.
            public var userProperties: [Components.Schemas.UserProperty]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/properties`.
            public var properties: [Components.Schemas.Property]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/userPlugins`.
            public var userPlugins: [Components.Schemas.UserPlugin]?
            /// - Remark: Generated from `#/components/schemas/SyncMessage/contractGroups`.
            public var contractGroups: [Components.Schemas.ContractGroup]
            /// - Remark: Generated from `#/components/schemas/SyncMessage/orderStrategyTypes`.
            public var orderStrategyTypes: [Components.Schemas.OrderStrategyType]?
            /// Creates a new `SyncMessage`.
            ///
            /// - Parameters:
            ///   - users:
            ///   - accounts:
            ///   - accountRiskStatuses:
            ///   - marginSnapshots:
            ///   - userAccountAutoLiqs:
            ///   - cashBalances:
            ///   - currencies:
            ///   - positions:
            ///   - fillPairs:
            ///   - orders:
            ///   - contracts:
            ///   - contractMaturities:
            ///   - products:
            ///   - exchanges:
            ///   - spreadDefinitions:
            ///   - commands:
            ///   - commandReports:
            ///   - executionReports:
            ///   - orderVersions:
            ///   - fills:
            ///   - orderStrategies:
            ///   - orderStrategyLinks:
            ///   - userProperties:
            ///   - properties:
            ///   - userPlugins:
            ///   - contractGroups:
            ///   - orderStrategyTypes:
            public init(
                users: [Components.Schemas.User],
                accounts: [Components.Schemas.Account]? = nil,
                accountRiskStatuses: [Components.Schemas.AccountRiskStatus]? = nil,
                marginSnapshots: [Components.Schemas.MarginSnapshot]? = nil,
                userAccountAutoLiqs: [Components.Schemas.UserAccountAutoLiq]? = nil,
                cashBalances: [Components.Schemas.CashBalance]? = nil,
                currencies: [Components.Schemas.Currency]? = nil,
                positions: [Components.Schemas.Position]? = nil,
                fillPairs: [Components.Schemas.FillPair]? = nil,
                orders: [Components.Schemas.Order]? = nil,
                contracts: [Components.Schemas.Contract]? = nil,
                contractMaturities: [Components.Schemas.ContractMaturity]? = nil,
                products: [Components.Schemas.Product]? = nil,
                exchanges: [Components.Schemas.Exchange]? = nil,
                spreadDefinitions: [Components.Schemas.SpreadDefinition]? = nil,
                commands: [Components.Schemas.Command]? = nil,
                commandReports: [Components.Schemas.CommandReport]? = nil,
                executionReports: [Components.Schemas.ExecutionReport]? = nil,
                orderVersions: [Components.Schemas.OrderVersion]? = nil,
                fills: [Components.Schemas.Fill]? = nil,
                orderStrategies: [Components.Schemas.OrderStrategy]? = nil,
                orderStrategyLinks: [Components.Schemas.OrderStrategyLink]? = nil,
                userProperties: [Components.Schemas.UserProperty]? = nil,
                properties: [Components.Schemas.Property]? = nil,
                userPlugins: [Components.Schemas.UserPlugin]? = nil,
                contractGroups: [Components.Schemas.ContractGroup],
                orderStrategyTypes: [Components.Schemas.OrderStrategyType]? = nil
            ) {
                self.users = users
                self.accounts = accounts
                self.accountRiskStatuses = accountRiskStatuses
                self.marginSnapshots = marginSnapshots
                self.userAccountAutoLiqs = userAccountAutoLiqs
                self.cashBalances = cashBalances
                self.currencies = currencies
                self.positions = positions
                self.fillPairs = fillPairs
                self.orders = orders
                self.contracts = contracts
                self.contractMaturities = contractMaturities
                self.products = products
                self.exchanges = exchanges
                self.spreadDefinitions = spreadDefinitions
                self.commands = commands
                self.commandReports = commandReports
                self.executionReports = executionReports
                self.orderVersions = orderVersions
                self.fills = fills
                self.orderStrategies = orderStrategies
                self.orderStrategyLinks = orderStrategyLinks
                self.userProperties = userProperties
                self.properties = properties
                self.userPlugins = userPlugins
                self.contractGroups = contractGroups
                self.orderStrategyTypes = orderStrategyTypes
            }
            public enum CodingKeys: String, CodingKey {
                case users
                case accounts
                case accountRiskStatuses
                case marginSnapshots
                case userAccountAutoLiqs
                case cashBalances
                case currencies
                case positions
                case fillPairs
                case orders
                case contracts
                case contractMaturities
                case products
                case exchanges
                case spreadDefinitions
                case commands
                case commandReports
                case executionReports
                case orderVersions
                case fills
                case orderStrategies
                case orderStrategyLinks
                case userProperties
                case properties
                case userPlugins
                case contractGroups
                case orderStrategyTypes
            }
        }
        /// - Remark: Generated from `#/components/schemas/SyncRequest`.
        public struct SyncRequest: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SyncRequest/users`.
            public var users: [Swift.Int64]?
            /// - Remark: Generated from `#/components/schemas/SyncRequest/accounts`.
            public var accounts: [Swift.Int64]?
            /// - Remark: Generated from `#/components/schemas/SyncRequest/splitResponses`.
            public var splitResponses: Swift.Bool?
            /// Creates a new `SyncRequest`.
            ///
            /// - Parameters:
            ///   - users:
            ///   - accounts:
            ///   - splitResponses:
            public init(
                users: [Swift.Int64]? = nil,
                accounts: [Swift.Int64]? = nil,
                splitResponses: Swift.Bool? = nil
            ) {
                self.users = users
                self.accounts = accounts
                self.splitResponses = splitResponses
            }
            public enum CodingKeys: String, CodingKey {
                case users
                case accounts
                case splitResponses
            }
        }
        /// - Remark: Generated from `#/components/schemas/TakeAlertSignalOwnership`.
        public struct TakeAlertSignalOwnership: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TakeAlertSignalOwnership/adminAlertSignalId`.
            public var adminAlertSignalId: Swift.Int64
            /// Creates a new `TakeAlertSignalOwnership`.
            ///
            /// - Parameters:
            ///   - adminAlertSignalId:
            public init(adminAlertSignalId: Swift.Int64) {
                self.adminAlertSignalId = adminAlertSignalId
            }
            public enum CodingKeys: String, CodingKey {
                case adminAlertSignalId
            }
        }
        /// - Remark: Generated from `#/components/schemas/TradingPermission`.
        public struct TradingPermission: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TradingPermission/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradingPermission/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/TradingPermission/accountId`.
            public var accountId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/TradingPermission/accountHolderContact`.
            public var accountHolderContact: Swift.String
            /// - Remark: Generated from `#/components/schemas/TradingPermission/accountHolderEmail`.
            public var accountHolderEmail: Swift.String
            /// - Remark: Generated from `#/components/schemas/TradingPermission/ctaContact`.
            public var ctaContact: Swift.String
            /// - Remark: Generated from `#/components/schemas/TradingPermission/ctaEmail`.
            public var ctaEmail: Swift.String
            /// Accepted, Approved, Declined, Requested, Revoked
            ///
            /// - Remark: Generated from `#/components/schemas/TradingPermission/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case Accepted = "Accepted"
                case Approved = "Approved"
                case Declined = "Declined"
                case Requested = "Requested"
                case Revoked = "Revoked"
            }
            /// Accepted, Approved, Declined, Requested, Revoked
            ///
            /// - Remark: Generated from `#/components/schemas/TradingPermission/status`.
            public var status: Components.Schemas.TradingPermission.statusPayload
            /// - Remark: Generated from `#/components/schemas/TradingPermission/updated`.
            public var updated: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/TradingPermission/approvedById`.
            public var approvedById: Swift.Int64?
            /// Creates a new `TradingPermission`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - accountId:
            ///   - accountHolderContact:
            ///   - accountHolderEmail:
            ///   - ctaContact:
            ///   - ctaEmail:
            ///   - status: Accepted, Approved, Declined, Requested, Revoked
            ///   - updated:
            ///   - approvedById:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                accountId: Swift.Int64,
                accountHolderContact: Swift.String,
                accountHolderEmail: Swift.String,
                ctaContact: Swift.String,
                ctaEmail: Swift.String,
                status: Components.Schemas.TradingPermission.statusPayload,
                updated: Foundation.Date? = nil,
                approvedById: Swift.Int64? = nil
            ) {
                self.id = id
                self.userId = userId
                self.accountId = accountId
                self.accountHolderContact = accountHolderContact
                self.accountHolderEmail = accountHolderEmail
                self.ctaContact = ctaContact
                self.ctaEmail = ctaEmail
                self.status = status
                self.updated = updated
                self.approvedById = approvedById
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case accountId
                case accountHolderContact
                case accountHolderEmail
                case ctaContact
                case ctaEmail
                case status
                case updated
                case approvedById
            }
        }
        /// - Remark: Generated from `#/components/schemas/TradingPermissionResponse`.
        public struct TradingPermissionResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/TradingPermissionResponse/errorText`.
            public var errorText: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TradingPermissionResponse/tradingPermission`.
            public var tradingPermission: Components.Schemas.TradingPermission?
            /// Creates a new `TradingPermissionResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - tradingPermission:
            public init(
                errorText: Swift.String? = nil,
                tradingPermission: Components.Schemas.TradingPermission? = nil
            ) {
                self.errorText = errorText
                self.tradingPermission = tradingPermission
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case tradingPermission
            }
        }
        /// - Remark: Generated from `#/components/schemas/TradingPermissionsResponse`.
        public struct TradingPermissionsResponse: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TradingPermissionsResponse/tradingPermissions`.
            public var tradingPermissions: [Components.Schemas.TradingPermission]
            /// Creates a new `TradingPermissionsResponse`.
            ///
            /// - Parameters:
            ///   - tradingPermissions:
            public init(tradingPermissions: [Components.Schemas.TradingPermission]) {
                self.tradingPermissions = tradingPermissions
            }
            public enum CodingKeys: String, CodingKey {
                case tradingPermissions
            }
        }
        /// - Remark: Generated from `#/components/schemas/TradovateSubscription`.
        public struct TradovateSubscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/planPrice`.
            public var planPrice: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/creditCardTransactionId`.
            public var creditCardTransactionId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/cashBalanceLogId`.
            public var cashBalanceLogId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/creditCardId`.
            public var creditCardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/tradovateSubscriptionPlanId`.
            public var tradovateSubscriptionPlanId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/startDate`.
            public var startDate: Components.Schemas.TradeDate
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/expirationDate`.
            public var expirationDate: Components.Schemas.TradeDate
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/paidAmount`.
            public var paidAmount: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/cancelledRenewal`.
            public var cancelledRenewal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscription/cancelReason`.
            public var cancelReason: Swift.String?
            /// Creates a new `TradovateSubscription`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - timestamp:
            ///   - planPrice:
            ///   - creditCardTransactionId:
            ///   - cashBalanceLogId:
            ///   - creditCardId:
            ///   - accountId:
            ///   - tradovateSubscriptionPlanId:
            ///   - startDate:
            ///   - expirationDate:
            ///   - paidAmount:
            ///   - cancelledRenewal:
            ///   - cancelReason:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                timestamp: Foundation.Date,
                planPrice: Swift.Double,
                creditCardTransactionId: Swift.Int64? = nil,
                cashBalanceLogId: Swift.Int64? = nil,
                creditCardId: Swift.Int64? = nil,
                accountId: Swift.Int64? = nil,
                tradovateSubscriptionPlanId: Swift.Int64,
                startDate: Components.Schemas.TradeDate,
                expirationDate: Components.Schemas.TradeDate,
                paidAmount: Swift.Double,
                cancelledRenewal: Swift.Bool? = nil,
                cancelReason: Swift.String? = nil
            ) {
                self.id = id
                self.userId = userId
                self.timestamp = timestamp
                self.planPrice = planPrice
                self.creditCardTransactionId = creditCardTransactionId
                self.cashBalanceLogId = cashBalanceLogId
                self.creditCardId = creditCardId
                self.accountId = accountId
                self.tradovateSubscriptionPlanId = tradovateSubscriptionPlanId
                self.startDate = startDate
                self.expirationDate = expirationDate
                self.paidAmount = paidAmount
                self.cancelledRenewal = cancelledRenewal
                self.cancelReason = cancelReason
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case timestamp
                case planPrice
                case creditCardTransactionId
                case cashBalanceLogId
                case creditCardId
                case accountId
                case tradovateSubscriptionPlanId
                case startDate
                case expirationDate
                case paidAmount
                case cancelledRenewal
                case cancelReason
            }
        }
        /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan`.
        public struct TradovateSubscriptionPlan: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/title`.
            public var title: Swift.String
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/price`.
            public var price: Swift.Double
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/startDate`.
            public var startDate: Components.Schemas.TradeDate?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/discontinuedDate`.
            public var discontinuedDate: Components.Schemas.TradeDate?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/category`.
            public var category: Swift.String
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/trial`.
            public var trial: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/duration`.
            public var duration: Swift.Int32
            /// Lifetime, Month, Quarter, Week, Year
            ///
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/durationUnits`.
            @frozen public enum durationUnitsPayload: String, Codable, Hashable, Sendable {
                case Lifetime = "Lifetime"
                case Month = "Month"
                case Quarter = "Quarter"
                case Week = "Week"
                case Year = "Year"
            }
            /// Lifetime, Month, Quarter, Week, Year
            ///
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/durationUnits`.
            public var durationUnits: Components.Schemas.TradovateSubscriptionPlan.durationUnitsPayload
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/riskCategoryId`.
            public var riskCategoryId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/multipleAccounts`.
            public var multipleAccounts: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/organizationId`.
            public var organizationId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/replaySessions`.
            public var replaySessions: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/footnote`.
            public var footnote: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionPlan/simOnly`.
            public var simOnly: Swift.Bool?
            /// Creates a new `TradovateSubscriptionPlan`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - title:
            ///   - price:
            ///   - startDate:
            ///   - discontinuedDate:
            ///   - category:
            ///   - trial:
            ///   - duration:
            ///   - durationUnits: Lifetime, Month, Quarter, Week, Year
            ///   - riskCategoryId:
            ///   - multipleAccounts:
            ///   - organizationId:
            ///   - replaySessions:
            ///   - footnote:
            ///   - simOnly:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                title: Swift.String,
                price: Swift.Double,
                startDate: Components.Schemas.TradeDate? = nil,
                discontinuedDate: Components.Schemas.TradeDate? = nil,
                category: Swift.String,
                trial: Swift.Bool,
                duration: Swift.Int32,
                durationUnits: Components.Schemas.TradovateSubscriptionPlan.durationUnitsPayload,
                riskCategoryId: Swift.Int64? = nil,
                multipleAccounts: Swift.Bool? = nil,
                organizationId: Swift.Int64? = nil,
                replaySessions: Swift.Int32? = nil,
                footnote: Swift.String? = nil,
                simOnly: Swift.Bool? = nil
            ) {
                self.id = id
                self.name = name
                self.title = title
                self.price = price
                self.startDate = startDate
                self.discontinuedDate = discontinuedDate
                self.category = category
                self.trial = trial
                self.duration = duration
                self.durationUnits = durationUnits
                self.riskCategoryId = riskCategoryId
                self.multipleAccounts = multipleAccounts
                self.organizationId = organizationId
                self.replaySessions = replaySessions
                self.footnote = footnote
                self.simOnly = simOnly
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case title
                case price
                case startDate
                case discontinuedDate
                case category
                case trial
                case duration
                case durationUnits
                case riskCategoryId
                case multipleAccounts
                case organizationId
                case replaySessions
                case footnote
                case simOnly
            }
        }
        /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionResponse`.
        public struct TradovateSubscriptionResponse: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionResponse/errorText`.
            public var errorText: Swift.String?
            /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionResponse/errorCode`.
            @frozen public enum errorCodePayload: String, Codable, Hashable, Sendable {
                case ConflictWithExisting = "ConflictWithExisting"
                case DowngradeNotAllowed = "DowngradeNotAllowed"
                case IncompatibleCMEMarketDataSubscriptionPlans = "IncompatibleCMEMarketDataSubscriptionPlans"
                case IncorrectPaymentMethod = "IncorrectPaymentMethod"
                case InsufficientFunds = "InsufficientFunds"
                case PaymentProviderError = "PaymentProviderError"
                case PlanDiscontinued = "PlanDiscontinued"
                case SingleTrialOnly = "SingleTrialOnly"
                case Success = "Success"
                case UnknownError = "UnknownError"
            }
            /// ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionResponse/errorCode`.
            public var errorCode: Components.Schemas.TradovateSubscriptionResponse.errorCodePayload?
            /// - Remark: Generated from `#/components/schemas/TradovateSubscriptionResponse/tradovateSubscription`.
            public var tradovateSubscription: Components.Schemas.TradovateSubscription?
            /// Creates a new `TradovateSubscriptionResponse`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - errorCode: ConflictWithExisting, DowngradeNotAllowed, IncompatibleCMEMarketDataSubscriptionPlans, IncorrectPaymentMethod, InsufficientFunds, PaymentProviderError, PlanDiscontinued, SingleTrialOnly, Success, UnknownError
            ///   - tradovateSubscription:
            public init(
                errorText: Swift.String? = nil,
                errorCode: Components.Schemas.TradovateSubscriptionResponse.errorCodePayload? = nil,
                tradovateSubscription: Components.Schemas.TradovateSubscription? = nil
            ) {
                self.errorText = errorText
                self.errorCode = errorCode
                self.tradovateSubscription = tradovateSubscription
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case errorCode
                case tradovateSubscription
            }
        }
        /// - Remark: Generated from `#/components/schemas/User`.
        public struct User: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/User/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/User/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/User/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/User/email`.
            public var email: Swift.String
            /// Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            ///
            /// - Remark: Generated from `#/components/schemas/User/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case Active = "Active"
                case Closed = "Closed"
                case Initiated = "Initiated"
                case TemporaryLocked = "TemporaryLocked"
                case UnconfirmedEmail = "UnconfirmedEmail"
            }
            /// Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            ///
            /// - Remark: Generated from `#/components/schemas/User/status`.
            public var status: Components.Schemas.User.statusPayload
            /// - Remark: Generated from `#/components/schemas/User/professional`.
            public var professional: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/User/organizationId`.
            public var organizationId: Swift.Int64?
            /// Linked Live
            ///
            /// - Remark: Generated from `#/components/schemas/User/linkedUserId`.
            public var linkedUserId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/User/foreignIntroducingBrokerId`.
            public var foreignIntroducingBrokerId: Swift.Int64?
            /// Creates a new `User`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - name:
            ///   - timestamp:
            ///   - email:
            ///   - status: Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            ///   - professional:
            ///   - organizationId:
            ///   - linkedUserId: Linked Live
            ///   - foreignIntroducingBrokerId:
            public init(
                id: Swift.Int64? = nil,
                name: Swift.String,
                timestamp: Foundation.Date,
                email: Swift.String,
                status: Components.Schemas.User.statusPayload,
                professional: Swift.Bool,
                organizationId: Swift.Int64? = nil,
                linkedUserId: Swift.Int64? = nil,
                foreignIntroducingBrokerId: Swift.Int64? = nil
            ) {
                self.id = id
                self.name = name
                self.timestamp = timestamp
                self.email = email
                self.status = status
                self.professional = professional
                self.organizationId = organizationId
                self.linkedUserId = linkedUserId
                self.foreignIntroducingBrokerId = foreignIntroducingBrokerId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case name
                case timestamp
                case email
                case status
                case professional
                case organizationId
                case linkedUserId
                case foreignIntroducingBrokerId
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq`.
        public struct UserAccountAutoLiq: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/id`.
            public var id: Swift.Int64?
            /// Changes Locked
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/changesLocked`.
            public var changesLocked: Swift.Bool?
            /// Margin % for an Alert
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/marginPercentageAlert`.
            public var marginPercentageAlert: Swift.Double?
            /// Daily Loss % for an Alert
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/dailyLossPercentageAlert`.
            public var dailyLossPercentageAlert: Swift.Double?
            /// $ Daily Loss for an Alert
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/dailyLossAlert`.
            public var dailyLossAlert: Swift.Double?
            /// Margin % for an Liq Only
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/marginPercentageLiqOnly`.
            public var marginPercentageLiqOnly: Swift.Double?
            /// Daily Loss % for an Liq Only
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/dailyLossPercentageLiqOnly`.
            public var dailyLossPercentageLiqOnly: Swift.Double?
            /// $ Daily Loss for an Liq Only
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/dailyLossLiqOnly`.
            public var dailyLossLiqOnly: Swift.Double?
            /// Margin % for an Auto-Liq
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/marginPercentageAutoLiq`.
            public var marginPercentageAutoLiq: Swift.Double?
            /// Daily Loss % for an AutoLiq
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/dailyLossPercentageAutoLiq`.
            public var dailyLossPercentageAutoLiq: Swift.Double?
            /// $ Daily Loss for an Auto-Liq
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/dailyLossAutoLiq`.
            public var dailyLossAutoLiq: Swift.Double?
            /// $ Weekly Loss for an Auto-Liq
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/weeklyLossAutoLiq`.
            public var weeklyLossAutoLiq: Swift.Double?
            /// Flatten &amp; Cancel
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/flattenTimestamp`.
            public var flattenTimestamp: Foundation.Date?
            /// $ Trailing Max Drawdown
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/trailingMaxDrawdown`.
            public var trailingMaxDrawdown: Swift.Double?
            /// $ Trailing Max Drawdown Limit
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/trailingMaxDrawdownLimit`.
            public var trailingMaxDrawdownLimit: Swift.Double?
            /// EOD, RealTime
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/trailingMaxDrawdownMode`.
            @frozen public enum trailingMaxDrawdownModePayload: String, Codable, Hashable, Sendable {
                case EOD = "EOD"
                case RealTime = "RealTime"
            }
            /// EOD, RealTime
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/trailingMaxDrawdownMode`.
            public var trailingMaxDrawdownMode: Components.Schemas.UserAccountAutoLiq.trailingMaxDrawdownModePayload?
            /// $ Daily Profit for an Auto-Liq
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/dailyProfitAutoLiq`.
            public var dailyProfitAutoLiq: Swift.Double?
            /// $ Weekly Profit for an Auto-Liq
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/weeklyProfitAutoLiq`.
            public var weeklyProfitAutoLiq: Swift.Double?
            /// Do not automatically unlock account if triggered
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountAutoLiq/doNotUnlock`.
            public var doNotUnlock: Swift.Bool?
            /// Creates a new `UserAccountAutoLiq`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - changesLocked: Changes Locked
            ///   - marginPercentageAlert: Margin % for an Alert
            ///   - dailyLossPercentageAlert: Daily Loss % for an Alert
            ///   - dailyLossAlert: $ Daily Loss for an Alert
            ///   - marginPercentageLiqOnly: Margin % for an Liq Only
            ///   - dailyLossPercentageLiqOnly: Daily Loss % for an Liq Only
            ///   - dailyLossLiqOnly: $ Daily Loss for an Liq Only
            ///   - marginPercentageAutoLiq: Margin % for an Auto-Liq
            ///   - dailyLossPercentageAutoLiq: Daily Loss % for an AutoLiq
            ///   - dailyLossAutoLiq: $ Daily Loss for an Auto-Liq
            ///   - weeklyLossAutoLiq: $ Weekly Loss for an Auto-Liq
            ///   - flattenTimestamp: Flatten &amp; Cancel
            ///   - trailingMaxDrawdown: $ Trailing Max Drawdown
            ///   - trailingMaxDrawdownLimit: $ Trailing Max Drawdown Limit
            ///   - trailingMaxDrawdownMode: EOD, RealTime
            ///   - dailyProfitAutoLiq: $ Daily Profit for an Auto-Liq
            ///   - weeklyProfitAutoLiq: $ Weekly Profit for an Auto-Liq
            ///   - doNotUnlock: Do not automatically unlock account if triggered
            public init(
                id: Swift.Int64? = nil,
                changesLocked: Swift.Bool? = nil,
                marginPercentageAlert: Swift.Double? = nil,
                dailyLossPercentageAlert: Swift.Double? = nil,
                dailyLossAlert: Swift.Double? = nil,
                marginPercentageLiqOnly: Swift.Double? = nil,
                dailyLossPercentageLiqOnly: Swift.Double? = nil,
                dailyLossLiqOnly: Swift.Double? = nil,
                marginPercentageAutoLiq: Swift.Double? = nil,
                dailyLossPercentageAutoLiq: Swift.Double? = nil,
                dailyLossAutoLiq: Swift.Double? = nil,
                weeklyLossAutoLiq: Swift.Double? = nil,
                flattenTimestamp: Foundation.Date? = nil,
                trailingMaxDrawdown: Swift.Double? = nil,
                trailingMaxDrawdownLimit: Swift.Double? = nil,
                trailingMaxDrawdownMode: Components.Schemas.UserAccountAutoLiq.trailingMaxDrawdownModePayload? = nil,
                dailyProfitAutoLiq: Swift.Double? = nil,
                weeklyProfitAutoLiq: Swift.Double? = nil,
                doNotUnlock: Swift.Bool? = nil
            ) {
                self.id = id
                self.changesLocked = changesLocked
                self.marginPercentageAlert = marginPercentageAlert
                self.dailyLossPercentageAlert = dailyLossPercentageAlert
                self.dailyLossAlert = dailyLossAlert
                self.marginPercentageLiqOnly = marginPercentageLiqOnly
                self.dailyLossPercentageLiqOnly = dailyLossPercentageLiqOnly
                self.dailyLossLiqOnly = dailyLossLiqOnly
                self.marginPercentageAutoLiq = marginPercentageAutoLiq
                self.dailyLossPercentageAutoLiq = dailyLossPercentageAutoLiq
                self.dailyLossAutoLiq = dailyLossAutoLiq
                self.weeklyLossAutoLiq = weeklyLossAutoLiq
                self.flattenTimestamp = flattenTimestamp
                self.trailingMaxDrawdown = trailingMaxDrawdown
                self.trailingMaxDrawdownLimit = trailingMaxDrawdownLimit
                self.trailingMaxDrawdownMode = trailingMaxDrawdownMode
                self.dailyProfitAutoLiq = dailyProfitAutoLiq
                self.weeklyProfitAutoLiq = weeklyProfitAutoLiq
                self.doNotUnlock = doNotUnlock
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case changesLocked
                case marginPercentageAlert
                case dailyLossPercentageAlert
                case dailyLossAlert
                case marginPercentageLiqOnly
                case dailyLossPercentageLiqOnly
                case dailyLossLiqOnly
                case marginPercentageAutoLiq
                case dailyLossPercentageAutoLiq
                case dailyLossAutoLiq
                case weeklyLossAutoLiq
                case flattenTimestamp
                case trailingMaxDrawdown
                case trailingMaxDrawdownLimit
                case trailingMaxDrawdownMode
                case dailyProfitAutoLiq
                case weeklyProfitAutoLiq
                case doNotUnlock
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit`.
        public struct UserAccountPositionLimit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/contractId`.
            public var contractId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/productId`.
            public var productId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/exchangeId`.
            public var exchangeId: Swift.Int64?
            /// CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/productType`.
            @frozen public enum productTypePayload: String, Codable, Hashable, Sendable {
                case CommonStock = "CommonStock"
                case Continuous = "Continuous"
                case Cryptocurrency = "Cryptocurrency"
                case Futures = "Futures"
                case MarketInternals = "MarketInternals"
                case Options = "Options"
                case Spread = "Spread"
            }
            /// CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/productType`.
            public var productType: Components.Schemas.UserAccountPositionLimit.productTypePayload?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/riskDiscountContractGroupId`.
            public var riskDiscountContractGroupId: Swift.Int64?
            /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/productVerificationStatus`.
            @frozen public enum productVerificationStatusPayload: String, Codable, Hashable, Sendable {
                case Inactive = "Inactive"
                case Locked = "Locked"
                case ReadyForContracts = "ReadyForContracts"
                case ReadyToTrade = "ReadyToTrade"
                case Verified = "Verified"
            }
            /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/productVerificationStatus`.
            public var productVerificationStatus: Components.Schemas.UserAccountPositionLimit.productVerificationStatusPayload?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/contractGroupId`.
            public var contractGroupId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/active`.
            public var active: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/riskTimePeriodId`.
            public var riskTimePeriodId: Swift.Int64?
            /// Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/totalBy`.
            @frozen public enum totalByPayload: String, Codable, Hashable, Sendable {
                case Contract = "Contract"
                case ContractGroup = "ContractGroup"
                case DiscountGroup = "DiscountGroup"
                case Exchange = "Exchange"
                case Overall = "Overall"
                case Product = "Product"
                case ProductType = "ProductType"
            }
            /// Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/totalBy`.
            public var totalBy: Components.Schemas.UserAccountPositionLimit.totalByPayload
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/shortLimit`.
            public var shortLimit: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/longLimit`.
            public var longLimit: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/exposedLimit`.
            public var exposedLimit: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserAccountPositionLimit/accountId`.
            public var accountId: Swift.Int64
            /// Creates a new `UserAccountPositionLimit`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - contractId:
            ///   - productId:
            ///   - exchangeId:
            ///   - productType: CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///   - riskDiscountContractGroupId:
            ///   - productVerificationStatus: Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///   - contractGroupId:
            ///   - active:
            ///   - riskTimePeriodId:
            ///   - totalBy: Contract, ContractGroup, DiscountGroup, Exchange, Overall, Product, ProductType
            ///   - shortLimit:
            ///   - longLimit:
            ///   - exposedLimit:
            ///   - description:
            ///   - accountId:
            public init(
                id: Swift.Int64? = nil,
                contractId: Swift.Int64? = nil,
                productId: Swift.Int64? = nil,
                exchangeId: Swift.Int64? = nil,
                productType: Components.Schemas.UserAccountPositionLimit.productTypePayload? = nil,
                riskDiscountContractGroupId: Swift.Int64? = nil,
                productVerificationStatus: Components.Schemas.UserAccountPositionLimit.productVerificationStatusPayload? = nil,
                contractGroupId: Swift.Int64? = nil,
                active: Swift.Bool,
                riskTimePeriodId: Swift.Int64? = nil,
                totalBy: Components.Schemas.UserAccountPositionLimit.totalByPayload,
                shortLimit: Swift.Int32? = nil,
                longLimit: Swift.Int32? = nil,
                exposedLimit: Swift.Int32? = nil,
                description: Swift.String? = nil,
                accountId: Swift.Int64
            ) {
                self.id = id
                self.contractId = contractId
                self.productId = productId
                self.exchangeId = exchangeId
                self.productType = productType
                self.riskDiscountContractGroupId = riskDiscountContractGroupId
                self.productVerificationStatus = productVerificationStatus
                self.contractGroupId = contractGroupId
                self.active = active
                self.riskTimePeriodId = riskTimePeriodId
                self.totalBy = totalBy
                self.shortLimit = shortLimit
                self.longLimit = longLimit
                self.exposedLimit = exposedLimit
                self.description = description
                self.accountId = accountId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case contractId
                case productId
                case exchangeId
                case productType
                case riskDiscountContractGroupId
                case productVerificationStatus
                case contractGroupId
                case active
                case riskTimePeriodId
                case totalBy
                case shortLimit
                case longLimit
                case exposedLimit
                case description
                case accountId
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter`.
        public struct UserAccountRiskParameter: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/contractId`.
            public var contractId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/productId`.
            public var productId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/exchangeId`.
            public var exchangeId: Swift.Int64?
            /// CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/productType`.
            @frozen public enum productTypePayload: String, Codable, Hashable, Sendable {
                case CommonStock = "CommonStock"
                case Continuous = "Continuous"
                case Cryptocurrency = "Cryptocurrency"
                case Futures = "Futures"
                case MarketInternals = "MarketInternals"
                case Options = "Options"
                case Spread = "Spread"
            }
            /// CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/productType`.
            public var productType: Components.Schemas.UserAccountRiskParameter.productTypePayload?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/riskDiscountContractGroupId`.
            public var riskDiscountContractGroupId: Swift.Int64?
            /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/productVerificationStatus`.
            @frozen public enum productVerificationStatusPayload: String, Codable, Hashable, Sendable {
                case Inactive = "Inactive"
                case Locked = "Locked"
                case ReadyForContracts = "ReadyForContracts"
                case ReadyToTrade = "ReadyToTrade"
                case Verified = "Verified"
            }
            /// Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/productVerificationStatus`.
            public var productVerificationStatus: Components.Schemas.UserAccountRiskParameter.productVerificationStatusPayload?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/contractGroupId`.
            public var contractGroupId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/maxOpeningOrderQty`.
            public var maxOpeningOrderQty: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/maxClosingOrderQty`.
            public var maxClosingOrderQty: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/maxBackMonth`.
            public var maxBackMonth: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/preExpirationDays`.
            public var preExpirationDays: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/marginPercentage`.
            public var marginPercentage: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/marginDollarValue`.
            public var marginDollarValue: Swift.Double?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/hardLimit`.
            public var hardLimit: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserAccountRiskParameter/userAccountPositionLimitId`.
            public var userAccountPositionLimitId: Swift.Int64
            /// Creates a new `UserAccountRiskParameter`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - contractId:
            ///   - productId:
            ///   - exchangeId:
            ///   - productType: CommonStock, Continuous, Cryptocurrency, Futures, MarketInternals, Options, Spread
            ///   - riskDiscountContractGroupId:
            ///   - productVerificationStatus: Inactive, Locked, ReadyForContracts, ReadyToTrade, Verified
            ///   - contractGroupId:
            ///   - maxOpeningOrderQty:
            ///   - maxClosingOrderQty:
            ///   - maxBackMonth:
            ///   - preExpirationDays:
            ///   - marginPercentage:
            ///   - marginDollarValue:
            ///   - hardLimit:
            ///   - userAccountPositionLimitId:
            public init(
                id: Swift.Int64? = nil,
                contractId: Swift.Int64? = nil,
                productId: Swift.Int64? = nil,
                exchangeId: Swift.Int64? = nil,
                productType: Components.Schemas.UserAccountRiskParameter.productTypePayload? = nil,
                riskDiscountContractGroupId: Swift.Int64? = nil,
                productVerificationStatus: Components.Schemas.UserAccountRiskParameter.productVerificationStatusPayload? = nil,
                contractGroupId: Swift.Int64? = nil,
                maxOpeningOrderQty: Swift.Int32? = nil,
                maxClosingOrderQty: Swift.Int32? = nil,
                maxBackMonth: Swift.Int32? = nil,
                preExpirationDays: Swift.Int32? = nil,
                marginPercentage: Swift.Double? = nil,
                marginDollarValue: Swift.Double? = nil,
                hardLimit: Swift.Bool? = nil,
                userAccountPositionLimitId: Swift.Int64
            ) {
                self.id = id
                self.contractId = contractId
                self.productId = productId
                self.exchangeId = exchangeId
                self.productType = productType
                self.riskDiscountContractGroupId = riskDiscountContractGroupId
                self.productVerificationStatus = productVerificationStatus
                self.contractGroupId = contractGroupId
                self.maxOpeningOrderQty = maxOpeningOrderQty
                self.maxClosingOrderQty = maxClosingOrderQty
                self.maxBackMonth = maxBackMonth
                self.preExpirationDays = preExpirationDays
                self.marginPercentage = marginPercentage
                self.marginDollarValue = marginDollarValue
                self.hardLimit = hardLimit
                self.userAccountPositionLimitId = userAccountPositionLimitId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case contractId
                case productId
                case exchangeId
                case productType
                case riskDiscountContractGroupId
                case productVerificationStatus
                case contractGroupId
                case maxOpeningOrderQty
                case maxClosingOrderQty
                case maxBackMonth
                case preExpirationDays
                case marginPercentage
                case marginDollarValue
                case hardLimit
                case userAccountPositionLimitId
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserPlugin`.
        public struct UserPlugin: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserPlugin/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserPlugin/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/UserPlugin/timestamp`.
            public var timestamp: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/UserPlugin/planPrice`.
            public var planPrice: Swift.Double
            /// - Remark: Generated from `#/components/schemas/UserPlugin/creditCardTransactionId`.
            public var creditCardTransactionId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserPlugin/cashBalanceLogId`.
            public var cashBalanceLogId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserPlugin/creditCardId`.
            public var creditCardId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserPlugin/accountId`.
            public var accountId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserPlugin/pluginName`.
            public var pluginName: Swift.String
            /// - Remark: Generated from `#/components/schemas/UserPlugin/approval`.
            public var approval: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/UserPlugin/entitlementId`.
            public var entitlementId: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserPlugin/startDate`.
            public var startDate: Components.Schemas.TradeDate
            /// - Remark: Generated from `#/components/schemas/UserPlugin/expirationDate`.
            public var expirationDate: Components.Schemas.TradeDate?
            /// - Remark: Generated from `#/components/schemas/UserPlugin/paidAmount`.
            public var paidAmount: Swift.Double
            /// - Remark: Generated from `#/components/schemas/UserPlugin/autorenewal`.
            public var autorenewal: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/UserPlugin/planCategories`.
            public var planCategories: Swift.String?
            /// Creates a new `UserPlugin`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - timestamp:
            ///   - planPrice:
            ///   - creditCardTransactionId:
            ///   - cashBalanceLogId:
            ///   - creditCardId:
            ///   - accountId:
            ///   - pluginName:
            ///   - approval:
            ///   - entitlementId:
            ///   - startDate:
            ///   - expirationDate:
            ///   - paidAmount:
            ///   - autorenewal:
            ///   - planCategories:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                timestamp: Foundation.Date,
                planPrice: Swift.Double,
                creditCardTransactionId: Swift.Int64? = nil,
                cashBalanceLogId: Swift.Int64? = nil,
                creditCardId: Swift.Int64? = nil,
                accountId: Swift.Int64? = nil,
                pluginName: Swift.String,
                approval: Swift.Bool,
                entitlementId: Swift.Int64? = nil,
                startDate: Components.Schemas.TradeDate,
                expirationDate: Components.Schemas.TradeDate? = nil,
                paidAmount: Swift.Double,
                autorenewal: Swift.Bool? = nil,
                planCategories: Swift.String? = nil
            ) {
                self.id = id
                self.userId = userId
                self.timestamp = timestamp
                self.planPrice = planPrice
                self.creditCardTransactionId = creditCardTransactionId
                self.cashBalanceLogId = cashBalanceLogId
                self.creditCardId = creditCardId
                self.accountId = accountId
                self.pluginName = pluginName
                self.approval = approval
                self.entitlementId = entitlementId
                self.startDate = startDate
                self.expirationDate = expirationDate
                self.paidAmount = paidAmount
                self.autorenewal = autorenewal
                self.planCategories = planCategories
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case timestamp
                case planPrice
                case creditCardTransactionId
                case cashBalanceLogId
                case creditCardId
                case accountId
                case pluginName
                case approval
                case entitlementId
                case startDate
                case expirationDate
                case paidAmount
                case autorenewal
                case planCategories
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserProperty`.
        public struct UserProperty: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserProperty/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserProperty/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/UserProperty/propertyId`.
            public var propertyId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/UserProperty/value`.
            public var value: Swift.String?
            /// Creates a new `UserProperty`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - propertyId:
            ///   - value:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                propertyId: Swift.Int64,
                value: Swift.String? = nil
            ) {
                self.id = id
                self.userId = userId
                self.propertyId = propertyId
                self.value = value
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case propertyId
                case value
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserSession`.
        public struct UserSession: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserSession/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserSession/userId`.
            public var userId: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/UserSession/startTime`.
            public var startTime: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/UserSession/endTime`.
            public var endTime: Foundation.Date?
            /// - Remark: Generated from `#/components/schemas/UserSession/ipAddress`.
            public var ipAddress: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSession/appId`.
            public var appId: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSession/appVersion`.
            public var appVersion: Swift.String?
            /// - Remark: Generated from `#/components/schemas/UserSession/clientAppId`.
            public var clientAppId: Swift.Int64
            /// Creates a new `UserSession`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - userId:
            ///   - startTime:
            ///   - endTime:
            ///   - ipAddress:
            ///   - appId:
            ///   - appVersion:
            ///   - clientAppId:
            public init(
                id: Swift.Int64? = nil,
                userId: Swift.Int64,
                startTime: Foundation.Date,
                endTime: Foundation.Date? = nil,
                ipAddress: Swift.String? = nil,
                appId: Swift.String? = nil,
                appVersion: Swift.String? = nil,
                clientAppId: Swift.Int64
            ) {
                self.id = id
                self.userId = userId
                self.startTime = startTime
                self.endTime = endTime
                self.ipAddress = ipAddress
                self.appId = appId
                self.appVersion = appVersion
                self.clientAppId = clientAppId
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case userId
                case startTime
                case endTime
                case ipAddress
                case appId
                case appVersion
                case clientAppId
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserSessionStats`.
        public struct UserSessionStats: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UserSessionStats/id`.
            public var id: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/UserSessionStats/lastSessionTime`.
            public var lastSessionTime: Foundation.Date
            /// - Remark: Generated from `#/components/schemas/UserSessionStats/failedPasswords`.
            public var failedPasswords: Swift.Int32
            /// Creates a new `UserSessionStats`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - lastSessionTime:
            ///   - failedPasswords:
            public init(
                id: Swift.Int64? = nil,
                lastSessionTime: Foundation.Date,
                failedPasswords: Swift.Int32
            ) {
                self.id = id
                self.lastSessionTime = lastSessionTime
                self.failedPasswords = failedPasswords
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case lastSessionTime
                case failedPasswords
            }
        }
        /// - Remark: Generated from `#/components/schemas/UserStatusMessage`.
        public struct UserStatusMessage: Codable, Hashable, Sendable {
            /// Non-empty if the request failed
            ///
            /// - Remark: Generated from `#/components/schemas/UserStatusMessage/errorText`.
            public var errorText: Swift.String?
            /// Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            ///
            /// - Remark: Generated from `#/components/schemas/UserStatusMessage/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case Active = "Active"
                case Closed = "Closed"
                case Initiated = "Initiated"
                case TemporaryLocked = "TemporaryLocked"
                case UnconfirmedEmail = "UnconfirmedEmail"
            }
            /// Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            ///
            /// - Remark: Generated from `#/components/schemas/UserStatusMessage/status`.
            public var status: Components.Schemas.UserStatusMessage.statusPayload?
            /// Creates a new `UserStatusMessage`.
            ///
            /// - Parameters:
            ///   - errorText: Non-empty if the request failed
            ///   - status: Active, Closed, Initiated, TemporaryLocked, UnconfirmedEmail
            public init(
                errorText: Swift.String? = nil,
                status: Components.Schemas.UserStatusMessage.statusPayload? = nil
            ) {
                self.errorText = errorText
                self.status = status
            }
            public enum CodingKeys: String, CodingKey {
                case errorText
                case status
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {}
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}

/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// #### Request an access token using your user credentials and API Key. 
    ///
    /// See the [Access](/#tag/Access) section for more details. For a comprehensive guide on how to acquire and use an access token in the JavaScript language, see out [JavaScript tutorial](https://github.com/tradovate/example-api-js) repository. For usage examples using the C# language, see the [C# example](https://github.com/tradovate/example-api-csharp-trading) repository.
    ///
    /// ### Acquiring an Access Token
    ///
    /// ```js
    /// const URL = 'https://live.tradovateapi.com/v1'
    ///
    /// const credentials = {
    ///     name:       "Your credentials here",
    ///     password:   "Your credentials here",
    ///     appId:      "Sample App",
    ///     appVersion: "1.0",
    ///     cid:        0,
    ///     sec:        "Your API secret here"
    /// }
    ///
    /// async function getAccessToken() {
    ///     let response = await fetch(URL + '/auth/accessTokenRequest', {
    ///         method: 'POST',
    ///         headers: {
    ///             'Content-Type': 'application/json'
    ///         }
    ///     })
    ///     let result = await response.json()
    ///     return result // { accessToken, mdAccessToken, userId, ... }
    /// }
    ///
    /// //...
    ///
    /// async function main() {
    ///     const { accessToken, mdAccessToken, userId } = await getAccessToken()
    ///
    ///     //use access token
    /// }
    /// ```
    ///
    /// ### Using an Access Token
    ///
    /// ```js
    /// //use the Authorization: Bearer schema in API POST and GET requests
    ///
    /// //simple /account/list endpoint requires no body or query
    /// async function getAccounts() {
    ///     let response = await fetch(URL + '/account/list', {
    ///         method: 'GET',
    ///         headers: {
    ///             'Content-Type': 'application/json',
    ///             Authorization: `Bearer ${accessToken}` //Access Token use in HTTP requests
    ///         }
    ///     })
    ///     let result = await response.json()
    ///     return result
    /// }
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /auth/accesstokenrequest`.
    /// - Remark: Generated from `#/paths//auth/accesstokenrequest/post(accessTokenRequest)`.
    public enum accessTokenRequest {
        public static let id: Swift.String = "accessTokenRequest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/accesstokenrequest/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accessTokenRequest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accessTokenRequest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accessTokenRequest.Input.Headers
            /// - Remark: Generated from `#/paths/auth/accesstokenrequest/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/accesstokenrequest/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AccessTokenRequest)
            }
            public var body: Operations.accessTokenRequest.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.accessTokenRequest.Input.Headers = .init(),
                body: Operations.accessTokenRequest.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/accesstokenrequest/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/accesstokenrequest/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccessTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccessTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accessTokenRequest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accessTokenRequest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccessTokenResponse
            ///
            /// - Remark: Generated from `#/paths//auth/accesstokenrequest/post(accessTokenRequest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accessTokenRequest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accessTokenRequest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Shows Basic user data for the calling user.
    ///
    /// - Remark: HTTP `GET /auth/me`.
    /// - Remark: Generated from `#/paths//auth/me/get(me)`.
    public enum me {
        public static let id: Swift.String = "me"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/me/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.me.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.me.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.me.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.me.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/me/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/me/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OAuthMeResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OAuthMeResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.me.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.me.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OAuthMeResponse
            ///
            /// - Remark: Generated from `#/paths//auth/me/get(me)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.me.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.me.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Used to exchange your OAuth code for an access token.
    /// Using the OAuth authorization delegation flow, we can send a request to verify that our users are who they say they are. For more information on using OAuth with the Tradovate API see our [OAuth JavaScript tutorial](https://github.com/tradovate/example-api-oauth).
    ///
    /// - Remark: HTTP `POST /auth/oauthtoken`.
    /// - Remark: Generated from `#/paths//auth/oauthtoken/post(oAuthToken)`.
    public enum oAuthToken {
        public static let id: Swift.String = "oAuthToken"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/oauthtoken/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.oAuthToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.oAuthToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.oAuthToken.Input.Headers
            /// - Remark: Generated from `#/paths/auth/oauthtoken/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/oauthtoken/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.OAuthToken)
            }
            public var body: Operations.oAuthToken.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.oAuthToken.Input.Headers = .init(),
                body: Operations.oAuthToken.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/oauthtoken/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/oauthtoken/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OAuthTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OAuthTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.oAuthToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.oAuthToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OAuthTokenResponse
            ///
            /// - Remark: Generated from `#/paths//auth/oauthtoken/post(oAuthToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.oAuthToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.oAuthToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Request a renewal for an existing access token.
    ///
    /// - Remark: HTTP `GET /auth/renewaccesstoken`.
    /// - Remark: Generated from `#/paths//auth/renewaccesstoken/get(renewAccessToken)`.
    public enum renewAccessToken {
        public static let id: Swift.String = "renewAccessToken"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/auth/renewaccesstoken/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.renewAccessToken.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.renewAccessToken.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.renewAccessToken.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.renewAccessToken.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/auth/renewaccesstoken/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/auth/renewaccesstoken/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccessTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccessTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.renewAccessToken.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.renewAccessToken.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccessTokenResponse
            ///
            /// - Remark: Generated from `#/paths//auth/renewaccesstoken/get(renewAccessToken)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.renewAccessToken.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.renewAccessToken.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Contract type related to ContractMaturity entity
    ///
    /// - Remark: HTTP `GET /contract/deps`.
    /// - Remark: Generated from `#/paths//contract/deps/get(contractDependents)`.
    public enum contractDependents {
        public static let id: Swift.String = "contractDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of ContractMaturity entity
                ///
                /// - Remark: Generated from `#/paths/contract/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of ContractMaturity entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.contractDependents.Input.Query
            /// - Remark: Generated from `#/paths/contract/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractDependents.Input.Query,
                headers: Operations.contractDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Contract])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Contract] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Contract
            ///
            /// - Remark: Generated from `#/paths//contract/deps/get(contractDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Contract type by its name
    ///
    /// - Remark: HTTP `GET /contract/find`.
    /// - Remark: Generated from `#/paths//contract/find/get(contractFind)`.
    public enum contractFind {
        public static let id: Swift.String = "contractFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.contractFind.Input.Query
            /// - Remark: Generated from `#/paths/contract/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractFind.Input.Query,
                headers: Operations.contractFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Contract)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Contract {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Contract
            ///
            /// - Remark: Generated from `#/paths//contract/find/get(contractFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Query the a product's fee parameters.
    ///
    /// - Remark: HTTP `POST /contract/getproductfeeparams`.
    /// - Remark: Generated from `#/paths//contract/getproductfeeparams/post(getProductFeeParams)`.
    public enum getProductFeeParams {
        public static let id: Swift.String = "getProductFeeParams"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/getproductfeeparams/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getProductFeeParams.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getProductFeeParams.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getProductFeeParams.Input.Headers
            /// - Remark: Generated from `#/paths/contract/getproductfeeparams/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/getproductfeeparams/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.GetProductFeeParams)
            }
            public var body: Operations.getProductFeeParams.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.getProductFeeParams.Input.Headers = .init(),
                body: Operations.getProductFeeParams.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/getproductfeeparams/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/getproductfeeparams/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProductFeeParamsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProductFeeParamsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getProductFeeParams.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getProductFeeParams.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductFeeParamsResponse
            ///
            /// - Remark: Generated from `#/paths//contract/getproductfeeparams/post(getProductFeeParams)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getProductFeeParams.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getProductFeeParams.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Contract type by its id
    ///
    /// - Remark: HTTP `GET /contract/item`.
    /// - Remark: Generated from `#/paths//contract/item/get(contractItem)`.
    public enum contractItem {
        public static let id: Swift.String = "contractItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.contractItem.Input.Query
            /// - Remark: Generated from `#/paths/contract/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractItem.Input.Query,
                headers: Operations.contractItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Contract)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Contract {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Contract
            ///
            /// - Remark: Generated from `#/paths//contract/item/get(contractItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Contract type by its ids
    ///
    /// - Remark: HTTP `GET /contract/items`.
    /// - Remark: Generated from `#/paths//contract/items/get(contractItems)`.
    public enum contractItems {
        public static let id: Swift.String = "contractItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.contractItems.Input.Query
            /// - Remark: Generated from `#/paths/contract/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractItems.Input.Query,
                headers: Operations.contractItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Contract])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Contract] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Contract
            ///
            /// - Remark: Generated from `#/paths//contract/items/get(contractItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Contract type related to multiple entities of ContractMaturity type
    ///
    /// - Remark: HTTP `GET /contract/ldeps`.
    /// - Remark: Generated from `#/paths//contract/ldeps/get(contractLDependents)`.
    public enum contractLDependents {
        public static let id: Swift.String = "contractLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of ContractMaturity entities
                ///
                /// - Remark: Generated from `#/paths/contract/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of ContractMaturity entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.contractLDependents.Input.Query
            /// - Remark: Generated from `#/paths/contract/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractLDependents.Input.Query,
                headers: Operations.contractLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Contract])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Contract] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Contract
            ///
            /// - Remark: Generated from `#/paths//contract/ldeps/get(contractLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Request the best upcoming maturity date for a given contract.
    ///
    /// - Remark: HTTP `POST /contract/rollcontract`.
    /// - Remark: Generated from `#/paths//contract/rollcontract/post(rollContract)`.
    public enum rollContract {
        public static let id: Swift.String = "rollContract"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/rollcontract/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.rollContract.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.rollContract.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.rollContract.Input.Headers
            /// - Remark: Generated from `#/paths/contract/rollcontract/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/rollcontract/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RollContract)
            }
            public var body: Operations.rollContract.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.rollContract.Input.Headers = .init(),
                body: Operations.rollContract.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/rollcontract/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/rollcontract/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RollContractResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RollContractResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.rollContract.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.rollContract.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// RollContractResponse
            ///
            /// - Remark: Generated from `#/paths//contract/rollcontract/post(rollContract)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.rollContract.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.rollContract.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /contract/rollcontracts`.
    /// - Remark: Generated from `#/paths//contract/rollcontracts/post(rollContracts)`.
    public enum rollContracts {
        public static let id: Swift.String = "rollContracts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/rollcontracts/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.rollContracts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.rollContracts.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.rollContracts.Input.Headers
            /// - Remark: Generated from `#/paths/contract/rollcontracts/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/rollcontracts/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RollContracts)
            }
            public var body: Operations.rollContracts.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.rollContracts.Input.Headers = .init(),
                body: Operations.rollContracts.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/rollcontracts/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/rollcontracts/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.RollContractsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RollContractsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.rollContracts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.rollContracts.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// RollContractsResponse
            ///
            /// - Remark: Generated from `#/paths//contract/rollcontracts/post(rollContracts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.rollContracts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.rollContracts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of Contract type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /contract/suggest`.
    /// - Remark: Generated from `#/paths//contract/suggest/get(contractSuggest)`.
    public enum contractSuggest {
        public static let id: Swift.String = "contractSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contract/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/contract/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/contract/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.contractSuggest.Input.Query
            /// - Remark: Generated from `#/paths/contract/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractSuggest.Input.Query,
                headers: Operations.contractSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contract/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contract/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Contract])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Contract] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Contract
            ///
            /// - Remark: Generated from `#/paths//contract/suggest/get(contractSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ContractGroup type by its name
    ///
    /// - Remark: HTTP `GET /contractGroup/find`.
    /// - Remark: Generated from `#/paths//contractGroup/find/get(contractGroupFind)`.
    public enum contractGroupFind {
        public static let id: Swift.String = "contractGroupFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractGroup/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractGroup/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.contractGroupFind.Input.Query
            /// - Remark: Generated from `#/paths/contractGroup/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractGroupFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractGroupFind.Input.Query,
                headers: Operations.contractGroupFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractGroup/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractGroup/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContractGroup)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ContractGroup {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractGroupFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractGroupFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractGroup
            ///
            /// - Remark: Generated from `#/paths//contractGroup/find/get(contractGroupFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractGroupFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractGroupFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ContractGroup type by its id
    ///
    /// - Remark: HTTP `GET /contractGroup/item`.
    /// - Remark: Generated from `#/paths//contractGroup/item/get(contractGroupItem)`.
    public enum contractGroupItem {
        public static let id: Swift.String = "contractGroupItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractGroup/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractGroup/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.contractGroupItem.Input.Query
            /// - Remark: Generated from `#/paths/contractGroup/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractGroupItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractGroupItem.Input.Query,
                headers: Operations.contractGroupItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractGroup/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractGroup/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContractGroup)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ContractGroup {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractGroupItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractGroupItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractGroup
            ///
            /// - Remark: Generated from `#/paths//contractGroup/item/get(contractGroupItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractGroupItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractGroupItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ContractGroup type by its ids
    ///
    /// - Remark: HTTP `GET /contractGroup/items`.
    /// - Remark: Generated from `#/paths//contractGroup/items/get(contractGroupItems)`.
    public enum contractGroupItems {
        public static let id: Swift.String = "contractGroupItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractGroup/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractGroup/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.contractGroupItems.Input.Query
            /// - Remark: Generated from `#/paths/contractGroup/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractGroupItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractGroupItems.Input.Query,
                headers: Operations.contractGroupItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractGroup/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractGroup/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractGroup])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractGroup] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractGroupItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractGroupItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractGroup
            ///
            /// - Remark: Generated from `#/paths//contractGroup/items/get(contractGroupItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractGroupItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractGroupItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ContractGroup type
    ///
    /// - Remark: HTTP `GET /contractGroup/list`.
    /// - Remark: Generated from `#/paths//contractGroup/list/get(contractGroupList)`.
    public enum contractGroupList {
        public static let id: Swift.String = "contractGroupList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractGroup/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractGroupList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.contractGroupList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractGroup/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractGroup/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractGroup])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractGroup] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractGroupList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractGroupList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractGroup
            ///
            /// - Remark: Generated from `#/paths//contractGroup/list/get(contractGroupList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractGroupList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractGroupList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of ContractGroup type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /contractGroup/suggest`.
    /// - Remark: Generated from `#/paths//contractGroup/suggest/get(contractGroupSuggest)`.
    public enum contractGroupSuggest {
        public static let id: Swift.String = "contractGroupSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractGroup/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/contractGroup/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/contractGroup/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.contractGroupSuggest.Input.Query
            /// - Remark: Generated from `#/paths/contractGroup/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractGroupSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractGroupSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractGroupSuggest.Input.Query,
                headers: Operations.contractGroupSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractGroup/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractGroup/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractGroup])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractGroup] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractGroupSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractGroupSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractGroup
            ///
            /// - Remark: Generated from `#/paths//contractGroup/suggest/get(contractGroupSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractGroupSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractGroupSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ContractMaturity type related to Product entity
    ///
    /// - Remark: HTTP `GET /contractMaturity/deps`.
    /// - Remark: Generated from `#/paths//contractMaturity/deps/get(contractMaturityDependents)`.
    public enum contractMaturityDependents {
        public static let id: Swift.String = "contractMaturityDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractMaturity/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Product entity
                ///
                /// - Remark: Generated from `#/paths/contractMaturity/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Product entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.contractMaturityDependents.Input.Query
            /// - Remark: Generated from `#/paths/contractMaturity/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMaturityDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMaturityDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractMaturityDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractMaturityDependents.Input.Query,
                headers: Operations.contractMaturityDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMaturity/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractMaturity/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractMaturity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractMaturity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractMaturityDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractMaturityDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractMaturity
            ///
            /// - Remark: Generated from `#/paths//contractMaturity/deps/get(contractMaturityDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractMaturityDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractMaturityDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ContractMaturity type by its id
    ///
    /// - Remark: HTTP `GET /contractMaturity/item`.
    /// - Remark: Generated from `#/paths//contractMaturity/item/get(contractMaturityItem)`.
    public enum contractMaturityItem {
        public static let id: Swift.String = "contractMaturityItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractMaturity/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMaturity/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.contractMaturityItem.Input.Query
            /// - Remark: Generated from `#/paths/contractMaturity/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMaturityItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMaturityItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractMaturityItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractMaturityItem.Input.Query,
                headers: Operations.contractMaturityItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMaturity/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractMaturity/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContractMaturity)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ContractMaturity {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractMaturityItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractMaturityItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractMaturity
            ///
            /// - Remark: Generated from `#/paths//contractMaturity/item/get(contractMaturityItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractMaturityItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractMaturityItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ContractMaturity type by its ids
    ///
    /// - Remark: HTTP `GET /contractMaturity/items`.
    /// - Remark: Generated from `#/paths//contractMaturity/items/get(contractMaturityItems)`.
    public enum contractMaturityItems {
        public static let id: Swift.String = "contractMaturityItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractMaturity/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMaturity/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.contractMaturityItems.Input.Query
            /// - Remark: Generated from `#/paths/contractMaturity/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMaturityItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMaturityItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractMaturityItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractMaturityItems.Input.Query,
                headers: Operations.contractMaturityItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMaturity/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractMaturity/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractMaturity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractMaturity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractMaturityItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractMaturityItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractMaturity
            ///
            /// - Remark: Generated from `#/paths//contractMaturity/items/get(contractMaturityItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractMaturityItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractMaturityItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ContractMaturity type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /contractMaturity/ldeps`.
    /// - Remark: Generated from `#/paths//contractMaturity/ldeps/get(contractMaturityLDependents)`.
    public enum contractMaturityLDependents {
        public static let id: Swift.String = "contractMaturityLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractMaturity/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Product entities
                ///
                /// - Remark: Generated from `#/paths/contractMaturity/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Product entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.contractMaturityLDependents.Input.Query
            /// - Remark: Generated from `#/paths/contractMaturity/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMaturityLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMaturityLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractMaturityLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractMaturityLDependents.Input.Query,
                headers: Operations.contractMaturityLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMaturity/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractMaturity/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractMaturity])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractMaturity] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractMaturityLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractMaturityLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractMaturity
            ///
            /// - Remark: Generated from `#/paths//contractMaturity/ldeps/get(contractMaturityLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractMaturityLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractMaturityLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Currency type by its name
    ///
    /// - Remark: HTTP `GET /currency/find`.
    /// - Remark: Generated from `#/paths//currency/find/get(currencyFind)`.
    public enum currencyFind {
        public static let id: Swift.String = "currencyFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currency/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currency/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.currencyFind.Input.Query
            /// - Remark: Generated from `#/paths/currency/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.currencyFind.Input.Query,
                headers: Operations.currencyFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currency/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currency/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Currency)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Currency {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Currency
            ///
            /// - Remark: Generated from `#/paths//currency/find/get(currencyFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Currency type by its id
    ///
    /// - Remark: HTTP `GET /currency/item`.
    /// - Remark: Generated from `#/paths//currency/item/get(currencyItem)`.
    public enum currencyItem {
        public static let id: Swift.String = "currencyItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currency/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currency/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.currencyItem.Input.Query
            /// - Remark: Generated from `#/paths/currency/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.currencyItem.Input.Query,
                headers: Operations.currencyItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currency/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currency/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Currency)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Currency {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Currency
            ///
            /// - Remark: Generated from `#/paths//currency/item/get(currencyItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Currency type by its ids
    ///
    /// - Remark: HTTP `GET /currency/items`.
    /// - Remark: Generated from `#/paths//currency/items/get(currencyItems)`.
    public enum currencyItems {
        public static let id: Swift.String = "currencyItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currency/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currency/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.currencyItems.Input.Query
            /// - Remark: Generated from `#/paths/currency/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.currencyItems.Input.Query,
                headers: Operations.currencyItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currency/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currency/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Currency])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Currency] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Currency
            ///
            /// - Remark: Generated from `#/paths//currency/items/get(currencyItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Currency type
    ///
    /// - Remark: HTTP `GET /currency/list`.
    /// - Remark: Generated from `#/paths//currency/list/get(currencyList)`.
    public enum currencyList {
        public static let id: Swift.String = "currencyList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currency/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.currencyList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currency/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currency/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Currency])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Currency] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Currency
            ///
            /// - Remark: Generated from `#/paths//currency/list/get(currencyList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of Currency type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /currency/suggest`.
    /// - Remark: Generated from `#/paths//currency/suggest/get(currencySuggest)`.
    public enum currencySuggest {
        public static let id: Swift.String = "currencySuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currency/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/currency/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/currency/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.currencySuggest.Input.Query
            /// - Remark: Generated from `#/paths/currency/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencySuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencySuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencySuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.currencySuggest.Input.Query,
                headers: Operations.currencySuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currency/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currency/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Currency])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Currency] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencySuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencySuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Currency
            ///
            /// - Remark: Generated from `#/paths//currency/suggest/get(currencySuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencySuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencySuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CurrencyRate type related to Currency entity
    ///
    /// - Remark: HTTP `GET /currencyRate/deps`.
    /// - Remark: Generated from `#/paths//currencyRate/deps/get(currencyRateDependents)`.
    public enum currencyRateDependents {
        public static let id: Swift.String = "currencyRateDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currencyRate/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Currency entity
                ///
                /// - Remark: Generated from `#/paths/currencyRate/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Currency entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.currencyRateDependents.Input.Query
            /// - Remark: Generated from `#/paths/currencyRate/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyRateDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.currencyRateDependents.Input.Query,
                headers: Operations.currencyRateDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currencyRate/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currencyRate/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CurrencyRate])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CurrencyRate] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyRateDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyRateDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CurrencyRate
            ///
            /// - Remark: Generated from `#/paths//currencyRate/deps/get(currencyRateDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyRateDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyRateDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of CurrencyRate type by its id
    ///
    /// - Remark: HTTP `GET /currencyRate/item`.
    /// - Remark: Generated from `#/paths//currencyRate/item/get(currencyRateItem)`.
    public enum currencyRateItem {
        public static let id: Swift.String = "currencyRateItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currencyRate/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currencyRate/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.currencyRateItem.Input.Query
            /// - Remark: Generated from `#/paths/currencyRate/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyRateItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.currencyRateItem.Input.Query,
                headers: Operations.currencyRateItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currencyRate/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currencyRate/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CurrencyRate)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CurrencyRate {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyRateItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyRateItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CurrencyRate
            ///
            /// - Remark: Generated from `#/paths//currencyRate/item/get(currencyRateItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyRateItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyRateItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of CurrencyRate type by its ids
    ///
    /// - Remark: HTTP `GET /currencyRate/items`.
    /// - Remark: Generated from `#/paths//currencyRate/items/get(currencyRateItems)`.
    public enum currencyRateItems {
        public static let id: Swift.String = "currencyRateItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currencyRate/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currencyRate/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.currencyRateItems.Input.Query
            /// - Remark: Generated from `#/paths/currencyRate/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyRateItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.currencyRateItems.Input.Query,
                headers: Operations.currencyRateItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currencyRate/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currencyRate/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CurrencyRate])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CurrencyRate] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyRateItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyRateItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CurrencyRate
            ///
            /// - Remark: Generated from `#/paths//currencyRate/items/get(currencyRateItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyRateItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyRateItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CurrencyRate type related to multiple entities of Currency type
    ///
    /// - Remark: HTTP `GET /currencyRate/ldeps`.
    /// - Remark: Generated from `#/paths//currencyRate/ldeps/get(currencyRateLDependents)`.
    public enum currencyRateLDependents {
        public static let id: Swift.String = "currencyRateLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currencyRate/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Currency entities
                ///
                /// - Remark: Generated from `#/paths/currencyRate/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Currency entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.currencyRateLDependents.Input.Query
            /// - Remark: Generated from `#/paths/currencyRate/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyRateLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.currencyRateLDependents.Input.Query,
                headers: Operations.currencyRateLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currencyRate/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currencyRate/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CurrencyRate])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CurrencyRate] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyRateLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyRateLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CurrencyRate
            ///
            /// - Remark: Generated from `#/paths//currencyRate/ldeps/get(currencyRateLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyRateLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyRateLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CurrencyRate type
    ///
    /// - Remark: HTTP `GET /currencyRate/list`.
    /// - Remark: Generated from `#/paths//currencyRate/list/get(currencyRateList)`.
    public enum currencyRateList {
        public static let id: Swift.String = "currencyRateList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/currencyRate/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.currencyRateList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.currencyRateList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.currencyRateList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/currencyRate/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/currencyRate/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CurrencyRate])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CurrencyRate] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.currencyRateList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.currencyRateList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CurrencyRate
            ///
            /// - Remark: Generated from `#/paths//currencyRate/list/get(currencyRateList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.currencyRateList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.currencyRateList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Exchange type by its name
    ///
    /// - Remark: HTTP `GET /exchange/find`.
    /// - Remark: Generated from `#/paths//exchange/find/get(exchangeFind)`.
    public enum exchangeFind {
        public static let id: Swift.String = "exchangeFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exchange/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exchange/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.exchangeFind.Input.Query
            /// - Remark: Generated from `#/paths/exchange/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.exchangeFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.exchangeFind.Input.Query,
                headers: Operations.exchangeFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exchange/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exchange/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Exchange)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Exchange {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.exchangeFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.exchangeFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Exchange
            ///
            /// - Remark: Generated from `#/paths//exchange/find/get(exchangeFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.exchangeFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.exchangeFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Exchange type by its id
    ///
    /// - Remark: HTTP `GET /exchange/item`.
    /// - Remark: Generated from `#/paths//exchange/item/get(exchangeItem)`.
    public enum exchangeItem {
        public static let id: Swift.String = "exchangeItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exchange/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exchange/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.exchangeItem.Input.Query
            /// - Remark: Generated from `#/paths/exchange/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.exchangeItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.exchangeItem.Input.Query,
                headers: Operations.exchangeItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exchange/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exchange/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Exchange)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Exchange {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.exchangeItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.exchangeItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Exchange
            ///
            /// - Remark: Generated from `#/paths//exchange/item/get(exchangeItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.exchangeItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.exchangeItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Exchange type by its ids
    ///
    /// - Remark: HTTP `GET /exchange/items`.
    /// - Remark: Generated from `#/paths//exchange/items/get(exchangeItems)`.
    public enum exchangeItems {
        public static let id: Swift.String = "exchangeItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exchange/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exchange/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.exchangeItems.Input.Query
            /// - Remark: Generated from `#/paths/exchange/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.exchangeItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.exchangeItems.Input.Query,
                headers: Operations.exchangeItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exchange/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exchange/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Exchange])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Exchange] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.exchangeItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.exchangeItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Exchange
            ///
            /// - Remark: Generated from `#/paths//exchange/items/get(exchangeItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.exchangeItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.exchangeItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Exchange type
    ///
    /// - Remark: HTTP `GET /exchange/list`.
    /// - Remark: Generated from `#/paths//exchange/list/get(exchangeList)`.
    public enum exchangeList {
        public static let id: Swift.String = "exchangeList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exchange/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.exchangeList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.exchangeList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exchange/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exchange/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Exchange])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Exchange] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.exchangeList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.exchangeList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Exchange
            ///
            /// - Remark: Generated from `#/paths//exchange/list/get(exchangeList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.exchangeList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.exchangeList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of Exchange type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /exchange/suggest`.
    /// - Remark: Generated from `#/paths//exchange/suggest/get(exchangeSuggest)`.
    public enum exchangeSuggest {
        public static let id: Swift.String = "exchangeSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/exchange/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/exchange/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/exchange/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.exchangeSuggest.Input.Query
            /// - Remark: Generated from `#/paths/exchange/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.exchangeSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.exchangeSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.exchangeSuggest.Input.Query,
                headers: Operations.exchangeSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/exchange/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/exchange/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Exchange])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Exchange] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.exchangeSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.exchangeSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Exchange
            ///
            /// - Remark: Generated from `#/paths//exchange/suggest/get(exchangeSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.exchangeSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.exchangeSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Product type related to Exchange entity
    ///
    /// - Remark: HTTP `GET /product/deps`.
    /// - Remark: Generated from `#/paths//product/deps/get(productDependents)`.
    public enum productDependents {
        public static let id: Swift.String = "productDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/product/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Exchange entity
                ///
                /// - Remark: Generated from `#/paths/product/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Exchange entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.productDependents.Input.Query
            /// - Remark: Generated from `#/paths/product/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productDependents.Input.Query,
                headers: Operations.productDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/product/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Product])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Product] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Product
            ///
            /// - Remark: Generated from `#/paths//product/deps/get(productDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Product type by its name
    ///
    /// - Remark: HTTP `GET /product/find`.
    /// - Remark: Generated from `#/paths//product/find/get(productFind)`.
    public enum productFind {
        public static let id: Swift.String = "productFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/product/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.productFind.Input.Query
            /// - Remark: Generated from `#/paths/product/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productFind.Input.Query,
                headers: Operations.productFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/product/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Product)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Product {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Product
            ///
            /// - Remark: Generated from `#/paths//product/find/get(productFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Product type by its id
    ///
    /// - Remark: HTTP `GET /product/item`.
    /// - Remark: Generated from `#/paths//product/item/get(productItem)`.
    public enum productItem {
        public static let id: Swift.String = "productItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/product/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.productItem.Input.Query
            /// - Remark: Generated from `#/paths/product/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productItem.Input.Query,
                headers: Operations.productItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/product/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Product)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Product {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Product
            ///
            /// - Remark: Generated from `#/paths//product/item/get(productItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Product type by its ids
    ///
    /// - Remark: HTTP `GET /product/items`.
    /// - Remark: Generated from `#/paths//product/items/get(productItems)`.
    public enum productItems {
        public static let id: Swift.String = "productItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/product/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.productItems.Input.Query
            /// - Remark: Generated from `#/paths/product/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productItems.Input.Query,
                headers: Operations.productItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/product/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Product])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Product] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Product
            ///
            /// - Remark: Generated from `#/paths//product/items/get(productItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Product type related to multiple entities of Exchange type
    ///
    /// - Remark: HTTP `GET /product/ldeps`.
    /// - Remark: Generated from `#/paths//product/ldeps/get(productLDependents)`.
    public enum productLDependents {
        public static let id: Swift.String = "productLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/product/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Exchange entities
                ///
                /// - Remark: Generated from `#/paths/product/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Exchange entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.productLDependents.Input.Query
            /// - Remark: Generated from `#/paths/product/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productLDependents.Input.Query,
                headers: Operations.productLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/product/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Product])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Product] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Product
            ///
            /// - Remark: Generated from `#/paths//product/ldeps/get(productLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Product type
    ///
    /// - Remark: HTTP `GET /product/list`.
    /// - Remark: Generated from `#/paths//product/list/get(productList)`.
    public enum productList {
        public static let id: Swift.String = "productList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/product/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.productList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/product/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Product])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Product] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Product
            ///
            /// - Remark: Generated from `#/paths//product/list/get(productList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of Product type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /product/suggest`.
    /// - Remark: Generated from `#/paths//product/suggest/get(productSuggest)`.
    public enum productSuggest {
        public static let id: Swift.String = "productSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/product/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/product/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/product/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.productSuggest.Input.Query
            /// - Remark: Generated from `#/paths/product/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productSuggest.Input.Query,
                headers: Operations.productSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/product/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/product/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Product])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Product] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Product
            ///
            /// - Remark: Generated from `#/paths//product/suggest/get(productSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ProductSession type related to Product entity
    ///
    /// - Remark: HTTP `GET /productSession/deps`.
    /// - Remark: Generated from `#/paths//productSession/deps/get(productSessionDependents)`.
    public enum productSessionDependents {
        public static let id: Swift.String = "productSessionDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productSession/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Product entity
                ///
                /// - Remark: Generated from `#/paths/productSession/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Product entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.productSessionDependents.Input.Query
            /// - Remark: Generated from `#/paths/productSession/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSessionDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSessionDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productSessionDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productSessionDependents.Input.Query,
                headers: Operations.productSessionDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productSession/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productSession/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProductSession])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ProductSession] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productSessionDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productSessionDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductSession
            ///
            /// - Remark: Generated from `#/paths//productSession/deps/get(productSessionDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productSessionDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productSessionDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ProductSession type by its id
    ///
    /// - Remark: HTTP `GET /productSession/item`.
    /// - Remark: Generated from `#/paths//productSession/item/get(productSessionItem)`.
    public enum productSessionItem {
        public static let id: Swift.String = "productSessionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productSession/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productSession/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.productSessionItem.Input.Query
            /// - Remark: Generated from `#/paths/productSession/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSessionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSessionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productSessionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productSessionItem.Input.Query,
                headers: Operations.productSessionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productSession/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productSession/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProductSession)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProductSession {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productSessionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productSessionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductSession
            ///
            /// - Remark: Generated from `#/paths//productSession/item/get(productSessionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productSessionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productSessionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ProductSession type by its ids
    ///
    /// - Remark: HTTP `GET /productSession/items`.
    /// - Remark: Generated from `#/paths//productSession/items/get(productSessionItems)`.
    public enum productSessionItems {
        public static let id: Swift.String = "productSessionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productSession/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productSession/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.productSessionItems.Input.Query
            /// - Remark: Generated from `#/paths/productSession/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSessionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSessionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productSessionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productSessionItems.Input.Query,
                headers: Operations.productSessionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productSession/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productSession/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProductSession])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ProductSession] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productSessionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productSessionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductSession
            ///
            /// - Remark: Generated from `#/paths//productSession/items/get(productSessionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productSessionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productSessionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ProductSession type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /productSession/ldeps`.
    /// - Remark: Generated from `#/paths//productSession/ldeps/get(productSessionLDependents)`.
    public enum productSessionLDependents {
        public static let id: Swift.String = "productSessionLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productSession/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Product entities
                ///
                /// - Remark: Generated from `#/paths/productSession/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Product entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.productSessionLDependents.Input.Query
            /// - Remark: Generated from `#/paths/productSession/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSessionLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productSessionLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productSessionLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productSessionLDependents.Input.Query,
                headers: Operations.productSessionLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productSession/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productSession/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProductSession])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ProductSession] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productSessionLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productSessionLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductSession
            ///
            /// - Remark: Generated from `#/paths//productSession/ldeps/get(productSessionLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productSessionLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productSessionLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of SpreadDefinition type by its id
    ///
    /// - Remark: HTTP `GET /spreadDefinition/item`.
    /// - Remark: Generated from `#/paths//spreadDefinition/item/get(spreadDefinitionItem)`.
    public enum spreadDefinitionItem {
        public static let id: Swift.String = "spreadDefinitionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/spreadDefinition/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/spreadDefinition/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.spreadDefinitionItem.Input.Query
            /// - Remark: Generated from `#/paths/spreadDefinition/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.spreadDefinitionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.spreadDefinitionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.spreadDefinitionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.spreadDefinitionItem.Input.Query,
                headers: Operations.spreadDefinitionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/spreadDefinition/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/spreadDefinition/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SpreadDefinition)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SpreadDefinition {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.spreadDefinitionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.spreadDefinitionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SpreadDefinition
            ///
            /// - Remark: Generated from `#/paths//spreadDefinition/item/get(spreadDefinitionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.spreadDefinitionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.spreadDefinitionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of SpreadDefinition type by its ids
    ///
    /// - Remark: HTTP `GET /spreadDefinition/items`.
    /// - Remark: Generated from `#/paths//spreadDefinition/items/get(spreadDefinitionItems)`.
    public enum spreadDefinitionItems {
        public static let id: Swift.String = "spreadDefinitionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/spreadDefinition/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/spreadDefinition/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.spreadDefinitionItems.Input.Query
            /// - Remark: Generated from `#/paths/spreadDefinition/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.spreadDefinitionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.spreadDefinitionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.spreadDefinitionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.spreadDefinitionItems.Input.Query,
                headers: Operations.spreadDefinitionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/spreadDefinition/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/spreadDefinition/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.SpreadDefinition])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.SpreadDefinition] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.spreadDefinitionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.spreadDefinitionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SpreadDefinition
            ///
            /// - Remark: Generated from `#/paths//spreadDefinition/items/get(spreadDefinitionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.spreadDefinitionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.spreadDefinitionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Command type related to Order entity
    ///
    /// - Remark: HTTP `GET /command/deps`.
    /// - Remark: Generated from `#/paths//command/deps/get(commandDependents)`.
    public enum commandDependents {
        public static let id: Swift.String = "commandDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/command/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Order entity
                ///
                /// - Remark: Generated from `#/paths/command/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Order entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.commandDependents.Input.Query
            /// - Remark: Generated from `#/paths/command/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.commandDependents.Input.Query,
                headers: Operations.commandDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/command/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/command/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Command])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Command] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Command
            ///
            /// - Remark: Generated from `#/paths//command/deps/get(commandDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Command type by its id
    ///
    /// - Remark: HTTP `GET /command/item`.
    /// - Remark: Generated from `#/paths//command/item/get(commandItem)`.
    public enum commandItem {
        public static let id: Swift.String = "commandItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/command/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/command/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.commandItem.Input.Query
            /// - Remark: Generated from `#/paths/command/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.commandItem.Input.Query,
                headers: Operations.commandItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/command/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/command/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Command)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Command {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Command
            ///
            /// - Remark: Generated from `#/paths//command/item/get(commandItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Command type by its ids
    ///
    /// - Remark: HTTP `GET /command/items`.
    /// - Remark: Generated from `#/paths//command/items/get(commandItems)`.
    public enum commandItems {
        public static let id: Swift.String = "commandItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/command/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/command/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.commandItems.Input.Query
            /// - Remark: Generated from `#/paths/command/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.commandItems.Input.Query,
                headers: Operations.commandItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/command/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/command/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Command])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Command] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Command
            ///
            /// - Remark: Generated from `#/paths//command/items/get(commandItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Command type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /command/ldeps`.
    /// - Remark: Generated from `#/paths//command/ldeps/get(commandLDependents)`.
    public enum commandLDependents {
        public static let id: Swift.String = "commandLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/command/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Order entities
                ///
                /// - Remark: Generated from `#/paths/command/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Order entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.commandLDependents.Input.Query
            /// - Remark: Generated from `#/paths/command/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.commandLDependents.Input.Query,
                headers: Operations.commandLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/command/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/command/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Command])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Command] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Command
            ///
            /// - Remark: Generated from `#/paths//command/ldeps/get(commandLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Command type
    ///
    /// - Remark: HTTP `GET /command/list`.
    /// - Remark: Generated from `#/paths//command/list/get(commandList)`.
    public enum commandList {
        public static let id: Swift.String = "commandList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/command/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.commandList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/command/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/command/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Command])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Command] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Command
            ///
            /// - Remark: Generated from `#/paths//command/list/get(commandList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CommandReport type related to Command entity
    ///
    /// - Remark: HTTP `GET /commandReport/deps`.
    /// - Remark: Generated from `#/paths//commandReport/deps/get(commandReportDependents)`.
    public enum commandReportDependents {
        public static let id: Swift.String = "commandReportDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/commandReport/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Command entity
                ///
                /// - Remark: Generated from `#/paths/commandReport/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Command entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.commandReportDependents.Input.Query
            /// - Remark: Generated from `#/paths/commandReport/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandReportDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.commandReportDependents.Input.Query,
                headers: Operations.commandReportDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commandReport/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/commandReport/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CommandReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CommandReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandReportDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandReportDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CommandReport
            ///
            /// - Remark: Generated from `#/paths//commandReport/deps/get(commandReportDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandReportDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandReportDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of CommandReport type by its id
    ///
    /// - Remark: HTTP `GET /commandReport/item`.
    /// - Remark: Generated from `#/paths//commandReport/item/get(commandReportItem)`.
    public enum commandReportItem {
        public static let id: Swift.String = "commandReportItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/commandReport/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commandReport/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.commandReportItem.Input.Query
            /// - Remark: Generated from `#/paths/commandReport/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandReportItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.commandReportItem.Input.Query,
                headers: Operations.commandReportItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commandReport/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/commandReport/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommandReport)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CommandReport {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandReportItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandReportItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CommandReport
            ///
            /// - Remark: Generated from `#/paths//commandReport/item/get(commandReportItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandReportItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandReportItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of CommandReport type by its ids
    ///
    /// - Remark: HTTP `GET /commandReport/items`.
    /// - Remark: Generated from `#/paths//commandReport/items/get(commandReportItems)`.
    public enum commandReportItems {
        public static let id: Swift.String = "commandReportItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/commandReport/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commandReport/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.commandReportItems.Input.Query
            /// - Remark: Generated from `#/paths/commandReport/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandReportItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.commandReportItems.Input.Query,
                headers: Operations.commandReportItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commandReport/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/commandReport/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CommandReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CommandReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandReportItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandReportItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CommandReport
            ///
            /// - Remark: Generated from `#/paths//commandReport/items/get(commandReportItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandReportItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandReportItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CommandReport type related to multiple entities of Command type
    ///
    /// - Remark: HTTP `GET /commandReport/ldeps`.
    /// - Remark: Generated from `#/paths//commandReport/ldeps/get(commandReportLDependents)`.
    public enum commandReportLDependents {
        public static let id: Swift.String = "commandReportLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/commandReport/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Command entities
                ///
                /// - Remark: Generated from `#/paths/commandReport/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Command entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.commandReportLDependents.Input.Query
            /// - Remark: Generated from `#/paths/commandReport/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandReportLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.commandReportLDependents.Input.Query,
                headers: Operations.commandReportLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commandReport/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/commandReport/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CommandReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CommandReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandReportLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandReportLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CommandReport
            ///
            /// - Remark: Generated from `#/paths//commandReport/ldeps/get(commandReportLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandReportLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandReportLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CommandReport type
    ///
    /// - Remark: HTTP `GET /commandReport/list`.
    /// - Remark: Generated from `#/paths//commandReport/list/get(commandReportList)`.
    public enum commandReportList {
        public static let id: Swift.String = "commandReportList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/commandReport/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.commandReportList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.commandReportList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.commandReportList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/commandReport/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/commandReport/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CommandReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CommandReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.commandReportList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.commandReportList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CommandReport
            ///
            /// - Remark: Generated from `#/paths//commandReport/list/get(commandReportList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.commandReportList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.commandReportList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ExecutionReport type related to Command entity
    ///
    /// - Remark: HTTP `GET /executionReport/deps`.
    /// - Remark: Generated from `#/paths//executionReport/deps/get(executionReportDependents)`.
    public enum executionReportDependents {
        public static let id: Swift.String = "executionReportDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/executionReport/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Command entity
                ///
                /// - Remark: Generated from `#/paths/executionReport/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Command entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.executionReportDependents.Input.Query
            /// - Remark: Generated from `#/paths/executionReport/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.executionReportDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.executionReportDependents.Input.Query,
                headers: Operations.executionReportDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/executionReport/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ExecutionReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ExecutionReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.executionReportDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.executionReportDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ExecutionReport
            ///
            /// - Remark: Generated from `#/paths//executionReport/deps/get(executionReportDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.executionReportDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.executionReportDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ExecutionReport type by its name
    ///
    /// - Remark: HTTP `GET /executionReport/find`.
    /// - Remark: Generated from `#/paths//executionReport/find/get(executionReportFind)`.
    public enum executionReportFind {
        public static let id: Swift.String = "executionReportFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/executionReport/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.executionReportFind.Input.Query
            /// - Remark: Generated from `#/paths/executionReport/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.executionReportFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.executionReportFind.Input.Query,
                headers: Operations.executionReportFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/executionReport/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ExecutionReport)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ExecutionReport {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.executionReportFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.executionReportFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ExecutionReport
            ///
            /// - Remark: Generated from `#/paths//executionReport/find/get(executionReportFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.executionReportFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.executionReportFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ExecutionReport type by its id
    ///
    /// - Remark: HTTP `GET /executionReport/item`.
    /// - Remark: Generated from `#/paths//executionReport/item/get(executionReportItem)`.
    public enum executionReportItem {
        public static let id: Swift.String = "executionReportItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/executionReport/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.executionReportItem.Input.Query
            /// - Remark: Generated from `#/paths/executionReport/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.executionReportItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.executionReportItem.Input.Query,
                headers: Operations.executionReportItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/executionReport/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ExecutionReport)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ExecutionReport {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.executionReportItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.executionReportItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ExecutionReport
            ///
            /// - Remark: Generated from `#/paths//executionReport/item/get(executionReportItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.executionReportItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.executionReportItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ExecutionReport type by its ids
    ///
    /// - Remark: HTTP `GET /executionReport/items`.
    /// - Remark: Generated from `#/paths//executionReport/items/get(executionReportItems)`.
    public enum executionReportItems {
        public static let id: Swift.String = "executionReportItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/executionReport/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.executionReportItems.Input.Query
            /// - Remark: Generated from `#/paths/executionReport/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.executionReportItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.executionReportItems.Input.Query,
                headers: Operations.executionReportItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/executionReport/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ExecutionReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ExecutionReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.executionReportItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.executionReportItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ExecutionReport
            ///
            /// - Remark: Generated from `#/paths//executionReport/items/get(executionReportItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.executionReportItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.executionReportItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ExecutionReport type related to multiple entities of Command type
    ///
    /// - Remark: HTTP `GET /executionReport/ldeps`.
    /// - Remark: Generated from `#/paths//executionReport/ldeps/get(executionReportLDependents)`.
    public enum executionReportLDependents {
        public static let id: Swift.String = "executionReportLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/executionReport/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Command entities
                ///
                /// - Remark: Generated from `#/paths/executionReport/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Command entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.executionReportLDependents.Input.Query
            /// - Remark: Generated from `#/paths/executionReport/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.executionReportLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.executionReportLDependents.Input.Query,
                headers: Operations.executionReportLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/executionReport/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ExecutionReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ExecutionReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.executionReportLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.executionReportLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ExecutionReport
            ///
            /// - Remark: Generated from `#/paths//executionReport/ldeps/get(executionReportLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.executionReportLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.executionReportLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ExecutionReport type
    ///
    /// - Remark: HTTP `GET /executionReport/list`.
    /// - Remark: Generated from `#/paths//executionReport/list/get(executionReportList)`.
    public enum executionReportList {
        public static let id: Swift.String = "executionReportList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/executionReport/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.executionReportList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.executionReportList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/executionReport/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ExecutionReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ExecutionReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.executionReportList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.executionReportList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ExecutionReport
            ///
            /// - Remark: Generated from `#/paths//executionReport/list/get(executionReportList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.executionReportList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.executionReportList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of ExecutionReport type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /executionReport/suggest`.
    /// - Remark: Generated from `#/paths//executionReport/suggest/get(executionReportSuggest)`.
    public enum executionReportSuggest {
        public static let id: Swift.String = "executionReportSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/executionReport/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/executionReport/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/executionReport/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.executionReportSuggest.Input.Query
            /// - Remark: Generated from `#/paths/executionReport/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.executionReportSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.executionReportSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.executionReportSuggest.Input.Query,
                headers: Operations.executionReportSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/executionReport/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/executionReport/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ExecutionReport])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ExecutionReport] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.executionReportSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.executionReportSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ExecutionReport
            ///
            /// - Remark: Generated from `#/paths//executionReport/suggest/get(executionReportSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.executionReportSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.executionReportSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Fill type related to Order entity
    ///
    /// - Remark: HTTP `GET /fill/deps`.
    /// - Remark: Generated from `#/paths//fill/deps/get(fillDependents)`.
    public enum fillDependents {
        public static let id: Swift.String = "fillDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fill/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Order entity
                ///
                /// - Remark: Generated from `#/paths/fill/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Order entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.fillDependents.Input.Query
            /// - Remark: Generated from `#/paths/fill/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillDependents.Input.Query,
                headers: Operations.fillDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fill/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fill/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Fill])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Fill] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Fill
            ///
            /// - Remark: Generated from `#/paths//fill/deps/get(fillDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Fill type by its id
    ///
    /// - Remark: HTTP `GET /fill/item`.
    /// - Remark: Generated from `#/paths//fill/item/get(fillItem)`.
    public enum fillItem {
        public static let id: Swift.String = "fillItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fill/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fill/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.fillItem.Input.Query
            /// - Remark: Generated from `#/paths/fill/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillItem.Input.Query,
                headers: Operations.fillItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fill/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fill/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Fill)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Fill {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Fill
            ///
            /// - Remark: Generated from `#/paths//fill/item/get(fillItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Fill type by its ids
    ///
    /// - Remark: HTTP `GET /fill/items`.
    /// - Remark: Generated from `#/paths//fill/items/get(fillItems)`.
    public enum fillItems {
        public static let id: Swift.String = "fillItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fill/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fill/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.fillItems.Input.Query
            /// - Remark: Generated from `#/paths/fill/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillItems.Input.Query,
                headers: Operations.fillItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fill/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fill/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Fill])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Fill] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Fill
            ///
            /// - Remark: Generated from `#/paths//fill/items/get(fillItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Fill type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /fill/ldeps`.
    /// - Remark: Generated from `#/paths//fill/ldeps/get(fillLDependents)`.
    public enum fillLDependents {
        public static let id: Swift.String = "fillLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fill/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Order entities
                ///
                /// - Remark: Generated from `#/paths/fill/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Order entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.fillLDependents.Input.Query
            /// - Remark: Generated from `#/paths/fill/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillLDependents.Input.Query,
                headers: Operations.fillLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fill/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fill/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Fill])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Fill] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Fill
            ///
            /// - Remark: Generated from `#/paths//fill/ldeps/get(fillLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Fill type
    ///
    /// - Remark: HTTP `GET /fill/list`.
    /// - Remark: Generated from `#/paths//fill/list/get(fillList)`.
    public enum fillList {
        public static let id: Swift.String = "fillList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fill/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.fillList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fill/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fill/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Fill])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Fill] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Fill
            ///
            /// - Remark: Generated from `#/paths//fill/list/get(fillList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of FillFee type related to Fill entity
    ///
    /// - Remark: HTTP `GET /fillFee/deps`.
    /// - Remark: Generated from `#/paths//fillFee/deps/get(fillFeeDependents)`.
    public enum fillFeeDependents {
        public static let id: Swift.String = "fillFeeDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillFee/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Fill entity
                ///
                /// - Remark: Generated from `#/paths/fillFee/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Fill entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.fillFeeDependents.Input.Query
            /// - Remark: Generated from `#/paths/fillFee/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillFeeDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillFeeDependents.Input.Query,
                headers: Operations.fillFeeDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillFee/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillFee/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FillFee])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FillFee] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillFeeDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillFeeDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillFee
            ///
            /// - Remark: Generated from `#/paths//fillFee/deps/get(fillFeeDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillFeeDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillFeeDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of FillFee type by its id
    ///
    /// - Remark: HTTP `GET /fillFee/item`.
    /// - Remark: Generated from `#/paths//fillFee/item/get(fillFeeItem)`.
    public enum fillFeeItem {
        public static let id: Swift.String = "fillFeeItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillFee/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillFee/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.fillFeeItem.Input.Query
            /// - Remark: Generated from `#/paths/fillFee/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillFeeItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillFeeItem.Input.Query,
                headers: Operations.fillFeeItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillFee/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillFee/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.FillFee)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FillFee {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillFeeItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillFeeItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillFee
            ///
            /// - Remark: Generated from `#/paths//fillFee/item/get(fillFeeItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillFeeItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillFeeItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of FillFee type by its ids
    ///
    /// - Remark: HTTP `GET /fillFee/items`.
    /// - Remark: Generated from `#/paths//fillFee/items/get(fillFeeItems)`.
    public enum fillFeeItems {
        public static let id: Swift.String = "fillFeeItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillFee/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillFee/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.fillFeeItems.Input.Query
            /// - Remark: Generated from `#/paths/fillFee/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillFeeItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillFeeItems.Input.Query,
                headers: Operations.fillFeeItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillFee/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillFee/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FillFee])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FillFee] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillFeeItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillFeeItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillFee
            ///
            /// - Remark: Generated from `#/paths//fillFee/items/get(fillFeeItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillFeeItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillFeeItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of FillFee type related to multiple entities of Fill type
    ///
    /// - Remark: HTTP `GET /fillFee/ldeps`.
    /// - Remark: Generated from `#/paths//fillFee/ldeps/get(fillFeeLDependents)`.
    public enum fillFeeLDependents {
        public static let id: Swift.String = "fillFeeLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillFee/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Fill entities
                ///
                /// - Remark: Generated from `#/paths/fillFee/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Fill entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.fillFeeLDependents.Input.Query
            /// - Remark: Generated from `#/paths/fillFee/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillFeeLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillFeeLDependents.Input.Query,
                headers: Operations.fillFeeLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillFee/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillFee/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FillFee])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FillFee] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillFeeLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillFeeLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillFee
            ///
            /// - Remark: Generated from `#/paths//fillFee/ldeps/get(fillFeeLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillFeeLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillFeeLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of FillFee type
    ///
    /// - Remark: HTTP `GET /fillFee/list`.
    /// - Remark: Generated from `#/paths//fillFee/list/get(fillFeeList)`.
    public enum fillFeeList {
        public static let id: Swift.String = "fillFeeList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillFee/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillFeeList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillFeeList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.fillFeeList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillFee/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillFee/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FillFee])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FillFee] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillFeeList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillFeeList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillFee
            ///
            /// - Remark: Generated from `#/paths//fillFee/list/get(fillFeeList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillFeeList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillFeeList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Make a request to cancel an order.
    ///
    /// - Remark: HTTP `POST /order/cancelorder`.
    /// - Remark: Generated from `#/paths//order/cancelorder/post(cancelOrder)`.
    public enum cancelOrder {
        public static let id: Swift.String = "cancelOrder"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/cancelorder/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelOrder.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelOrder.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelOrder.Input.Headers
            /// - Remark: Generated from `#/paths/order/cancelorder/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/cancelorder/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CancelOrder)
            }
            public var body: Operations.cancelOrder.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.cancelOrder.Input.Headers = .init(),
                body: Operations.cancelOrder.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/cancelorder/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/cancelorder/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommandResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CommandResult {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelOrder.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelOrder.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CommandResult
            ///
            /// - Remark: Generated from `#/paths//order/cancelorder/post(cancelOrder)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelOrder.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelOrder.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Order type related to Account entity
    ///
    /// - Remark: HTTP `GET /order/deps`.
    /// - Remark: Generated from `#/paths//order/deps/get(orderDependents)`.
    public enum orderDependents {
        public static let id: Swift.String = "orderDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/order/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.orderDependents.Input.Query
            /// - Remark: Generated from `#/paths/order/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderDependents.Input.Query,
                headers: Operations.orderDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Order])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Order] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Order
            ///
            /// - Remark: Generated from `#/paths//order/deps/get(orderDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Order type by its id
    ///
    /// - Remark: HTTP `GET /order/item`.
    /// - Remark: Generated from `#/paths//order/item/get(orderItem)`.
    public enum orderItem {
        public static let id: Swift.String = "orderItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.orderItem.Input.Query
            /// - Remark: Generated from `#/paths/order/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderItem.Input.Query,
                headers: Operations.orderItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Order)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Order {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Order
            ///
            /// - Remark: Generated from `#/paths//order/item/get(orderItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Order type by its ids
    ///
    /// - Remark: HTTP `GET /order/items`.
    /// - Remark: Generated from `#/paths//order/items/get(orderItems)`.
    public enum orderItems {
        public static let id: Swift.String = "orderItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.orderItems.Input.Query
            /// - Remark: Generated from `#/paths/order/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderItems.Input.Query,
                headers: Operations.orderItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Order])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Order] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Order
            ///
            /// - Remark: Generated from `#/paths//order/items/get(orderItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Order type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /order/ldeps`.
    /// - Remark: Generated from `#/paths//order/ldeps/get(orderLDependents)`.
    public enum orderLDependents {
        public static let id: Swift.String = "orderLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/order/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.orderLDependents.Input.Query
            /// - Remark: Generated from `#/paths/order/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderLDependents.Input.Query,
                headers: Operations.orderLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Order])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Order] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Order
            ///
            /// - Remark: Generated from `#/paths//order/ldeps/get(orderLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Send a request to cancel orders for a specific contract and close that position for the given account.
    /// This request initiates the cancellation process of open orders for an existing position held by this account.
    /// > Note: This is a request to cancel orders and close a position, not a guarantee. Any operation could fail for a number of reasons, ranging from Exchange rejection to incorrect parameterization.
    ///
    ///
    /// - Remark: HTTP `POST /order/liquidateposition`.
    /// - Remark: Generated from `#/paths//order/liquidateposition/post(liquidatePosition)`.
    public enum liquidatePosition {
        public static let id: Swift.String = "liquidatePosition"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/liquidateposition/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.liquidatePosition.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.liquidatePosition.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.liquidatePosition.Input.Headers
            /// - Remark: Generated from `#/paths/order/liquidateposition/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/liquidateposition/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.LiquidatePosition)
            }
            public var body: Operations.liquidatePosition.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.liquidatePosition.Input.Headers = .init(),
                body: Operations.liquidatePosition.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/liquidateposition/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/liquidateposition/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaceOrderResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaceOrderResult {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.liquidatePosition.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.liquidatePosition.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// PlaceOrderResult
            ///
            /// - Remark: Generated from `#/paths//order/liquidateposition/post(liquidatePosition)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.liquidatePosition.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.liquidatePosition.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Order type
    ///
    /// - Remark: HTTP `GET /order/list`.
    /// - Remark: Generated from `#/paths//order/list/get(orderList)`.
    public enum orderList {
        public static let id: Swift.String = "orderList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.orderList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Order])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Order] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Order
            ///
            /// - Remark: Generated from `#/paths//order/list/get(orderList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Make a request to modify the parameters of an order.
    /// You can request changes to an order, such as the trigger price for a Stop or Limit order.
    /// > *Note*: This is no guarantee that the order can be modified in the way requests. Market, exchange and logical rules apply. 
    ///
    /// - Remark: HTTP `POST /order/modifyorder`.
    /// - Remark: Generated from `#/paths//order/modifyorder/post(modifyOrder)`.
    public enum modifyOrder {
        public static let id: Swift.String = "modifyOrder"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/modifyorder/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyOrder.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyOrder.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyOrder.Input.Headers
            /// - Remark: Generated from `#/paths/order/modifyorder/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/modifyorder/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyOrder)
            }
            public var body: Operations.modifyOrder.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.modifyOrder.Input.Headers = .init(),
                body: Operations.modifyOrder.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/modifyorder/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/modifyorder/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CommandResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CommandResult {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyOrder.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyOrder.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CommandResult
            ///
            /// - Remark: Generated from `#/paths//order/modifyorder/post(modifyOrder)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyOrder.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyOrder.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Place a Order Cancels Order order strategy.
    /// OCO order strategies link 2 orders together such that if one order is filled, the other order is cancelled. You must provide an `other` parameter pertaining to the order linked to this one. The `other` must specify an `action` and an `orderType` which determines the other parameters that must be set. For example a Limit or Stop order must use the `price` parameter, but a Stop-Limit will require a `price` and a `stopPrice`. Below is an example of an OCO that either sells to take profit at 4200 points, or sells to stop loss at 4100 points.
    ///
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const limit = {
    ///     action: 'Sell',
    ///     orderType: 'Limit',
    ///     price: 4200.00
    /// }
    /// const oco = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MESM1",
    ///     orderQty: 1,
    ///     orderType: "Stop",
    ///     price: 4100.00
    ///     isAutomated: true, //must be true if this isn't an order made directly by a human
    ///     other: limit
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeoco', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(oco)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000, ocoId: 0000000 }
    /// ```
    ///
    /// - Remark: HTTP `POST /order/placeoco`.
    /// - Remark: Generated from `#/paths//order/placeoco/post(placeOCO)`.
    public enum placeOCO {
        public static let id: Swift.String = "placeOCO"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/placeoco/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.placeOCO.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.placeOCO.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.placeOCO.Input.Headers
            /// - Remark: Generated from `#/paths/order/placeoco/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/placeoco/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PlaceOCO)
            }
            public var body: Operations.placeOCO.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.placeOCO.Input.Headers = .init(),
                body: Operations.placeOCO.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/placeoco/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/placeoco/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaceOcoResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaceOcoResult {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.placeOCO.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.placeOCO.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// PlaceOcoResult
            ///
            /// - Remark: Generated from `#/paths//order/placeoco/post(placeOCO)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.placeOCO.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.placeOCO.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Make a request to place an order. 
    /// Depending on the order type, the parameters vary. In the Trader application, you can see the details of placing a standard order ticket by adding the Order Ticket module to your workspace.
    ///
    /// #### *Market Order*
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const body = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MYMM1",
    ///     orderQty: 1,
    ///     orderType: "Market",
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeorder', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(body)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    ///
    /// ```
    ///
    /// #### *Sell Limit*
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    /// const body = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Sell",
    ///     symbol: "MYMM1",
    ///     orderQty: 1,
    ///     orderType: "Limit",
    ///     price: 35000, //use for single value like limit or stop
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeorder', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(body)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    ///
    /// ```
    ///
    ///
    /// - Remark: HTTP `POST /order/placeorder`.
    /// - Remark: Generated from `#/paths//order/placeorder/post(placeOrder)`.
    public enum placeOrder {
        public static let id: Swift.String = "placeOrder"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/placeorder/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.placeOrder.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.placeOrder.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.placeOrder.Input.Headers
            /// - Remark: Generated from `#/paths/order/placeorder/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/placeorder/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PlaceOrder)
            }
            public var body: Operations.placeOrder.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.placeOrder.Input.Headers = .init(),
                body: Operations.placeOrder.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/placeorder/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/placeorder/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaceOrderResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaceOrderResult {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.placeOrder.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.placeOrder.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// PlaceOrderResult
            ///
            /// - Remark: Generated from `#/paths//order/placeorder/post(placeOrder)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.placeOrder.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.placeOrder.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Place an Order Sends Order order strategy.
    /// In the Trader application, the details of OSO orders can be viewed by adding the Order Ticket module to your workspace and selecting the Advanced workspace options with Brackets enabled. OSO orders allow for the most complex multi-bracket trading strategies. As an example, imagine MESM1 is trading around 4175.00 points. You want to place a Buy order for 4150.00 points, buying below market. We place an OSO to take profits at 4200.00 points. If the initial order is filled, the `bracket1` order will be sent. Below is an example in JavaScript:
    ///
    /// ```js
    /// const URL = 'demo.tradovateapi.com/v1'
    ///
    /// const oso = {
    ///     action: 'Sell',
    ///     orderType: 'Limit',
    ///     price: 4200.00,
    /// }
    ///
    /// const initial = {
    ///     accountSpec: yourUserName,
    ///     accountId: yourAcctId,
    ///     action: "Buy",
    ///     symbol: "MESM1",
    ///     orderQty: 1,
    ///     orderType: "Limit",
    ///     price: 4150.00,
    ///     isAutomated: true //must be true if this isn't an order made directly by a human
    ///     bracket1: oso
    /// }
    ///
    /// const response = await fetch(URL + '/order/placeOSO', {
    ///     method: 'POST',
    ///     headers: {
    ///         'Accept': 'application/json',
    ///         'Authorization': `Bearer ${myAccessToken}`,
    ///     },
    ///     body: JSON.stringify(initial)
    /// })
    ///
    /// const json = await response.json() // { orderId: 0000000 }
    /// ```
    ///
    /// >*Note:* If you specify both `bracket1` and `bracket2` the two orders will be linked as an OCO, where filling one will cancel the other.
    ///
    /// - Remark: HTTP `POST /order/placeoso`.
    /// - Remark: Generated from `#/paths//order/placeoso/post(placeOSO)`.
    public enum placeOSO {
        public static let id: Swift.String = "placeOSO"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/order/placeoso/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.placeOSO.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.placeOSO.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.placeOSO.Input.Headers
            /// - Remark: Generated from `#/paths/order/placeoso/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/placeoso/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PlaceOSO)
            }
            public var body: Operations.placeOSO.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.placeOSO.Input.Headers = .init(),
                body: Operations.placeOSO.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/order/placeoso/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/order/placeoso/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.PlaceOsoResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.PlaceOsoResult {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.placeOSO.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.placeOSO.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// PlaceOsoResult
            ///
            /// - Remark: Generated from `#/paths//order/placeoso/post(placeOSO)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.placeOSO.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.placeOSO.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderStrategy type related to Account entity
    ///
    /// - Remark: HTTP `GET /orderStrategy/deps`.
    /// - Remark: Generated from `#/paths//orderStrategy/deps/get(orderStrategyDependents)`.
    public enum orderStrategyDependents {
        public static let id: Swift.String = "orderStrategyDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategy/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/orderStrategy/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.orderStrategyDependents.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategy/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyDependents.Input.Query,
                headers: Operations.orderStrategyDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategy/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategy])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategy] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategy
            ///
            /// - Remark: Generated from `#/paths//orderStrategy/deps/get(orderStrategyDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Stop a running multi-bracket strategy.
    ///
    /// - Remark: HTTP `POST /orderStrategy/interruptorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/interruptorderstrategy/post(interruptOrderStrategy)`.
    public enum interruptOrderStrategy {
        public static let id: Swift.String = "interruptOrderStrategy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategy/interruptorderstrategy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.interruptOrderStrategy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.interruptOrderStrategy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.interruptOrderStrategy.Input.Headers
            /// - Remark: Generated from `#/paths/orderStrategy/interruptorderstrategy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/interruptorderstrategy/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.InterruptOrderStrategy)
            }
            public var body: Operations.interruptOrderStrategy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.interruptOrderStrategy.Input.Headers = .init(),
                body: Operations.interruptOrderStrategy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/interruptorderstrategy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategy/interruptorderstrategy/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrderStrategyStatusResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OrderStrategyStatusResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.interruptOrderStrategy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.interruptOrderStrategy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyStatusResponse
            ///
            /// - Remark: Generated from `#/paths//orderStrategy/interruptorderstrategy/post(interruptOrderStrategy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.interruptOrderStrategy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.interruptOrderStrategy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of OrderStrategy type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategy/item`.
    /// - Remark: Generated from `#/paths//orderStrategy/item/get(orderStrategyItem)`.
    public enum orderStrategyItem {
        public static let id: Swift.String = "orderStrategyItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategy/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.orderStrategyItem.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategy/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyItem.Input.Query,
                headers: Operations.orderStrategyItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategy/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrderStrategy)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OrderStrategy {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategy
            ///
            /// - Remark: Generated from `#/paths//orderStrategy/item/get(orderStrategyItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of OrderStrategy type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategy/items`.
    /// - Remark: Generated from `#/paths//orderStrategy/items/get(orderStrategyItems)`.
    public enum orderStrategyItems {
        public static let id: Swift.String = "orderStrategyItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategy/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.orderStrategyItems.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategy/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyItems.Input.Query,
                headers: Operations.orderStrategyItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategy/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategy])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategy] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategy
            ///
            /// - Remark: Generated from `#/paths//orderStrategy/items/get(orderStrategyItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderStrategy type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /orderStrategy/ldeps`.
    /// - Remark: Generated from `#/paths//orderStrategy/ldeps/get(orderStrategyLDependents)`.
    public enum orderStrategyLDependents {
        public static let id: Swift.String = "orderStrategyLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategy/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/orderStrategy/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.orderStrategyLDependents.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategy/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyLDependents.Input.Query,
                headers: Operations.orderStrategyLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategy/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategy])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategy] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategy
            ///
            /// - Remark: Generated from `#/paths//orderStrategy/ldeps/get(orderStrategyLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderStrategy type
    ///
    /// - Remark: HTTP `GET /orderStrategy/list`.
    /// - Remark: Generated from `#/paths//orderStrategy/list/get(orderStrategyList)`.
    public enum orderStrategyList {
        public static let id: Swift.String = "orderStrategyList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategy/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.orderStrategyList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategy/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategy])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategy] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategy
            ///
            /// - Remark: Generated from `#/paths//orderStrategy/list/get(orderStrategyList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Modify an existing Order Strategy
    ///
    /// - Remark: HTTP `POST /orderStrategy/modifyorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/modifyorderstrategy/post(modifyOrderStrategy)`.
    public enum modifyOrderStrategy {
        public static let id: Swift.String = "modifyOrderStrategy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategy/modifyorderstrategy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyOrderStrategy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyOrderStrategy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyOrderStrategy.Input.Headers
            /// - Remark: Generated from `#/paths/orderStrategy/modifyorderstrategy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/modifyorderstrategy/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyOrderStrategy)
            }
            public var body: Operations.modifyOrderStrategy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.modifyOrderStrategy.Input.Headers = .init(),
                body: Operations.modifyOrderStrategy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/modifyorderstrategy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategy/modifyorderstrategy/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrderStrategyStatusResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OrderStrategyStatusResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyOrderStrategy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyOrderStrategy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyStatusResponse
            ///
            /// - Remark: Generated from `#/paths//orderStrategy/modifyorderstrategy/post(modifyOrderStrategy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyOrderStrategy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyOrderStrategy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Start a multi-bracket trading strategy.
    /// This endpoint is used with a WebSocket. You can create any number of brackets and add them to `brackets` field on the `params` object as a JSON string.
    ///
    /// ```js
    ///
    /// const URL = 'wss://demo.tradovateapi.com/v1/websocket'
    ///
    /// const params = {
    ///     entryVersion: {
    ///         orderQty: 1,
    ///         orderType: "Market"
    ///     },
    ///     brackets: [{
    ///         qty: 1,
    ///         profitTarget: -30,
    ///         stopLoss: 15,
    ///         trailingStop: false
    ///     }]
    /// }
    ///
    /// const body = {
    ///     accountId: myAcctId,
    ///     accountSpec: name,
    ///     symbol: 'MESM1',
    ///     action: 'Sell',
    ///     orderStrategyTypeId: 2, //2 is 'multibracket', we currently only offer this strategy but more may exist in the future.
    ///     params: JSON.stringify(params)
    /// }
    ///
    /// const mySocket = new WebSocket(URL)
    ///
    /// //authorize socket using your access token
    /// mySocket.onopen = function() {
    ///     mySocket.send(`authorize\n0\n\n${accessToken}`)
    /// }
    ///
    /// mySocket.send(`orderstrategy/startorderstrategy\n4\n\n${JSON.stringify(body)}`)
    ///
    /// ```
    ///
    /// For more details about working with advanced order types, see [placeOrder](/#operation/placeOrder), [placeOCO](/#operation/placeOCO), and [placeOSO](/#operation/placeOSO). 
    ///
    ///
    /// - Remark: HTTP `POST /orderStrategy/startorderstrategy`.
    /// - Remark: Generated from `#/paths//orderStrategy/startorderstrategy/post(startOrderStrategy)`.
    public enum startOrderStrategy {
        public static let id: Swift.String = "startOrderStrategy"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategy/startorderstrategy/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.startOrderStrategy.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.startOrderStrategy.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.startOrderStrategy.Input.Headers
            /// - Remark: Generated from `#/paths/orderStrategy/startorderstrategy/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/startorderstrategy/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.StartOrderStrategy)
            }
            public var body: Operations.startOrderStrategy.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.startOrderStrategy.Input.Headers = .init(),
                body: Operations.startOrderStrategy.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategy/startorderstrategy/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategy/startorderstrategy/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrderStrategyStatusResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OrderStrategyStatusResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.startOrderStrategy.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.startOrderStrategy.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyStatusResponse
            ///
            /// - Remark: Generated from `#/paths//orderStrategy/startorderstrategy/post(startOrderStrategy)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.startOrderStrategy.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.startOrderStrategy.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderStrategyLink type related to OrderStrategy entity
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/deps`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/deps/get(orderStrategyLinkDependents)`.
    public enum orderStrategyLinkDependents {
        public static let id: Swift.String = "orderStrategyLinkDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyLink/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of OrderStrategy entity
                ///
                /// - Remark: Generated from `#/paths/orderStrategyLink/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of OrderStrategy entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.orderStrategyLinkDependents.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategyLink/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyLinkDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyLinkDependents.Input.Query,
                headers: Operations.orderStrategyLinkDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyLink/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyLink/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategyLink])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategyLink] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyLinkDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyLinkDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyLink
            ///
            /// - Remark: Generated from `#/paths//orderStrategyLink/deps/get(orderStrategyLinkDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyLinkDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyLinkDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of OrderStrategyLink type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/item`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/item/get(orderStrategyLinkItem)`.
    public enum orderStrategyLinkItem {
        public static let id: Swift.String = "orderStrategyLinkItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyLink/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyLink/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.orderStrategyLinkItem.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategyLink/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyLinkItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyLinkItem.Input.Query,
                headers: Operations.orderStrategyLinkItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyLink/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyLink/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrderStrategyLink)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OrderStrategyLink {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyLinkItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyLinkItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyLink
            ///
            /// - Remark: Generated from `#/paths//orderStrategyLink/item/get(orderStrategyLinkItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyLinkItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyLinkItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of OrderStrategyLink type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/items`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/items/get(orderStrategyLinkItems)`.
    public enum orderStrategyLinkItems {
        public static let id: Swift.String = "orderStrategyLinkItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyLink/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyLink/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.orderStrategyLinkItems.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategyLink/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyLinkItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyLinkItems.Input.Query,
                headers: Operations.orderStrategyLinkItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyLink/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyLink/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategyLink])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategyLink] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyLinkItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyLinkItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyLink
            ///
            /// - Remark: Generated from `#/paths//orderStrategyLink/items/get(orderStrategyLinkItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyLinkItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyLinkItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderStrategyLink type related to multiple entities of OrderStrategy type
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/ldeps`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/ldeps/get(orderStrategyLinkLDependents)`.
    public enum orderStrategyLinkLDependents {
        public static let id: Swift.String = "orderStrategyLinkLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyLink/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of OrderStrategy entities
                ///
                /// - Remark: Generated from `#/paths/orderStrategyLink/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of OrderStrategy entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.orderStrategyLinkLDependents.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategyLink/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyLinkLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyLinkLDependents.Input.Query,
                headers: Operations.orderStrategyLinkLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyLink/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyLink/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategyLink])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategyLink] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyLinkLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyLinkLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyLink
            ///
            /// - Remark: Generated from `#/paths//orderStrategyLink/ldeps/get(orderStrategyLinkLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyLinkLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyLinkLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderStrategyLink type
    ///
    /// - Remark: HTTP `GET /orderStrategyLink/list`.
    /// - Remark: Generated from `#/paths//orderStrategyLink/list/get(orderStrategyLinkList)`.
    public enum orderStrategyLinkList {
        public static let id: Swift.String = "orderStrategyLinkList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyLink/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyLinkList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyLinkList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.orderStrategyLinkList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyLink/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyLink/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategyLink])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategyLink] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyLinkList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyLinkList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyLink
            ///
            /// - Remark: Generated from `#/paths//orderStrategyLink/list/get(orderStrategyLinkList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyLinkList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyLinkList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderVersion type related to Order entity
    ///
    /// - Remark: HTTP `GET /orderVersion/deps`.
    /// - Remark: Generated from `#/paths//orderVersion/deps/get(orderVersionDependents)`.
    public enum orderVersionDependents {
        public static let id: Swift.String = "orderVersionDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderVersion/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Order entity
                ///
                /// - Remark: Generated from `#/paths/orderVersion/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Order entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.orderVersionDependents.Input.Query
            /// - Remark: Generated from `#/paths/orderVersion/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderVersionDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderVersionDependents.Input.Query,
                headers: Operations.orderVersionDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderVersion/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderVersion/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderVersion])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderVersion] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderVersionDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderVersionDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderVersion
            ///
            /// - Remark: Generated from `#/paths//orderVersion/deps/get(orderVersionDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderVersionDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderVersionDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of OrderVersion type by its id
    ///
    /// - Remark: HTTP `GET /orderVersion/item`.
    /// - Remark: Generated from `#/paths//orderVersion/item/get(orderVersionItem)`.
    public enum orderVersionItem {
        public static let id: Swift.String = "orderVersionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderVersion/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderVersion/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.orderVersionItem.Input.Query
            /// - Remark: Generated from `#/paths/orderVersion/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderVersionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderVersionItem.Input.Query,
                headers: Operations.orderVersionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderVersion/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderVersion/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrderVersion)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OrderVersion {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderVersionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderVersionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderVersion
            ///
            /// - Remark: Generated from `#/paths//orderVersion/item/get(orderVersionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderVersionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderVersionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of OrderVersion type by its ids
    ///
    /// - Remark: HTTP `GET /orderVersion/items`.
    /// - Remark: Generated from `#/paths//orderVersion/items/get(orderVersionItems)`.
    public enum orderVersionItems {
        public static let id: Swift.String = "orderVersionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderVersion/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderVersion/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.orderVersionItems.Input.Query
            /// - Remark: Generated from `#/paths/orderVersion/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderVersionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderVersionItems.Input.Query,
                headers: Operations.orderVersionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderVersion/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderVersion/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderVersion])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderVersion] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderVersionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderVersionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderVersion
            ///
            /// - Remark: Generated from `#/paths//orderVersion/items/get(orderVersionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderVersionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderVersionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderVersion type related to multiple entities of Order type
    ///
    /// - Remark: HTTP `GET /orderVersion/ldeps`.
    /// - Remark: Generated from `#/paths//orderVersion/ldeps/get(orderVersionLDependents)`.
    public enum orderVersionLDependents {
        public static let id: Swift.String = "orderVersionLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderVersion/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Order entities
                ///
                /// - Remark: Generated from `#/paths/orderVersion/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Order entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.orderVersionLDependents.Input.Query
            /// - Remark: Generated from `#/paths/orderVersion/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderVersionLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderVersionLDependents.Input.Query,
                headers: Operations.orderVersionLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderVersion/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderVersion/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderVersion])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderVersion] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderVersionLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderVersionLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderVersion
            ///
            /// - Remark: Generated from `#/paths//orderVersion/ldeps/get(orderVersionLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderVersionLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderVersionLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderVersion type
    ///
    /// - Remark: HTTP `GET /orderVersion/list`.
    /// - Remark: Generated from `#/paths//orderVersion/list/get(orderVersionList)`.
    public enum orderVersionList {
        public static let id: Swift.String = "orderVersionList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderVersion/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderVersionList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderVersionList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.orderVersionList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderVersion/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderVersion/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderVersion])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderVersion] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderVersionList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderVersionList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderVersion
            ///
            /// - Remark: Generated from `#/paths//orderVersion/list/get(orderVersionList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderVersionList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderVersionList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of FillPair type related to Position entity
    ///
    /// - Remark: HTTP `GET /fillPair/deps`.
    /// - Remark: Generated from `#/paths//fillPair/deps/get(fillPairDependents)`.
    public enum fillPairDependents {
        public static let id: Swift.String = "fillPairDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillPair/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Position entity
                ///
                /// - Remark: Generated from `#/paths/fillPair/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Position entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.fillPairDependents.Input.Query
            /// - Remark: Generated from `#/paths/fillPair/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillPairDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillPairDependents.Input.Query,
                headers: Operations.fillPairDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillPair/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillPair/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FillPair])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FillPair] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillPairDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillPairDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillPair
            ///
            /// - Remark: Generated from `#/paths//fillPair/deps/get(fillPairDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillPairDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillPairDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of FillPair type by its id
    ///
    /// - Remark: HTTP `GET /fillPair/item`.
    /// - Remark: Generated from `#/paths//fillPair/item/get(fillPairItem)`.
    public enum fillPairItem {
        public static let id: Swift.String = "fillPairItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillPair/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillPair/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.fillPairItem.Input.Query
            /// - Remark: Generated from `#/paths/fillPair/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillPairItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillPairItem.Input.Query,
                headers: Operations.fillPairItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillPair/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillPair/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.FillPair)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FillPair {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillPairItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillPairItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillPair
            ///
            /// - Remark: Generated from `#/paths//fillPair/item/get(fillPairItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillPairItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillPairItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of FillPair type by its ids
    ///
    /// - Remark: HTTP `GET /fillPair/items`.
    /// - Remark: Generated from `#/paths//fillPair/items/get(fillPairItems)`.
    public enum fillPairItems {
        public static let id: Swift.String = "fillPairItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillPair/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillPair/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.fillPairItems.Input.Query
            /// - Remark: Generated from `#/paths/fillPair/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillPairItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillPairItems.Input.Query,
                headers: Operations.fillPairItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillPair/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillPair/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FillPair])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FillPair] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillPairItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillPairItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillPair
            ///
            /// - Remark: Generated from `#/paths//fillPair/items/get(fillPairItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillPairItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillPairItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of FillPair type related to multiple entities of Position type
    ///
    /// - Remark: HTTP `GET /fillPair/ldeps`.
    /// - Remark: Generated from `#/paths//fillPair/ldeps/get(fillPairLDependents)`.
    public enum fillPairLDependents {
        public static let id: Swift.String = "fillPairLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillPair/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Position entities
                ///
                /// - Remark: Generated from `#/paths/fillPair/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Position entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.fillPairLDependents.Input.Query
            /// - Remark: Generated from `#/paths/fillPair/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillPairLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.fillPairLDependents.Input.Query,
                headers: Operations.fillPairLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillPair/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillPair/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FillPair])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FillPair] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillPairLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillPairLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillPair
            ///
            /// - Remark: Generated from `#/paths//fillPair/ldeps/get(fillPairLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillPairLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillPairLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of FillPair type
    ///
    /// - Remark: HTTP `GET /fillPair/list`.
    /// - Remark: Generated from `#/paths//fillPair/list/get(fillPairList)`.
    public enum fillPairList {
        public static let id: Swift.String = "fillPairList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fillPair/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.fillPairList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.fillPairList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.fillPairList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fillPair/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fillPair/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.FillPair])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.FillPair] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.fillPairList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.fillPairList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// FillPair
            ///
            /// - Remark: Generated from `#/paths//fillPair/list/get(fillPairList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.fillPairList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.fillPairList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Position type related to Account entity
    ///
    /// - Remark: HTTP `GET /position/deps`.
    /// - Remark: Generated from `#/paths//position/deps/get(positionDependents)`.
    public enum positionDependents {
        public static let id: Swift.String = "positionDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/position/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/position/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.positionDependents.Input.Query
            /// - Remark: Generated from `#/paths/position/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.positionDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.positionDependents.Input.Query,
                headers: Operations.positionDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/position/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Position])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Position] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.positionDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.positionDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Position
            ///
            /// - Remark: Generated from `#/paths//position/deps/get(positionDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.positionDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.positionDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Position type by its name
    ///
    /// - Remark: HTTP `GET /position/find`.
    /// - Remark: Generated from `#/paths//position/find/get(positionFind)`.
    public enum positionFind {
        public static let id: Swift.String = "positionFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/position/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.positionFind.Input.Query
            /// - Remark: Generated from `#/paths/position/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.positionFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.positionFind.Input.Query,
                headers: Operations.positionFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/position/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Position)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Position {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.positionFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.positionFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Position
            ///
            /// - Remark: Generated from `#/paths//position/find/get(positionFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.positionFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.positionFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Position type by its id
    ///
    /// - Remark: HTTP `GET /position/item`.
    /// - Remark: Generated from `#/paths//position/item/get(positionItem)`.
    public enum positionItem {
        public static let id: Swift.String = "positionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/position/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.positionItem.Input.Query
            /// - Remark: Generated from `#/paths/position/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.positionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.positionItem.Input.Query,
                headers: Operations.positionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/position/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Position)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Position {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.positionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.positionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Position
            ///
            /// - Remark: Generated from `#/paths//position/item/get(positionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.positionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.positionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Position type by its ids
    ///
    /// - Remark: HTTP `GET /position/items`.
    /// - Remark: Generated from `#/paths//position/items/get(positionItems)`.
    public enum positionItems {
        public static let id: Swift.String = "positionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/position/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.positionItems.Input.Query
            /// - Remark: Generated from `#/paths/position/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.positionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.positionItems.Input.Query,
                headers: Operations.positionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/position/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Position])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Position] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.positionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.positionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Position
            ///
            /// - Remark: Generated from `#/paths//position/items/get(positionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.positionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.positionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Position type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /position/ldeps`.
    /// - Remark: Generated from `#/paths//position/ldeps/get(positionLDependents)`.
    public enum positionLDependents {
        public static let id: Swift.String = "positionLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/position/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/position/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.positionLDependents.Input.Query
            /// - Remark: Generated from `#/paths/position/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.positionLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.positionLDependents.Input.Query,
                headers: Operations.positionLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/position/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Position])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Position] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.positionLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.positionLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Position
            ///
            /// - Remark: Generated from `#/paths//position/ldeps/get(positionLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.positionLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.positionLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Position type
    ///
    /// - Remark: HTTP `GET /position/list`.
    /// - Remark: Generated from `#/paths//position/list/get(positionList)`.
    public enum positionList {
        public static let id: Swift.String = "positionList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/position/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.positionList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.positionList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.positionList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/position/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/position/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Position])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Position] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.positionList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.positionList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Position
            ///
            /// - Remark: Generated from `#/paths//position/list/get(positionList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.positionList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.positionList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Account type related to User entity
    ///
    /// - Remark: HTTP `GET /account/deps`.
    /// - Remark: Generated from `#/paths//account/deps/get(accountDependents)`.
    public enum accountDependents {
        public static let id: Swift.String = "accountDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/account/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.accountDependents.Input.Query
            /// - Remark: Generated from `#/paths/account/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountDependents.Input.Query,
                headers: Operations.accountDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Account
            ///
            /// - Remark: Generated from `#/paths//account/deps/get(accountDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Account type by its name
    ///
    /// - Remark: HTTP `GET /account/find`.
    /// - Remark: Generated from `#/paths//account/find/get(accountFind)`.
    public enum accountFind {
        public static let id: Swift.String = "accountFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.accountFind.Input.Query
            /// - Remark: Generated from `#/paths/account/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountFind.Input.Query,
                headers: Operations.accountFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Account)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Account {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Account
            ///
            /// - Remark: Generated from `#/paths//account/find/get(accountFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Account type by its id
    ///
    /// - Remark: HTTP `GET /account/item`.
    /// - Remark: Generated from `#/paths//account/item/get(accountItem)`.
    public enum accountItem {
        public static let id: Swift.String = "accountItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.accountItem.Input.Query
            /// - Remark: Generated from `#/paths/account/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountItem.Input.Query,
                headers: Operations.accountItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Account)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Account {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Account
            ///
            /// - Remark: Generated from `#/paths//account/item/get(accountItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Account type by its ids
    ///
    /// - Remark: HTTP `GET /account/items`.
    /// - Remark: Generated from `#/paths//account/items/get(accountItems)`.
    public enum accountItems {
        public static let id: Swift.String = "accountItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.accountItems.Input.Query
            /// - Remark: Generated from `#/paths/account/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountItems.Input.Query,
                headers: Operations.accountItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Account
            ///
            /// - Remark: Generated from `#/paths//account/items/get(accountItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Account type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /account/ldeps`.
    /// - Remark: Generated from `#/paths//account/ldeps/get(accountLDependents)`.
    public enum accountLDependents {
        public static let id: Swift.String = "accountLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/account/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.accountLDependents.Input.Query
            /// - Remark: Generated from `#/paths/account/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountLDependents.Input.Query,
                headers: Operations.accountLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Account
            ///
            /// - Remark: Generated from `#/paths//account/ldeps/get(accountLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Account type
    ///
    /// - Remark: HTTP `GET /account/list`.
    /// - Remark: Generated from `#/paths//account/list/get(accountList)`.
    public enum accountList {
        public static let id: Swift.String = "accountList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.accountList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Account
            ///
            /// - Remark: Generated from `#/paths//account/list/get(accountList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Reset a demo account's state to a previous day
    /// Return 1 or more simulation accounts to their state at market open on the given TradeDate date. 
    ///
    /// - Remark: HTTP `POST /account/resetdemoaccountstate`.
    /// - Remark: Generated from `#/paths//account/resetdemoaccountstate/post(resetDemoAccountState)`.
    public enum resetDemoAccountState {
        public static let id: Swift.String = "resetDemoAccountState"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/resetdemoaccountstate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.resetDemoAccountState.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.resetDemoAccountState.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.resetDemoAccountState.Input.Headers
            /// - Remark: Generated from `#/paths/account/resetdemoaccountstate/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/resetdemoaccountstate/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ResetDemoAccountState)
            }
            public var body: Operations.resetDemoAccountState.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.resetDemoAccountState.Input.Headers = .init(),
                body: Operations.resetDemoAccountState.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/resetdemoaccountstate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/resetdemoaccountstate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SimpleResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SimpleResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.resetDemoAccountState.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.resetDemoAccountState.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SimpleResponse
            ///
            /// - Remark: Generated from `#/paths//account/resetdemoaccountstate/post(resetDemoAccountState)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.resetDemoAccountState.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.resetDemoAccountState.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of Account type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /account/suggest`.
    /// - Remark: Generated from `#/paths//account/suggest/get(accountSuggest)`.
    public enum accountSuggest {
        public static let id: Swift.String = "accountSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/account/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/account/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/account/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.accountSuggest.Input.Query
            /// - Remark: Generated from `#/paths/account/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountSuggest.Input.Query,
                headers: Operations.accountSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/account/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/account/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Account])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Account] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Account
            ///
            /// - Remark: Generated from `#/paths//account/suggest/get(accountSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CashBalance type related to Account entity
    ///
    /// - Remark: HTTP `GET /cashBalance/deps`.
    /// - Remark: Generated from `#/paths//cashBalance/deps/get(cashBalanceDependents)`.
    public enum cashBalanceDependents {
        public static let id: Swift.String = "cashBalanceDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalance/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/cashBalance/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.cashBalanceDependents.Input.Query
            /// - Remark: Generated from `#/paths/cashBalance/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.cashBalanceDependents.Input.Query,
                headers: Operations.cashBalanceDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalance/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CashBalance])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CashBalance] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalance
            ///
            /// - Remark: Generated from `#/paths//cashBalance/deps/get(cashBalanceDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Get a snapshot of an account's current cash balance.
    /// > *Note*: Using this endpoint many times in succession is an anti-pattern. If you need to check a `cashBalance` in real-time, instead use a WebSocket connected to the standard Tradovate WebSocket URL and initialize a real-time user data subscription via the `user/syncrequest` endpoint.
    ///
    /// - Remark: HTTP `POST /cashBalance/getcashbalancesnapshot`.
    /// - Remark: Generated from `#/paths//cashBalance/getcashbalancesnapshot/post(getCashBalanceSnapshot)`.
    public enum getCashBalanceSnapshot {
        public static let id: Swift.String = "getCashBalanceSnapshot"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalance/getcashbalancesnapshot/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCashBalanceSnapshot.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getCashBalanceSnapshot.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getCashBalanceSnapshot.Input.Headers
            /// - Remark: Generated from `#/paths/cashBalance/getcashbalancesnapshot/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/getcashbalancesnapshot/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.GetCashBalanceSnapshot)
            }
            public var body: Operations.getCashBalanceSnapshot.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.getCashBalanceSnapshot.Input.Headers = .init(),
                body: Operations.getCashBalanceSnapshot.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/getcashbalancesnapshot/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalance/getcashbalancesnapshot/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CashBalanceSnapshot)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CashBalanceSnapshot {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getCashBalanceSnapshot.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getCashBalanceSnapshot.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalanceSnapshot
            ///
            /// - Remark: Generated from `#/paths//cashBalance/getcashbalancesnapshot/post(getCashBalanceSnapshot)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getCashBalanceSnapshot.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getCashBalanceSnapshot.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of CashBalance type by its id
    ///
    /// - Remark: HTTP `GET /cashBalance/item`.
    /// - Remark: Generated from `#/paths//cashBalance/item/get(cashBalanceItem)`.
    public enum cashBalanceItem {
        public static let id: Swift.String = "cashBalanceItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalance/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.cashBalanceItem.Input.Query
            /// - Remark: Generated from `#/paths/cashBalance/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.cashBalanceItem.Input.Query,
                headers: Operations.cashBalanceItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalance/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CashBalance)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CashBalance {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalance
            ///
            /// - Remark: Generated from `#/paths//cashBalance/item/get(cashBalanceItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of CashBalance type by its ids
    ///
    /// - Remark: HTTP `GET /cashBalance/items`.
    /// - Remark: Generated from `#/paths//cashBalance/items/get(cashBalanceItems)`.
    public enum cashBalanceItems {
        public static let id: Swift.String = "cashBalanceItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalance/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.cashBalanceItems.Input.Query
            /// - Remark: Generated from `#/paths/cashBalance/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.cashBalanceItems.Input.Query,
                headers: Operations.cashBalanceItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalance/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CashBalance])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CashBalance] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalance
            ///
            /// - Remark: Generated from `#/paths//cashBalance/items/get(cashBalanceItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CashBalance type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /cashBalance/ldeps`.
    /// - Remark: Generated from `#/paths//cashBalance/ldeps/get(cashBalanceLDependents)`.
    public enum cashBalanceLDependents {
        public static let id: Swift.String = "cashBalanceLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalance/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/cashBalance/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.cashBalanceLDependents.Input.Query
            /// - Remark: Generated from `#/paths/cashBalance/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.cashBalanceLDependents.Input.Query,
                headers: Operations.cashBalanceLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalance/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CashBalance])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CashBalance] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalance
            ///
            /// - Remark: Generated from `#/paths//cashBalance/ldeps/get(cashBalanceLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CashBalance type
    ///
    /// - Remark: HTTP `GET /cashBalance/list`.
    /// - Remark: Generated from `#/paths//cashBalance/list/get(cashBalanceList)`.
    public enum cashBalanceList {
        public static let id: Swift.String = "cashBalanceList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalance/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.cashBalanceList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalance/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalance/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CashBalance])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CashBalance] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalance
            ///
            /// - Remark: Generated from `#/paths//cashBalance/list/get(cashBalanceList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CashBalanceLog type related to Account entity
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/deps`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/deps/get(cashBalanceLogDependents)`.
    public enum cashBalanceLogDependents {
        public static let id: Swift.String = "cashBalanceLogDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalanceLog/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/cashBalanceLog/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.cashBalanceLogDependents.Input.Query
            /// - Remark: Generated from `#/paths/cashBalanceLog/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLogDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLogDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceLogDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.cashBalanceLogDependents.Input.Query,
                headers: Operations.cashBalanceLogDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalanceLog/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalanceLog/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CashBalanceLog])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CashBalanceLog] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceLogDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceLogDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalanceLog
            ///
            /// - Remark: Generated from `#/paths//cashBalanceLog/deps/get(cashBalanceLogDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceLogDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceLogDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of CashBalanceLog type by its id
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/item`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/item/get(cashBalanceLogItem)`.
    public enum cashBalanceLogItem {
        public static let id: Swift.String = "cashBalanceLogItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalanceLog/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalanceLog/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.cashBalanceLogItem.Input.Query
            /// - Remark: Generated from `#/paths/cashBalanceLog/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLogItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLogItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceLogItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.cashBalanceLogItem.Input.Query,
                headers: Operations.cashBalanceLogItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalanceLog/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalanceLog/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.CashBalanceLog)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CashBalanceLog {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceLogItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceLogItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalanceLog
            ///
            /// - Remark: Generated from `#/paths//cashBalanceLog/item/get(cashBalanceLogItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceLogItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceLogItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of CashBalanceLog type by its ids
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/items`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/items/get(cashBalanceLogItems)`.
    public enum cashBalanceLogItems {
        public static let id: Swift.String = "cashBalanceLogItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalanceLog/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalanceLog/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.cashBalanceLogItems.Input.Query
            /// - Remark: Generated from `#/paths/cashBalanceLog/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLogItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLogItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceLogItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.cashBalanceLogItems.Input.Query,
                headers: Operations.cashBalanceLogItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalanceLog/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalanceLog/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CashBalanceLog])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CashBalanceLog] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceLogItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceLogItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalanceLog
            ///
            /// - Remark: Generated from `#/paths//cashBalanceLog/items/get(cashBalanceLogItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceLogItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceLogItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of CashBalanceLog type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /cashBalanceLog/ldeps`.
    /// - Remark: Generated from `#/paths//cashBalanceLog/ldeps/get(cashBalanceLogLDependents)`.
    public enum cashBalanceLogLDependents {
        public static let id: Swift.String = "cashBalanceLogLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/cashBalanceLog/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/cashBalanceLog/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.cashBalanceLogLDependents.Input.Query
            /// - Remark: Generated from `#/paths/cashBalanceLog/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLogLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cashBalanceLogLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cashBalanceLogLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.cashBalanceLogLDependents.Input.Query,
                headers: Operations.cashBalanceLogLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/cashBalanceLog/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/cashBalanceLog/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.CashBalanceLog])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.CashBalanceLog] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cashBalanceLogLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cashBalanceLogLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CashBalanceLog
            ///
            /// - Remark: Generated from `#/paths//cashBalanceLog/ldeps/get(cashBalanceLogLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cashBalanceLogLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cashBalanceLogLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of MarginSnapshot type related to Account entity
    ///
    /// - Remark: HTTP `GET /marginSnapshot/deps`.
    /// - Remark: Generated from `#/paths//marginSnapshot/deps/get(marginSnapshotDependents)`.
    public enum marginSnapshotDependents {
        public static let id: Swift.String = "marginSnapshotDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marginSnapshot/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/marginSnapshot/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.marginSnapshotDependents.Input.Query
            /// - Remark: Generated from `#/paths/marginSnapshot/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marginSnapshotDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marginSnapshotDependents.Input.Query,
                headers: Operations.marginSnapshotDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marginSnapshot/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marginSnapshot/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarginSnapshot])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarginSnapshot] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marginSnapshotDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marginSnapshotDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarginSnapshot
            ///
            /// - Remark: Generated from `#/paths//marginSnapshot/deps/get(marginSnapshotDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marginSnapshotDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marginSnapshotDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of MarginSnapshot type by its id
    ///
    /// - Remark: HTTP `GET /marginSnapshot/item`.
    /// - Remark: Generated from `#/paths//marginSnapshot/item/get(marginSnapshotItem)`.
    public enum marginSnapshotItem {
        public static let id: Swift.String = "marginSnapshotItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marginSnapshot/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marginSnapshot/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.marginSnapshotItem.Input.Query
            /// - Remark: Generated from `#/paths/marginSnapshot/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marginSnapshotItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marginSnapshotItem.Input.Query,
                headers: Operations.marginSnapshotItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marginSnapshot/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marginSnapshot/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarginSnapshot)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarginSnapshot {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marginSnapshotItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marginSnapshotItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarginSnapshot
            ///
            /// - Remark: Generated from `#/paths//marginSnapshot/item/get(marginSnapshotItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marginSnapshotItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marginSnapshotItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of MarginSnapshot type by its ids
    ///
    /// - Remark: HTTP `GET /marginSnapshot/items`.
    /// - Remark: Generated from `#/paths//marginSnapshot/items/get(marginSnapshotItems)`.
    public enum marginSnapshotItems {
        public static let id: Swift.String = "marginSnapshotItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marginSnapshot/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marginSnapshot/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.marginSnapshotItems.Input.Query
            /// - Remark: Generated from `#/paths/marginSnapshot/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marginSnapshotItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marginSnapshotItems.Input.Query,
                headers: Operations.marginSnapshotItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marginSnapshot/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marginSnapshot/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarginSnapshot])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarginSnapshot] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marginSnapshotItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marginSnapshotItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarginSnapshot
            ///
            /// - Remark: Generated from `#/paths//marginSnapshot/items/get(marginSnapshotItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marginSnapshotItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marginSnapshotItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of MarginSnapshot type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /marginSnapshot/ldeps`.
    /// - Remark: Generated from `#/paths//marginSnapshot/ldeps/get(marginSnapshotLDependents)`.
    public enum marginSnapshotLDependents {
        public static let id: Swift.String = "marginSnapshotLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marginSnapshot/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/marginSnapshot/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.marginSnapshotLDependents.Input.Query
            /// - Remark: Generated from `#/paths/marginSnapshot/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marginSnapshotLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marginSnapshotLDependents.Input.Query,
                headers: Operations.marginSnapshotLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marginSnapshot/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marginSnapshot/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarginSnapshot])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarginSnapshot] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marginSnapshotLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marginSnapshotLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarginSnapshot
            ///
            /// - Remark: Generated from `#/paths//marginSnapshot/ldeps/get(marginSnapshotLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marginSnapshotLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marginSnapshotLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of MarginSnapshot type
    ///
    /// - Remark: HTTP `GET /marginSnapshot/list`.
    /// - Remark: Generated from `#/paths//marginSnapshot/list/get(marginSnapshotList)`.
    public enum marginSnapshotList {
        public static let id: Swift.String = "marginSnapshotList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marginSnapshot/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marginSnapshotList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marginSnapshotList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.marginSnapshotList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marginSnapshot/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marginSnapshot/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarginSnapshot])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarginSnapshot] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marginSnapshotList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marginSnapshotList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarginSnapshot
            ///
            /// - Remark: Generated from `#/paths//marginSnapshot/list/get(marginSnapshotList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marginSnapshotList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marginSnapshotList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of TradingPermission type related to User entity
    ///
    /// - Remark: HTTP `GET /tradingPermission/deps`.
    /// - Remark: Generated from `#/paths//tradingPermission/deps/get(tradingPermissionDependents)`.
    public enum tradingPermissionDependents {
        public static let id: Swift.String = "tradingPermissionDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradingPermission/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/tradingPermission/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.tradingPermissionDependents.Input.Query
            /// - Remark: Generated from `#/paths/tradingPermission/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradingPermissionDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradingPermissionDependents.Input.Query,
                headers: Operations.tradingPermissionDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradingPermission/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradingPermission/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradingPermission])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradingPermission] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradingPermissionDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradingPermissionDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermission
            ///
            /// - Remark: Generated from `#/paths//tradingPermission/deps/get(tradingPermissionDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradingPermissionDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradingPermissionDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of TradingPermission type by its id
    ///
    /// - Remark: HTTP `GET /tradingPermission/item`.
    /// - Remark: Generated from `#/paths//tradingPermission/item/get(tradingPermissionItem)`.
    public enum tradingPermissionItem {
        public static let id: Swift.String = "tradingPermissionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradingPermission/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradingPermission/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.tradingPermissionItem.Input.Query
            /// - Remark: Generated from `#/paths/tradingPermission/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradingPermissionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradingPermissionItem.Input.Query,
                headers: Operations.tradingPermissionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradingPermission/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradingPermission/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradingPermission)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradingPermission {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradingPermissionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradingPermissionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermission
            ///
            /// - Remark: Generated from `#/paths//tradingPermission/item/get(tradingPermissionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradingPermissionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradingPermissionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of TradingPermission type by its ids
    ///
    /// - Remark: HTTP `GET /tradingPermission/items`.
    /// - Remark: Generated from `#/paths//tradingPermission/items/get(tradingPermissionItems)`.
    public enum tradingPermissionItems {
        public static let id: Swift.String = "tradingPermissionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradingPermission/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradingPermission/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.tradingPermissionItems.Input.Query
            /// - Remark: Generated from `#/paths/tradingPermission/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradingPermissionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradingPermissionItems.Input.Query,
                headers: Operations.tradingPermissionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradingPermission/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradingPermission/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradingPermission])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradingPermission] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradingPermissionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradingPermissionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermission
            ///
            /// - Remark: Generated from `#/paths//tradingPermission/items/get(tradingPermissionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradingPermissionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradingPermissionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of TradingPermission type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /tradingPermission/ldeps`.
    /// - Remark: Generated from `#/paths//tradingPermission/ldeps/get(tradingPermissionLDependents)`.
    public enum tradingPermissionLDependents {
        public static let id: Swift.String = "tradingPermissionLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradingPermission/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/tradingPermission/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.tradingPermissionLDependents.Input.Query
            /// - Remark: Generated from `#/paths/tradingPermission/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradingPermissionLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradingPermissionLDependents.Input.Query,
                headers: Operations.tradingPermissionLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradingPermission/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradingPermission/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradingPermission])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradingPermission] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradingPermissionLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradingPermissionLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermission
            ///
            /// - Remark: Generated from `#/paths//tradingPermission/ldeps/get(tradingPermissionLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradingPermissionLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradingPermissionLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of TradingPermission type
    ///
    /// - Remark: HTTP `GET /tradingPermission/list`.
    /// - Remark: Generated from `#/paths//tradingPermission/list/get(tradingPermissionList)`.
    public enum tradingPermissionList {
        public static let id: Swift.String = "tradingPermissionList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradingPermission/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradingPermissionList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradingPermissionList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.tradingPermissionList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradingPermission/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradingPermission/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradingPermission])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradingPermission] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradingPermissionList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradingPermissionList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermission
            ///
            /// - Remark: Generated from `#/paths//tradingPermission/list/get(tradingPermissionList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradingPermissionList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradingPermissionList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AccountRiskStatus type related to Account entity
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/deps`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/deps/get(accountRiskStatusDependents)`.
    public enum accountRiskStatusDependents {
        public static let id: Swift.String = "accountRiskStatusDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accountRiskStatus/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/accountRiskStatus/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.accountRiskStatusDependents.Input.Query
            /// - Remark: Generated from `#/paths/accountRiskStatus/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountRiskStatusDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountRiskStatusDependents.Input.Query,
                headers: Operations.accountRiskStatusDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accountRiskStatus/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/accountRiskStatus/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AccountRiskStatus])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AccountRiskStatus] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountRiskStatusDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountRiskStatusDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccountRiskStatus
            ///
            /// - Remark: Generated from `#/paths//accountRiskStatus/deps/get(accountRiskStatusDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountRiskStatusDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountRiskStatusDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of AccountRiskStatus type by its id
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/item`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/item/get(accountRiskStatusItem)`.
    public enum accountRiskStatusItem {
        public static let id: Swift.String = "accountRiskStatusItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accountRiskStatus/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accountRiskStatus/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.accountRiskStatusItem.Input.Query
            /// - Remark: Generated from `#/paths/accountRiskStatus/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountRiskStatusItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountRiskStatusItem.Input.Query,
                headers: Operations.accountRiskStatusItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accountRiskStatus/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/accountRiskStatus/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountRiskStatus)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountRiskStatus {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountRiskStatusItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountRiskStatusItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccountRiskStatus
            ///
            /// - Remark: Generated from `#/paths//accountRiskStatus/item/get(accountRiskStatusItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountRiskStatusItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountRiskStatusItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of AccountRiskStatus type by its ids
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/items`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/items/get(accountRiskStatusItems)`.
    public enum accountRiskStatusItems {
        public static let id: Swift.String = "accountRiskStatusItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accountRiskStatus/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accountRiskStatus/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.accountRiskStatusItems.Input.Query
            /// - Remark: Generated from `#/paths/accountRiskStatus/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountRiskStatusItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountRiskStatusItems.Input.Query,
                headers: Operations.accountRiskStatusItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accountRiskStatus/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/accountRiskStatus/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AccountRiskStatus])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AccountRiskStatus] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountRiskStatusItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountRiskStatusItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccountRiskStatus
            ///
            /// - Remark: Generated from `#/paths//accountRiskStatus/items/get(accountRiskStatusItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountRiskStatusItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountRiskStatusItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AccountRiskStatus type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/ldeps`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/ldeps/get(accountRiskStatusLDependents)`.
    public enum accountRiskStatusLDependents {
        public static let id: Swift.String = "accountRiskStatusLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accountRiskStatus/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/accountRiskStatus/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.accountRiskStatusLDependents.Input.Query
            /// - Remark: Generated from `#/paths/accountRiskStatus/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountRiskStatusLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.accountRiskStatusLDependents.Input.Query,
                headers: Operations.accountRiskStatusLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accountRiskStatus/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/accountRiskStatus/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AccountRiskStatus])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AccountRiskStatus] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountRiskStatusLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountRiskStatusLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccountRiskStatus
            ///
            /// - Remark: Generated from `#/paths//accountRiskStatus/ldeps/get(accountRiskStatusLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountRiskStatusLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountRiskStatusLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AccountRiskStatus type
    ///
    /// - Remark: HTTP `GET /accountRiskStatus/list`.
    /// - Remark: Generated from `#/paths//accountRiskStatus/list/get(accountRiskStatusList)`.
    public enum accountRiskStatusList {
        public static let id: Swift.String = "accountRiskStatusList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/accountRiskStatus/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountRiskStatusList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.accountRiskStatusList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.accountRiskStatusList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/accountRiskStatus/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/accountRiskStatus/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AccountRiskStatus])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AccountRiskStatus] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountRiskStatusList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountRiskStatusList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccountRiskStatus
            ///
            /// - Remark: Generated from `#/paths//accountRiskStatus/list/get(accountRiskStatusList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountRiskStatusList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountRiskStatusList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ContractMargin type related to Contract entity
    ///
    /// - Remark: HTTP `GET /contractMargin/deps`.
    /// - Remark: Generated from `#/paths//contractMargin/deps/get(contractMarginDependents)`.
    public enum contractMarginDependents {
        public static let id: Swift.String = "contractMarginDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractMargin/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Contract entity
                ///
                /// - Remark: Generated from `#/paths/contractMargin/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Contract entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.contractMarginDependents.Input.Query
            /// - Remark: Generated from `#/paths/contractMargin/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMarginDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMarginDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractMarginDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractMarginDependents.Input.Query,
                headers: Operations.contractMarginDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMargin/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractMargin/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractMargin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractMargin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractMarginDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractMarginDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractMargin
            ///
            /// - Remark: Generated from `#/paths//contractMargin/deps/get(contractMarginDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractMarginDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractMarginDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ContractMargin type by its id
    ///
    /// - Remark: HTTP `GET /contractMargin/item`.
    /// - Remark: Generated from `#/paths//contractMargin/item/get(contractMarginItem)`.
    public enum contractMarginItem {
        public static let id: Swift.String = "contractMarginItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractMargin/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMargin/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.contractMarginItem.Input.Query
            /// - Remark: Generated from `#/paths/contractMargin/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMarginItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMarginItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractMarginItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractMarginItem.Input.Query,
                headers: Operations.contractMarginItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMargin/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractMargin/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContractMargin)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ContractMargin {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractMarginItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractMarginItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractMargin
            ///
            /// - Remark: Generated from `#/paths//contractMargin/item/get(contractMarginItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractMarginItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractMarginItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ContractMargin type by its ids
    ///
    /// - Remark: HTTP `GET /contractMargin/items`.
    /// - Remark: Generated from `#/paths//contractMargin/items/get(contractMarginItems)`.
    public enum contractMarginItems {
        public static let id: Swift.String = "contractMarginItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractMargin/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMargin/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.contractMarginItems.Input.Query
            /// - Remark: Generated from `#/paths/contractMargin/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMarginItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMarginItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractMarginItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractMarginItems.Input.Query,
                headers: Operations.contractMarginItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMargin/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractMargin/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractMargin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractMargin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractMarginItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractMarginItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractMargin
            ///
            /// - Remark: Generated from `#/paths//contractMargin/items/get(contractMarginItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractMarginItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractMarginItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ContractMargin type related to multiple entities of Contract type
    ///
    /// - Remark: HTTP `GET /contractMargin/ldeps`.
    /// - Remark: Generated from `#/paths//contractMargin/ldeps/get(contractMarginLDependents)`.
    public enum contractMarginLDependents {
        public static let id: Swift.String = "contractMarginLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contractMargin/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Contract entities
                ///
                /// - Remark: Generated from `#/paths/contractMargin/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Contract entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.contractMarginLDependents.Input.Query
            /// - Remark: Generated from `#/paths/contractMargin/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMarginLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contractMarginLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contractMarginLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contractMarginLDependents.Input.Query,
                headers: Operations.contractMarginLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contractMargin/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contractMargin/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContractMargin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContractMargin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contractMarginLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contractMarginLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContractMargin
            ///
            /// - Remark: Generated from `#/paths//contractMargin/ldeps/get(contractMarginLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contractMarginLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contractMarginLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ProductMargin type related to Product entity
    ///
    /// - Remark: HTTP `GET /productMargin/deps`.
    /// - Remark: Generated from `#/paths//productMargin/deps/get(productMarginDependents)`.
    public enum productMarginDependents {
        public static let id: Swift.String = "productMarginDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productMargin/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Product entity
                ///
                /// - Remark: Generated from `#/paths/productMargin/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Product entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.productMarginDependents.Input.Query
            /// - Remark: Generated from `#/paths/productMargin/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productMarginDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productMarginDependents.Input.Query,
                headers: Operations.productMarginDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productMargin/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productMargin/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProductMargin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ProductMargin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productMarginDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productMarginDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductMargin
            ///
            /// - Remark: Generated from `#/paths//productMargin/deps/get(productMarginDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productMarginDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productMarginDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ProductMargin type by its id
    ///
    /// - Remark: HTTP `GET /productMargin/item`.
    /// - Remark: Generated from `#/paths//productMargin/item/get(productMarginItem)`.
    public enum productMarginItem {
        public static let id: Swift.String = "productMarginItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productMargin/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productMargin/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.productMarginItem.Input.Query
            /// - Remark: Generated from `#/paths/productMargin/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productMarginItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productMarginItem.Input.Query,
                headers: Operations.productMarginItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productMargin/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productMargin/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ProductMargin)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ProductMargin {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productMarginItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productMarginItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductMargin
            ///
            /// - Remark: Generated from `#/paths//productMargin/item/get(productMarginItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productMarginItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productMarginItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ProductMargin type by its ids
    ///
    /// - Remark: HTTP `GET /productMargin/items`.
    /// - Remark: Generated from `#/paths//productMargin/items/get(productMarginItems)`.
    public enum productMarginItems {
        public static let id: Swift.String = "productMarginItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productMargin/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productMargin/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.productMarginItems.Input.Query
            /// - Remark: Generated from `#/paths/productMargin/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productMarginItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productMarginItems.Input.Query,
                headers: Operations.productMarginItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productMargin/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productMargin/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProductMargin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ProductMargin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productMarginItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productMarginItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductMargin
            ///
            /// - Remark: Generated from `#/paths//productMargin/items/get(productMarginItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productMarginItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productMarginItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ProductMargin type related to multiple entities of Product type
    ///
    /// - Remark: HTTP `GET /productMargin/ldeps`.
    /// - Remark: Generated from `#/paths//productMargin/ldeps/get(productMarginLDependents)`.
    public enum productMarginLDependents {
        public static let id: Swift.String = "productMarginLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productMargin/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Product entities
                ///
                /// - Remark: Generated from `#/paths/productMargin/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Product entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.productMarginLDependents.Input.Query
            /// - Remark: Generated from `#/paths/productMargin/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productMarginLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.productMarginLDependents.Input.Query,
                headers: Operations.productMarginLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productMargin/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productMargin/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProductMargin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ProductMargin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productMarginLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productMarginLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductMargin
            ///
            /// - Remark: Generated from `#/paths//productMargin/ldeps/get(productMarginLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productMarginLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productMarginLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ProductMargin type
    ///
    /// - Remark: HTTP `GET /productMargin/list`.
    /// - Remark: Generated from `#/paths//productMargin/list/get(productMarginList)`.
    public enum productMarginList {
        public static let id: Swift.String = "productMarginList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/productMargin/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.productMarginList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.productMarginList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.productMarginList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/productMargin/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/productMargin/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ProductMargin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ProductMargin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.productMarginList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.productMarginList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ProductMargin
            ///
            /// - Remark: Generated from `#/paths//productMargin/list/get(productMarginList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.productMarginList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.productMarginList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new entity of UserAccountAutoLiq
    ///
    /// - Remark: HTTP `POST /userAccountAutoLiq/create`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/create/post(userAccountAutoLiqCreate)`.
    public enum userAccountAutoLiqCreate {
        public static let id: Swift.String = "userAccountAutoLiqCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountAutoLiqCreate.Input.Headers
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserAccountAutoLiq)
            }
            public var body: Operations.userAccountAutoLiqCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.userAccountAutoLiqCreate.Input.Headers = .init(),
                body: Operations.userAccountAutoLiqCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountAutoLiq/create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountAutoLiq)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountAutoLiq {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountAutoLiqCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountAutoLiqCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountAutoLiq
            ///
            /// - Remark: Generated from `#/paths//userAccountAutoLiq/create/post(userAccountAutoLiqCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountAutoLiqCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountAutoLiqCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserAccountAutoLiq type related to Account entity
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/deps`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/deps/get(userAccountAutoLiqDependents)`.
    public enum userAccountAutoLiqDependents {
        public static let id: Swift.String = "userAccountAutoLiqDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.userAccountAutoLiqDependents.Input.Query
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountAutoLiqDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountAutoLiqDependents.Input.Query,
                headers: Operations.userAccountAutoLiqDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountAutoLiq/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountAutoLiq])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountAutoLiq] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountAutoLiqDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountAutoLiqDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountAutoLiq
            ///
            /// - Remark: Generated from `#/paths//userAccountAutoLiq/deps/get(userAccountAutoLiqDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountAutoLiqDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountAutoLiqDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of UserAccountAutoLiq type by its id
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/item`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/item/get(userAccountAutoLiqItem)`.
    public enum userAccountAutoLiqItem {
        public static let id: Swift.String = "userAccountAutoLiqItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.userAccountAutoLiqItem.Input.Query
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountAutoLiqItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountAutoLiqItem.Input.Query,
                headers: Operations.userAccountAutoLiqItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountAutoLiq/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountAutoLiq)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountAutoLiq {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountAutoLiqItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountAutoLiqItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountAutoLiq
            ///
            /// - Remark: Generated from `#/paths//userAccountAutoLiq/item/get(userAccountAutoLiqItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountAutoLiqItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountAutoLiqItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of UserAccountAutoLiq type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/items`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/items/get(userAccountAutoLiqItems)`.
    public enum userAccountAutoLiqItems {
        public static let id: Swift.String = "userAccountAutoLiqItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.userAccountAutoLiqItems.Input.Query
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountAutoLiqItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountAutoLiqItems.Input.Query,
                headers: Operations.userAccountAutoLiqItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountAutoLiq/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountAutoLiq])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountAutoLiq] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountAutoLiqItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountAutoLiqItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountAutoLiq
            ///
            /// - Remark: Generated from `#/paths//userAccountAutoLiq/items/get(userAccountAutoLiqItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountAutoLiqItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountAutoLiqItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserAccountAutoLiq type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/ldeps/get(userAccountAutoLiqLDependents)`.
    public enum userAccountAutoLiqLDependents {
        public static let id: Swift.String = "userAccountAutoLiqLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.userAccountAutoLiqLDependents.Input.Query
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountAutoLiqLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountAutoLiqLDependents.Input.Query,
                headers: Operations.userAccountAutoLiqLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountAutoLiq/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountAutoLiq])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountAutoLiq] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountAutoLiqLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountAutoLiqLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountAutoLiq
            ///
            /// - Remark: Generated from `#/paths//userAccountAutoLiq/ldeps/get(userAccountAutoLiqLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountAutoLiqLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountAutoLiqLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserAccountAutoLiq type
    ///
    /// - Remark: HTTP `GET /userAccountAutoLiq/list`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/list/get(userAccountAutoLiqList)`.
    public enum userAccountAutoLiqList {
        public static let id: Swift.String = "userAccountAutoLiqList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountAutoLiqList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.userAccountAutoLiqList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountAutoLiq/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountAutoLiq])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountAutoLiq] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountAutoLiqList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountAutoLiqList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountAutoLiq
            ///
            /// - Remark: Generated from `#/paths//userAccountAutoLiq/list/get(userAccountAutoLiqList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountAutoLiqList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountAutoLiqList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing entity of UserAccountAutoLiq
    ///
    /// - Remark: HTTP `POST /userAccountAutoLiq/update`.
    /// - Remark: Generated from `#/paths//userAccountAutoLiq/update/post(userAccountAutoLiqUpdate)`.
    public enum userAccountAutoLiqUpdate {
        public static let id: Swift.String = "userAccountAutoLiqUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountAutoLiqUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountAutoLiqUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/userAccountAutoLiq/update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserAccountAutoLiq)
            }
            public var body: Operations.userAccountAutoLiqUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.userAccountAutoLiqUpdate.Input.Headers = .init(),
                body: Operations.userAccountAutoLiqUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountAutoLiq/update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountAutoLiq/update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountAutoLiq)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountAutoLiq {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountAutoLiqUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountAutoLiqUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountAutoLiq
            ///
            /// - Remark: Generated from `#/paths//userAccountAutoLiq/update/post(userAccountAutoLiqUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountAutoLiqUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountAutoLiqUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new entity of UserAccountPositionLimit
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/create`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/create/post(userAccountPositionLimitCreate)`.
    public enum userAccountPositionLimitCreate {
        public static let id: Swift.String = "userAccountPositionLimitCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountPositionLimitCreate.Input.Headers
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserAccountPositionLimit)
            }
            public var body: Operations.userAccountPositionLimitCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.userAccountPositionLimitCreate.Input.Headers = .init(),
                body: Operations.userAccountPositionLimitCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountPositionLimit/create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountPositionLimit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountPositionLimit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountPositionLimitCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountPositionLimitCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountPositionLimit
            ///
            /// - Remark: Generated from `#/paths//userAccountPositionLimit/create/post(userAccountPositionLimitCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountPositionLimitCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountPositionLimitCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Remove an account position limit for a user.
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/deleteuseraccountpositionlimit`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deleteuseraccountpositionlimit/post(deleteUserAccountPositionLimit)`.
    public enum deleteUserAccountPositionLimit {
        public static let id: Swift.String = "deleteUserAccountPositionLimit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountpositionlimit/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteUserAccountPositionLimit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteUserAccountPositionLimit.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteUserAccountPositionLimit.Input.Headers
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountpositionlimit/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountpositionlimit/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.DeleteUserAccountPositionLimit)
            }
            public var body: Operations.deleteUserAccountPositionLimit.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.deleteUserAccountPositionLimit.Input.Headers = .init(),
                body: Operations.deleteUserAccountPositionLimit.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountpositionlimit/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountpositionlimit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteResultResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteResultResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteUserAccountPositionLimit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteUserAccountPositionLimit.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// DeleteResultResponse
            ///
            /// - Remark: Generated from `#/paths//userAccountPositionLimit/deleteuseraccountpositionlimit/post(deleteUserAccountPositionLimit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteUserAccountPositionLimit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteUserAccountPositionLimit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Remove a Risk Setting parameter.
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/deleteuseraccountriskparameter`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deleteuseraccountriskparameter/post(deleteUserAccountRiskParameter)`.
    public enum deleteUserAccountRiskParameter {
        public static let id: Swift.String = "deleteUserAccountRiskParameter"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountriskparameter/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteUserAccountRiskParameter.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteUserAccountRiskParameter.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteUserAccountRiskParameter.Input.Headers
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountriskparameter/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountriskparameter/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.DeleteUserAccountRiskParameter)
            }
            public var body: Operations.deleteUserAccountRiskParameter.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.deleteUserAccountRiskParameter.Input.Headers = .init(),
                body: Operations.deleteUserAccountRiskParameter.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountriskparameter/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountPositionLimit/deleteuseraccountriskparameter/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DeleteResultResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DeleteResultResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteUserAccountRiskParameter.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteUserAccountRiskParameter.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// DeleteResultResponse
            ///
            /// - Remark: Generated from `#/paths//userAccountPositionLimit/deleteuseraccountriskparameter/post(deleteUserAccountRiskParameter)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteUserAccountRiskParameter.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteUserAccountRiskParameter.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserAccountPositionLimit type related to Account entity
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/deps`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/deps/get(userAccountPositionLimitDependents)`.
    public enum userAccountPositionLimitDependents {
        public static let id: Swift.String = "userAccountPositionLimitDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Account entity
                ///
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Account entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.userAccountPositionLimitDependents.Input.Query
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountPositionLimitDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountPositionLimitDependents.Input.Query,
                headers: Operations.userAccountPositionLimitDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountPositionLimit/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountPositionLimit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountPositionLimit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountPositionLimitDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountPositionLimitDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountPositionLimit
            ///
            /// - Remark: Generated from `#/paths//userAccountPositionLimit/deps/get(userAccountPositionLimitDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountPositionLimitDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountPositionLimitDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of UserAccountPositionLimit type by its id
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/item`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/item/get(userAccountPositionLimitItem)`.
    public enum userAccountPositionLimitItem {
        public static let id: Swift.String = "userAccountPositionLimitItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.userAccountPositionLimitItem.Input.Query
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountPositionLimitItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountPositionLimitItem.Input.Query,
                headers: Operations.userAccountPositionLimitItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountPositionLimit/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountPositionLimit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountPositionLimit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountPositionLimitItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountPositionLimitItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountPositionLimit
            ///
            /// - Remark: Generated from `#/paths//userAccountPositionLimit/item/get(userAccountPositionLimitItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountPositionLimitItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountPositionLimitItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of UserAccountPositionLimit type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/items`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/items/get(userAccountPositionLimitItems)`.
    public enum userAccountPositionLimitItems {
        public static let id: Swift.String = "userAccountPositionLimitItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.userAccountPositionLimitItems.Input.Query
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountPositionLimitItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountPositionLimitItems.Input.Query,
                headers: Operations.userAccountPositionLimitItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountPositionLimit/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountPositionLimit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountPositionLimit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountPositionLimitItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountPositionLimitItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountPositionLimit
            ///
            /// - Remark: Generated from `#/paths//userAccountPositionLimit/items/get(userAccountPositionLimitItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountPositionLimitItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountPositionLimitItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserAccountPositionLimit type related to multiple entities of Account type
    ///
    /// - Remark: HTTP `GET /userAccountPositionLimit/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/ldeps/get(userAccountPositionLimitLDependents)`.
    public enum userAccountPositionLimitLDependents {
        public static let id: Swift.String = "userAccountPositionLimitLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Account entities
                ///
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Account entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.userAccountPositionLimitLDependents.Input.Query
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountPositionLimitLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountPositionLimitLDependents.Input.Query,
                headers: Operations.userAccountPositionLimitLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountPositionLimit/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountPositionLimit])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountPositionLimit] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountPositionLimitLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountPositionLimitLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountPositionLimit
            ///
            /// - Remark: Generated from `#/paths//userAccountPositionLimit/ldeps/get(userAccountPositionLimitLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountPositionLimitLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountPositionLimitLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing entity of UserAccountPositionLimit
    ///
    /// - Remark: HTTP `POST /userAccountPositionLimit/update`.
    /// - Remark: Generated from `#/paths//userAccountPositionLimit/update/post(userAccountPositionLimitUpdate)`.
    public enum userAccountPositionLimitUpdate {
        public static let id: Swift.String = "userAccountPositionLimitUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountPositionLimitUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountPositionLimitUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/userAccountPositionLimit/update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserAccountPositionLimit)
            }
            public var body: Operations.userAccountPositionLimitUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.userAccountPositionLimitUpdate.Input.Headers = .init(),
                body: Operations.userAccountPositionLimitUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountPositionLimit/update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountPositionLimit/update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountPositionLimit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountPositionLimit {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountPositionLimitUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountPositionLimitUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountPositionLimit
            ///
            /// - Remark: Generated from `#/paths//userAccountPositionLimit/update/post(userAccountPositionLimitUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountPositionLimitUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountPositionLimitUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new entity of UserAccountRiskParameter
    ///
    /// - Remark: HTTP `POST /userAccountRiskParameter/create`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/create/post(userAccountRiskParameterCreate)`.
    public enum userAccountRiskParameterCreate {
        public static let id: Swift.String = "userAccountRiskParameterCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountRiskParameterCreate.Input.Headers
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserAccountRiskParameter)
            }
            public var body: Operations.userAccountRiskParameterCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.userAccountRiskParameterCreate.Input.Headers = .init(),
                body: Operations.userAccountRiskParameterCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountRiskParameter/create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountRiskParameter)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountRiskParameter {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountRiskParameterCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountRiskParameterCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountRiskParameter
            ///
            /// - Remark: Generated from `#/paths//userAccountRiskParameter/create/post(userAccountRiskParameterCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountRiskParameterCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountRiskParameterCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserAccountRiskParameter type related to UserAccountPositionLimit entity
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/deps`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/deps/get(userAccountRiskParameterDependents)`.
    public enum userAccountRiskParameterDependents {
        public static let id: Swift.String = "userAccountRiskParameterDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of UserAccountPositionLimit entity
                ///
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of UserAccountPositionLimit entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.userAccountRiskParameterDependents.Input.Query
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountRiskParameterDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountRiskParameterDependents.Input.Query,
                headers: Operations.userAccountRiskParameterDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountRiskParameter/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountRiskParameter])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountRiskParameter] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountRiskParameterDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountRiskParameterDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountRiskParameter
            ///
            /// - Remark: Generated from `#/paths//userAccountRiskParameter/deps/get(userAccountRiskParameterDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountRiskParameterDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountRiskParameterDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of UserAccountRiskParameter type by its id
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/item`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/item/get(userAccountRiskParameterItem)`.
    public enum userAccountRiskParameterItem {
        public static let id: Swift.String = "userAccountRiskParameterItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.userAccountRiskParameterItem.Input.Query
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountRiskParameterItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountRiskParameterItem.Input.Query,
                headers: Operations.userAccountRiskParameterItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountRiskParameter/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountRiskParameter)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountRiskParameter {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountRiskParameterItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountRiskParameterItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountRiskParameter
            ///
            /// - Remark: Generated from `#/paths//userAccountRiskParameter/item/get(userAccountRiskParameterItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountRiskParameterItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountRiskParameterItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of UserAccountRiskParameter type by its ids
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/items`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/items/get(userAccountRiskParameterItems)`.
    public enum userAccountRiskParameterItems {
        public static let id: Swift.String = "userAccountRiskParameterItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.userAccountRiskParameterItems.Input.Query
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountRiskParameterItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountRiskParameterItems.Input.Query,
                headers: Operations.userAccountRiskParameterItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountRiskParameter/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountRiskParameter])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountRiskParameter] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountRiskParameterItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountRiskParameterItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountRiskParameter
            ///
            /// - Remark: Generated from `#/paths//userAccountRiskParameter/items/get(userAccountRiskParameterItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountRiskParameterItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountRiskParameterItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserAccountRiskParameter type related to multiple entities of UserAccountPositionLimit type
    ///
    /// - Remark: HTTP `GET /userAccountRiskParameter/ldeps`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/ldeps/get(userAccountRiskParameterLDependents)`.
    public enum userAccountRiskParameterLDependents {
        public static let id: Swift.String = "userAccountRiskParameterLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of UserAccountPositionLimit entities
                ///
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of UserAccountPositionLimit entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.userAccountRiskParameterLDependents.Input.Query
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountRiskParameterLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userAccountRiskParameterLDependents.Input.Query,
                headers: Operations.userAccountRiskParameterLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountRiskParameter/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserAccountRiskParameter])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserAccountRiskParameter] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountRiskParameterLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountRiskParameterLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountRiskParameter
            ///
            /// - Remark: Generated from `#/paths//userAccountRiskParameter/ldeps/get(userAccountRiskParameterLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountRiskParameterLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountRiskParameterLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing entity of UserAccountRiskParameter
    ///
    /// - Remark: HTTP `POST /userAccountRiskParameter/update`.
    /// - Remark: Generated from `#/paths//userAccountRiskParameter/update/post(userAccountRiskParameterUpdate)`.
    public enum userAccountRiskParameterUpdate {
        public static let id: Swift.String = "userAccountRiskParameterUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userAccountRiskParameterUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userAccountRiskParameterUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/userAccountRiskParameter/update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserAccountRiskParameter)
            }
            public var body: Operations.userAccountRiskParameterUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.userAccountRiskParameterUpdate.Input.Headers = .init(),
                body: Operations.userAccountRiskParameterUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userAccountRiskParameter/update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userAccountRiskParameter/update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserAccountRiskParameter)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserAccountRiskParameter {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userAccountRiskParameterUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userAccountRiskParameterUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserAccountRiskParameter
            ///
            /// - Remark: Generated from `#/paths//userAccountRiskParameter/update/post(userAccountRiskParameterUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userAccountRiskParameterUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userAccountRiskParameterUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of MarketDataSubscriptionExchangeScope type by its name
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/find`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/find/get(marketDataSubscriptionExchangeScopeFind)`.
    public enum marketDataSubscriptionExchangeScopeFind {
        public static let id: Swift.String = "marketDataSubscriptionExchangeScopeFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.marketDataSubscriptionExchangeScopeFind.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionExchangeScopeFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionExchangeScopeFind.Input.Query,
                headers: Operations.marketDataSubscriptionExchangeScopeFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarketDataSubscriptionExchangeScope)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarketDataSubscriptionExchangeScope {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionExchangeScopeFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionExchangeScopeFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionExchangeScope
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/find/get(marketDataSubscriptionExchangeScopeFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionExchangeScopeFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionExchangeScopeFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of MarketDataSubscriptionExchangeScope type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/item/get(marketDataSubscriptionExchangeScopeItem)`.
    public enum marketDataSubscriptionExchangeScopeItem {
        public static let id: Swift.String = "marketDataSubscriptionExchangeScopeItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.marketDataSubscriptionExchangeScopeItem.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionExchangeScopeItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionExchangeScopeItem.Input.Query,
                headers: Operations.marketDataSubscriptionExchangeScopeItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarketDataSubscriptionExchangeScope)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarketDataSubscriptionExchangeScope {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionExchangeScopeItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionExchangeScopeItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionExchangeScope
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/item/get(marketDataSubscriptionExchangeScopeItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionExchangeScopeItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionExchangeScopeItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of MarketDataSubscriptionExchangeScope type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/items/get(marketDataSubscriptionExchangeScopeItems)`.
    public enum marketDataSubscriptionExchangeScopeItems {
        public static let id: Swift.String = "marketDataSubscriptionExchangeScopeItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.marketDataSubscriptionExchangeScopeItems.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionExchangeScopeItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionExchangeScopeItems.Input.Query,
                headers: Operations.marketDataSubscriptionExchangeScopeItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscriptionExchangeScope])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscriptionExchangeScope] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionExchangeScopeItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionExchangeScopeItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionExchangeScope
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/items/get(marketDataSubscriptionExchangeScopeItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionExchangeScopeItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionExchangeScopeItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of MarketDataSubscriptionExchangeScope type
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/list/get(marketDataSubscriptionExchangeScopeList)`.
    public enum marketDataSubscriptionExchangeScopeList {
        public static let id: Swift.String = "marketDataSubscriptionExchangeScopeList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionExchangeScopeList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.marketDataSubscriptionExchangeScopeList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscriptionExchangeScope])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscriptionExchangeScope] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionExchangeScopeList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionExchangeScopeList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionExchangeScope
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/list/get(marketDataSubscriptionExchangeScopeList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionExchangeScopeList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionExchangeScopeList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of MarketDataSubscriptionExchangeScope type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionExchangeScope/suggest`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/suggest/get(marketDataSubscriptionExchangeScopeSuggest)`.
    public enum marketDataSubscriptionExchangeScopeSuggest {
        public static let id: Swift.String = "marketDataSubscriptionExchangeScopeSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.marketDataSubscriptionExchangeScopeSuggest.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionExchangeScopeSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionExchangeScopeSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionExchangeScopeSuggest.Input.Query,
                headers: Operations.marketDataSubscriptionExchangeScopeSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionExchangeScope/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscriptionExchangeScope])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscriptionExchangeScope] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionExchangeScopeSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionExchangeScopeSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionExchangeScope
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionExchangeScope/suggest/get(marketDataSubscriptionExchangeScopeSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionExchangeScopeSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionExchangeScopeSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of MarketDataSubscriptionPlan type by its name
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/find`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/find/get(marketDataSubscriptionPlanFind)`.
    public enum marketDataSubscriptionPlanFind {
        public static let id: Swift.String = "marketDataSubscriptionPlanFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.marketDataSubscriptionPlanFind.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionPlanFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionPlanFind.Input.Query,
                headers: Operations.marketDataSubscriptionPlanFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarketDataSubscriptionPlan)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarketDataSubscriptionPlan {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionPlanFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionPlanFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/find/get(marketDataSubscriptionPlanFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionPlanFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionPlanFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of MarketDataSubscriptionPlan type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/item/get(marketDataSubscriptionPlanItem)`.
    public enum marketDataSubscriptionPlanItem {
        public static let id: Swift.String = "marketDataSubscriptionPlanItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.marketDataSubscriptionPlanItem.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionPlanItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionPlanItem.Input.Query,
                headers: Operations.marketDataSubscriptionPlanItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarketDataSubscriptionPlan)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarketDataSubscriptionPlan {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionPlanItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionPlanItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/item/get(marketDataSubscriptionPlanItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionPlanItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionPlanItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of MarketDataSubscriptionPlan type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/items/get(marketDataSubscriptionPlanItems)`.
    public enum marketDataSubscriptionPlanItems {
        public static let id: Swift.String = "marketDataSubscriptionPlanItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.marketDataSubscriptionPlanItems.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionPlanItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionPlanItems.Input.Query,
                headers: Operations.marketDataSubscriptionPlanItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscriptionPlan])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscriptionPlan] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionPlanItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionPlanItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/items/get(marketDataSubscriptionPlanItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionPlanItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionPlanItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of MarketDataSubscriptionPlan type
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/list/get(marketDataSubscriptionPlanList)`.
    public enum marketDataSubscriptionPlanList {
        public static let id: Swift.String = "marketDataSubscriptionPlanList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionPlanList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.marketDataSubscriptionPlanList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscriptionPlan])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscriptionPlan] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionPlanList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionPlanList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/list/get(marketDataSubscriptionPlanList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionPlanList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionPlanList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of MarketDataSubscriptionPlan type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /marketDataSubscriptionPlan/suggest`.
    /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/suggest/get(marketDataSubscriptionPlanSuggest)`.
    public enum marketDataSubscriptionPlanSuggest {
        public static let id: Swift.String = "marketDataSubscriptionPlanSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.marketDataSubscriptionPlanSuggest.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionPlanSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionPlanSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionPlanSuggest.Input.Query,
                headers: Operations.marketDataSubscriptionPlanSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscriptionPlan/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscriptionPlan])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscriptionPlan] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionPlanSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionPlanSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscriptionPlan/suggest/get(marketDataSubscriptionPlanSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionPlanSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionPlanSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of TradovateSubscriptionPlan type by its name
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/find`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/find/get(tradovateSubscriptionPlanFind)`.
    public enum tradovateSubscriptionPlanFind {
        public static let id: Swift.String = "tradovateSubscriptionPlanFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.tradovateSubscriptionPlanFind.Input.Query
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionPlanFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradovateSubscriptionPlanFind.Input.Query,
                headers: Operations.tradovateSubscriptionPlanFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradovateSubscriptionPlan)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradovateSubscriptionPlan {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionPlanFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionPlanFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/find/get(tradovateSubscriptionPlanFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionPlanFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionPlanFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of TradovateSubscriptionPlan type by its id
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/item`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/item/get(tradovateSubscriptionPlanItem)`.
    public enum tradovateSubscriptionPlanItem {
        public static let id: Swift.String = "tradovateSubscriptionPlanItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.tradovateSubscriptionPlanItem.Input.Query
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionPlanItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradovateSubscriptionPlanItem.Input.Query,
                headers: Operations.tradovateSubscriptionPlanItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradovateSubscriptionPlan)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradovateSubscriptionPlan {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionPlanItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionPlanItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/item/get(tradovateSubscriptionPlanItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionPlanItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionPlanItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of TradovateSubscriptionPlan type by its ids
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/items`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/items/get(tradovateSubscriptionPlanItems)`.
    public enum tradovateSubscriptionPlanItems {
        public static let id: Swift.String = "tradovateSubscriptionPlanItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.tradovateSubscriptionPlanItems.Input.Query
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionPlanItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradovateSubscriptionPlanItems.Input.Query,
                headers: Operations.tradovateSubscriptionPlanItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradovateSubscriptionPlan])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradovateSubscriptionPlan] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionPlanItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionPlanItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/items/get(tradovateSubscriptionPlanItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionPlanItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionPlanItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of TradovateSubscriptionPlan type
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/list`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/list/get(tradovateSubscriptionPlanList)`.
    public enum tradovateSubscriptionPlanList {
        public static let id: Swift.String = "tradovateSubscriptionPlanList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionPlanList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.tradovateSubscriptionPlanList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradovateSubscriptionPlan])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradovateSubscriptionPlan] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionPlanList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionPlanList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/list/get(tradovateSubscriptionPlanList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionPlanList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionPlanList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of TradovateSubscriptionPlan type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /tradovateSubscriptionPlan/suggest`.
    /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/suggest/get(tradovateSubscriptionPlanSuggest)`.
    public enum tradovateSubscriptionPlanSuggest {
        public static let id: Swift.String = "tradovateSubscriptionPlanSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.tradovateSubscriptionPlanSuggest.Input.Query
            /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionPlanSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionPlanSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradovateSubscriptionPlanSuggest.Input.Query,
                headers: Operations.tradovateSubscriptionPlanSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscriptionPlan/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradovateSubscriptionPlan])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradovateSubscriptionPlan] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionPlanSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionPlanSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscriptionPlan
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscriptionPlan/suggest/get(tradovateSubscriptionPlanSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionPlanSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionPlanSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Change the playback speed of a Market Replay session.
    ///
    /// - Remark: HTTP `POST /replay/changespeed`.
    /// - Remark: Generated from `#/paths//replay/changespeed/post(changeSpeed)`.
    public enum changeSpeed {
        public static let id: Swift.String = "changeSpeed"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/replay/changespeed/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changeSpeed.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changeSpeed.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.changeSpeed.Input.Headers
            /// - Remark: Generated from `#/paths/replay/changespeed/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/replay/changespeed/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ChangeSpeed)
            }
            public var body: Operations.changeSpeed.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.changeSpeed.Input.Headers = .init(),
                body: Operations.changeSpeed.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/replay/changespeed/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/replay/changespeed/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SimpleResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SimpleResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changeSpeed.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changeSpeed.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SimpleResponse
            ///
            /// - Remark: Generated from `#/paths//replay/changespeed/post(changeSpeed)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.changeSpeed.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.changeSpeed.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Before beginning a Market Replay session, call this endpoint to check that the given timeframe is valid within the scope of the user's entitlements.
    /// You should use this endpoint from a WebSocket hooked up to the Market Replay URL.
    ///
    /// ```js
    ///
    /// const URL = 'wss://replay.tradovateapi.com/v1/websocket'
    ///
    /// const myMarketReplaySocket = new WebSocket(URL)
    ///
    /// //simple WebSocket authorization procedure
    /// myMarketReplaySocket.onopen = function() {
    ///     myMarketReplaySocket.send(`authorize\n0\n\n${accessToken}`)
    /// })
    ///
    /// //JSON string for midnight April 30th 2018
    /// const startTimestamp = new Date('2018-04-30').toJSON()
    /// myMarketReplaySocket.send(`replay/checkreplaysession\n1\n\n${JSON.stringify({startTimestamp})}`)
    ///
    /// //listen for response
    /// myMarketReplaySocket.addEventListener('message', msg => {
    ///     const datas = JSON.parse(msg.data.slice(1)) //chop off leading 'frame' char
    ///     //datas looks like this [{s: 200, i: 1, d: { checkStatus: 'OK' } }]
    ///     if(datas) {
    ///         datas.forEach(({i, d}) => {
    ///             if(i && i === 1)  { //id of our sent message is 1, response's `i` field will be 1.
    ///                 console.log(d) //=> { checkStatus: 'OK' }
    ///                 //if the status is OK we can send the initializeClock message
    ///             }
    ///         })
    ///     } 
    /// }
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /replay/checkreplaysession`.
    /// - Remark: Generated from `#/paths//replay/checkreplaysession/post(checkReplaySession)`.
    public enum checkReplaySession {
        public static let id: Swift.String = "checkReplaySession"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/replay/checkreplaysession/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checkReplaySession.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checkReplaySession.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checkReplaySession.Input.Headers
            /// - Remark: Generated from `#/paths/replay/checkreplaysession/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/replay/checkreplaysession/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CheckReplaySession)
            }
            public var body: Operations.checkReplaySession.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.checkReplaySession.Input.Headers = .init(),
                body: Operations.checkReplaySession.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/replay/checkreplaysession/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/replay/checkreplaysession/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CheckReplaySessionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CheckReplaySessionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checkReplaySession.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checkReplaySession.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CheckReplaySessionResponse
            ///
            /// - Remark: Generated from `#/paths//replay/checkreplaysession/post(checkReplaySession)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checkReplaySession.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checkReplaySession.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Set the inital date and time for a market replay session.
    /// Using a WebSocket connected to the Tradovate Market Replay URL, we can start a Market Replay Session which will simulate a given timeframe as if it were happening live. Each replay session creates a new replay account which gets discarded at the end of the replay session.
    /// ```js
    ///
    /// const URL = 'wss://replay.tradovateapi.com/v1/websocket'
    ///
    /// const myMarketReplaySocket = new WebSocket(URL)
    ///
    /// //simple WebSocket authorization procedure
    /// myMarketReplaySocket.onOpen = function onOpen() {
    ///     myMarketReplaySocket.send(`authorize\n0\n\n${accessToken}`)
    /// })
    ///
    /// const requestBody = {
    ///     startTimestamp: new Date('2018-04-30').toJSON(),
    ///     speed: 100, //100%, range is from 0-400%
    ///     initialBalance: 50000 //account balance for replay session
    /// }
    ///
    /// myMarketReplaySocket.send(`replay/initializeclock\n1\n\n${JSON.stringify(requestBody)}`)
    ///
    /// myMarketReplaySocket.addEventListener('message', msg => {
    ///     const datas = JSON.parse(msg.data.slice(1))
    ///     if(datas) {
    ///         datas.forEach(({i, d}) => {
    ///             if(i && i === 1) { //sent id is 1, response id will be 1
    ///                 console.log(d) //=> { ok: true }
    ///             }
    ///         })
    ///     }
    /// })
    ///
    /// ```
    ///
    /// - Remark: HTTP `POST /replay/initializeclock`.
    /// - Remark: Generated from `#/paths//replay/initializeclock/post(initializeClock)`.
    public enum initializeClock {
        public static let id: Swift.String = "initializeClock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/replay/initializeclock/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.initializeClock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.initializeClock.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.initializeClock.Input.Headers
            /// - Remark: Generated from `#/paths/replay/initializeclock/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/replay/initializeclock/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.InitializeClock)
            }
            public var body: Operations.initializeClock.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.initializeClock.Input.Headers = .init(),
                body: Operations.initializeClock.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/replay/initializeclock/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/replay/initializeclock/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SimpleResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SimpleResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.initializeClock.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.initializeClock.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SimpleResponse
            ///
            /// - Remark: Generated from `#/paths//replay/initializeclock/post(initializeClock)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.initializeClock.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.initializeClock.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Silences an "incomplete" notification. 
    /// An "Incomplete" notification is one that has not yet been viewed by a user. Once a user has interacted with a notification it should be "completed".
    ///
    /// - Remark: HTTP `POST /adminAlertSignal/completealertsignal`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/completealertsignal/post(completeAlertSignal)`.
    public enum completeAlertSignal {
        public static let id: Swift.String = "completeAlertSignal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlertSignal/completealertsignal/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.completeAlertSignal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.completeAlertSignal.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.completeAlertSignal.Input.Headers
            /// - Remark: Generated from `#/paths/adminAlertSignal/completealertsignal/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/completealertsignal/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CompleteAlertSignal)
            }
            public var body: Operations.completeAlertSignal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.completeAlertSignal.Input.Headers = .init(),
                body: Operations.completeAlertSignal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/completealertsignal/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlertSignal/completealertsignal/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAlertSignalResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAlertSignalResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.completeAlertSignal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.completeAlertSignal.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlertSignalResponse
            ///
            /// - Remark: Generated from `#/paths//adminAlertSignal/completealertsignal/post(completeAlertSignal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.completeAlertSignal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.completeAlertSignal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AdminAlertSignal type related to AdminAlert entity
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/deps`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/deps/get(adminAlertSignalDependents)`.
    public enum adminAlertSignalDependents {
        public static let id: Swift.String = "adminAlertSignalDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlertSignal/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of AdminAlert entity
                ///
                /// - Remark: Generated from `#/paths/adminAlertSignal/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of AdminAlert entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.adminAlertSignalDependents.Input.Query
            /// - Remark: Generated from `#/paths/adminAlertSignal/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertSignalDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.adminAlertSignalDependents.Input.Query,
                headers: Operations.adminAlertSignalDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlertSignal/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AdminAlertSignal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AdminAlertSignal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertSignalDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertSignalDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlertSignal
            ///
            /// - Remark: Generated from `#/paths//adminAlertSignal/deps/get(adminAlertSignalDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertSignalDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertSignalDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of AdminAlertSignal type by its id
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/item`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/item/get(adminAlertSignalItem)`.
    public enum adminAlertSignalItem {
        public static let id: Swift.String = "adminAlertSignalItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlertSignal/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.adminAlertSignalItem.Input.Query
            /// - Remark: Generated from `#/paths/adminAlertSignal/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertSignalItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.adminAlertSignalItem.Input.Query,
                headers: Operations.adminAlertSignalItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlertSignal/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAlertSignal)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAlertSignal {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertSignalItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertSignalItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlertSignal
            ///
            /// - Remark: Generated from `#/paths//adminAlertSignal/item/get(adminAlertSignalItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertSignalItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertSignalItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of AdminAlertSignal type by its ids
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/items`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/items/get(adminAlertSignalItems)`.
    public enum adminAlertSignalItems {
        public static let id: Swift.String = "adminAlertSignalItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlertSignal/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.adminAlertSignalItems.Input.Query
            /// - Remark: Generated from `#/paths/adminAlertSignal/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertSignalItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.adminAlertSignalItems.Input.Query,
                headers: Operations.adminAlertSignalItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlertSignal/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AdminAlertSignal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AdminAlertSignal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertSignalItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertSignalItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlertSignal
            ///
            /// - Remark: Generated from `#/paths//adminAlertSignal/items/get(adminAlertSignalItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertSignalItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertSignalItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AdminAlertSignal type related to multiple entities of AdminAlert type
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/ldeps`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/ldeps/get(adminAlertSignalLDependents)`.
    public enum adminAlertSignalLDependents {
        public static let id: Swift.String = "adminAlertSignalLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlertSignal/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of AdminAlert entities
                ///
                /// - Remark: Generated from `#/paths/adminAlertSignal/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of AdminAlert entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.adminAlertSignalLDependents.Input.Query
            /// - Remark: Generated from `#/paths/adminAlertSignal/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertSignalLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.adminAlertSignalLDependents.Input.Query,
                headers: Operations.adminAlertSignalLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlertSignal/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AdminAlertSignal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AdminAlertSignal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertSignalLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertSignalLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlertSignal
            ///
            /// - Remark: Generated from `#/paths//adminAlertSignal/ldeps/get(adminAlertSignalLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertSignalLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertSignalLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AdminAlertSignal type
    ///
    /// - Remark: HTTP `GET /adminAlertSignal/list`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/list/get(adminAlertSignalList)`.
    public enum adminAlertSignalList {
        public static let id: Swift.String = "adminAlertSignalList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlertSignal/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSignalList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertSignalList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.adminAlertSignalList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlertSignal/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AdminAlertSignal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AdminAlertSignal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertSignalList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertSignalList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlertSignal
            ///
            /// - Remark: Generated from `#/paths//adminAlertSignal/list/get(adminAlertSignalList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertSignalList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertSignalList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Internal. Can be used by B2B partners to mark an adminAlertSignal entity for further handling.
    ///
    /// - Remark: HTTP `POST /adminAlertSignal/takealertsignalownership`.
    /// - Remark: Generated from `#/paths//adminAlertSignal/takealertsignalownership/post(takeAlertSignalOwnership)`.
    public enum takeAlertSignalOwnership {
        public static let id: Swift.String = "takeAlertSignalOwnership"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlertSignal/takealertsignalownership/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.takeAlertSignalOwnership.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.takeAlertSignalOwnership.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.takeAlertSignalOwnership.Input.Headers
            /// - Remark: Generated from `#/paths/adminAlertSignal/takealertsignalownership/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/takealertsignalownership/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.TakeAlertSignalOwnership)
            }
            public var body: Operations.takeAlertSignalOwnership.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.takeAlertSignalOwnership.Input.Headers = .init(),
                body: Operations.takeAlertSignalOwnership.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlertSignal/takealertsignalownership/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlertSignal/takealertsignalownership/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAlertSignalResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAlertSignalResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.takeAlertSignalOwnership.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.takeAlertSignalOwnership.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlertSignalResponse
            ///
            /// - Remark: Generated from `#/paths//adminAlertSignal/takealertsignalownership/post(takeAlertSignalOwnership)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.takeAlertSignalOwnership.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.takeAlertSignalOwnership.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Create an alert entity associated with the user.
    ///
    ///
    /// - Remark: HTTP `POST /alert/createalert`.
    /// - Remark: Generated from `#/paths//alert/createalert/post(createAlert)`.
    public enum createAlert {
        public static let id: Swift.String = "createAlert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/createalert/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createAlert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createAlert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createAlert.Input.Headers
            /// - Remark: Generated from `#/paths/alert/createalert/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/createalert/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateAlert)
            }
            public var body: Operations.createAlert.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createAlert.Input.Headers = .init(),
                body: Operations.createAlert.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/createalert/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/createalert/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AlertResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AlertResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createAlert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createAlert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertResponse
            ///
            /// - Remark: Generated from `#/paths//alert/createalert/post(createAlert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createAlert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createAlert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Remove an alert entity associated with the user.
    ///
    /// - Remark: HTTP `POST /alert/deletealert`.
    /// - Remark: Generated from `#/paths//alert/deletealert/post(deleteAlert)`.
    public enum deleteAlert {
        public static let id: Swift.String = "deleteAlert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/deletealert/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAlert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.deleteAlert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.deleteAlert.Input.Headers
            /// - Remark: Generated from `#/paths/alert/deletealert/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/deletealert/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.DeleteAlert)
            }
            public var body: Operations.deleteAlert.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.deleteAlert.Input.Headers = .init(),
                body: Operations.deleteAlert.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/deletealert/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/deletealert/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AlertResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AlertResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.deleteAlert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.deleteAlert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertResponse
            ///
            /// - Remark: Generated from `#/paths//alert/deletealert/post(deleteAlert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.deleteAlert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.deleteAlert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Alert type related to User entity
    ///
    /// - Remark: HTTP `GET /alert/deps`.
    /// - Remark: Generated from `#/paths//alert/deps/get(alertDependents)`.
    public enum alertDependents {
        public static let id: Swift.String = "alertDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/alert/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.alertDependents.Input.Query
            /// - Remark: Generated from `#/paths/alert/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.alertDependents.Input.Query,
                headers: Operations.alertDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Alert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Alert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Alert
            ///
            /// - Remark: Generated from `#/paths//alert/deps/get(alertDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Dismiss an alert for a user.
    ///
    /// - Remark: HTTP `POST /alert/dismissalert`.
    /// - Remark: Generated from `#/paths//alert/dismissalert/post(dismissAlert)`.
    public enum dismissAlert {
        public static let id: Swift.String = "dismissAlert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/dismissalert/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dismissAlert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dismissAlert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.dismissAlert.Input.Headers
            /// - Remark: Generated from `#/paths/alert/dismissalert/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/dismissalert/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.DismissAlert)
            }
            public var body: Operations.dismissAlert.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.dismissAlert.Input.Headers = .init(),
                body: Operations.dismissAlert.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/dismissalert/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/dismissalert/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AlertResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AlertResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dismissAlert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dismissAlert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertResponse
            ///
            /// - Remark: Generated from `#/paths//alert/dismissalert/post(dismissAlert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dismissAlert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dismissAlert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Alert type by its id
    ///
    /// - Remark: HTTP `GET /alert/item`.
    /// - Remark: Generated from `#/paths//alert/item/get(alertItem)`.
    public enum alertItem {
        public static let id: Swift.String = "alertItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.alertItem.Input.Query
            /// - Remark: Generated from `#/paths/alert/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.alertItem.Input.Query,
                headers: Operations.alertItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Alert)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Alert {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Alert
            ///
            /// - Remark: Generated from `#/paths//alert/item/get(alertItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Alert type by its ids
    ///
    /// - Remark: HTTP `GET /alert/items`.
    /// - Remark: Generated from `#/paths//alert/items/get(alertItems)`.
    public enum alertItems {
        public static let id: Swift.String = "alertItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.alertItems.Input.Query
            /// - Remark: Generated from `#/paths/alert/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.alertItems.Input.Query,
                headers: Operations.alertItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Alert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Alert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Alert
            ///
            /// - Remark: Generated from `#/paths//alert/items/get(alertItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Alert type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /alert/ldeps`.
    /// - Remark: Generated from `#/paths//alert/ldeps/get(alertLDependents)`.
    public enum alertLDependents {
        public static let id: Swift.String = "alertLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/alert/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.alertLDependents.Input.Query
            /// - Remark: Generated from `#/paths/alert/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.alertLDependents.Input.Query,
                headers: Operations.alertLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Alert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Alert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Alert
            ///
            /// - Remark: Generated from `#/paths//alert/ldeps/get(alertLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Alert type
    ///
    /// - Remark: HTTP `GET /alert/list`.
    /// - Remark: Generated from `#/paths//alert/list/get(alertList)`.
    public enum alertList {
        public static let id: Swift.String = "alertList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.alertList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Alert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Alert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Alert
            ///
            /// - Remark: Generated from `#/paths//alert/list/get(alertList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Mark an alert entity as 'read' for a user.
    ///
    /// - Remark: HTTP `POST /alert/markreadalertsignal`.
    /// - Remark: Generated from `#/paths//alert/markreadalertsignal/post(markReadAlertSignal)`.
    public enum markReadAlertSignal {
        public static let id: Swift.String = "markReadAlertSignal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/markreadalertsignal/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.markReadAlertSignal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.markReadAlertSignal.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.markReadAlertSignal.Input.Headers
            /// - Remark: Generated from `#/paths/alert/markreadalertsignal/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/markreadalertsignal/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.MarkReadAlertSignal)
            }
            public var body: Operations.markReadAlertSignal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.markReadAlertSignal.Input.Headers = .init(),
                body: Operations.markReadAlertSignal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/markreadalertsignal/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/markreadalertsignal/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AlertResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AlertResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.markReadAlertSignal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.markReadAlertSignal.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertResponse
            ///
            /// - Remark: Generated from `#/paths//alert/markreadalertsignal/post(markReadAlertSignal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.markReadAlertSignal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.markReadAlertSignal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Change the parameters of an existing alert.
    ///
    /// - Remark: HTTP `POST /alert/modifyalert`.
    /// - Remark: Generated from `#/paths//alert/modifyalert/post(modifyAlert)`.
    public enum modifyAlert {
        public static let id: Swift.String = "modifyAlert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/modifyalert/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyAlert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyAlert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyAlert.Input.Headers
            /// - Remark: Generated from `#/paths/alert/modifyalert/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/modifyalert/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyAlert)
            }
            public var body: Operations.modifyAlert.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.modifyAlert.Input.Headers = .init(),
                body: Operations.modifyAlert.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/modifyalert/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/modifyalert/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AlertResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AlertResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyAlert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyAlert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertResponse
            ///
            /// - Remark: Generated from `#/paths//alert/modifyalert/post(modifyAlert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyAlert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyAlert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Resets an alert. 
    /// You can use this method after an alert has been triggered to keep the alert and wait for the alert to be triggered again.
    ///
    /// - Remark: HTTP `POST /alert/resetalert`.
    /// - Remark: Generated from `#/paths//alert/resetalert/post(resetAlert)`.
    public enum resetAlert {
        public static let id: Swift.String = "resetAlert"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alert/resetalert/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.resetAlert.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.resetAlert.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.resetAlert.Input.Headers
            /// - Remark: Generated from `#/paths/alert/resetalert/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/resetalert/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ResetAlert)
            }
            public var body: Operations.resetAlert.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.resetAlert.Input.Headers = .init(),
                body: Operations.resetAlert.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alert/resetalert/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alert/resetalert/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AlertResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AlertResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.resetAlert.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.resetAlert.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertResponse
            ///
            /// - Remark: Generated from `#/paths//alert/resetalert/post(resetAlert)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.resetAlert.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.resetAlert.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AlertSignal type related to Alert entity
    ///
    /// - Remark: HTTP `GET /alertSignal/deps`.
    /// - Remark: Generated from `#/paths//alertSignal/deps/get(alertSignalDependents)`.
    public enum alertSignalDependents {
        public static let id: Swift.String = "alertSignalDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alertSignal/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Alert entity
                ///
                /// - Remark: Generated from `#/paths/alertSignal/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Alert entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.alertSignalDependents.Input.Query
            /// - Remark: Generated from `#/paths/alertSignal/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertSignalDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.alertSignalDependents.Input.Query,
                headers: Operations.alertSignalDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alertSignal/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alertSignal/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AlertSignal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AlertSignal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertSignalDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertSignalDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertSignal
            ///
            /// - Remark: Generated from `#/paths//alertSignal/deps/get(alertSignalDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertSignalDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertSignalDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of AlertSignal type by its id
    ///
    /// - Remark: HTTP `GET /alertSignal/item`.
    /// - Remark: Generated from `#/paths//alertSignal/item/get(alertSignalItem)`.
    public enum alertSignalItem {
        public static let id: Swift.String = "alertSignalItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alertSignal/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alertSignal/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.alertSignalItem.Input.Query
            /// - Remark: Generated from `#/paths/alertSignal/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertSignalItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.alertSignalItem.Input.Query,
                headers: Operations.alertSignalItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alertSignal/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alertSignal/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AlertSignal)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AlertSignal {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertSignalItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertSignalItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertSignal
            ///
            /// - Remark: Generated from `#/paths//alertSignal/item/get(alertSignalItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertSignalItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertSignalItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of AlertSignal type by its ids
    ///
    /// - Remark: HTTP `GET /alertSignal/items`.
    /// - Remark: Generated from `#/paths//alertSignal/items/get(alertSignalItems)`.
    public enum alertSignalItems {
        public static let id: Swift.String = "alertSignalItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alertSignal/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alertSignal/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.alertSignalItems.Input.Query
            /// - Remark: Generated from `#/paths/alertSignal/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertSignalItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.alertSignalItems.Input.Query,
                headers: Operations.alertSignalItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alertSignal/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alertSignal/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AlertSignal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AlertSignal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertSignalItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertSignalItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertSignal
            ///
            /// - Remark: Generated from `#/paths//alertSignal/items/get(alertSignalItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertSignalItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertSignalItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AlertSignal type related to multiple entities of Alert type
    ///
    /// - Remark: HTTP `GET /alertSignal/ldeps`.
    /// - Remark: Generated from `#/paths//alertSignal/ldeps/get(alertSignalLDependents)`.
    public enum alertSignalLDependents {
        public static let id: Swift.String = "alertSignalLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alertSignal/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Alert entities
                ///
                /// - Remark: Generated from `#/paths/alertSignal/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Alert entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.alertSignalLDependents.Input.Query
            /// - Remark: Generated from `#/paths/alertSignal/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertSignalLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.alertSignalLDependents.Input.Query,
                headers: Operations.alertSignalLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alertSignal/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alertSignal/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AlertSignal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AlertSignal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertSignalLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertSignalLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertSignal
            ///
            /// - Remark: Generated from `#/paths//alertSignal/ldeps/get(alertSignalLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertSignalLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertSignalLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AlertSignal type
    ///
    /// - Remark: HTTP `GET /alertSignal/list`.
    /// - Remark: Generated from `#/paths//alertSignal/list/get(alertSignalList)`.
    public enum alertSignalList {
        public static let id: Swift.String = "alertSignalList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/alertSignal/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.alertSignalList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.alertSignalList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.alertSignalList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/alertSignal/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/alertSignal/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AlertSignal])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AlertSignal] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.alertSignalList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.alertSignalList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AlertSignal
            ///
            /// - Remark: Generated from `#/paths//alertSignal/list/get(alertSignalList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.alertSignalList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.alertSignalList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of AdminAlert type by its name
    ///
    /// - Remark: HTTP `GET /adminAlert/find`.
    /// - Remark: Generated from `#/paths//adminAlert/find/get(adminAlertFind)`.
    public enum adminAlertFind {
        public static let id: Swift.String = "adminAlertFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlert/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlert/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.adminAlertFind.Input.Query
            /// - Remark: Generated from `#/paths/adminAlert/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.adminAlertFind.Input.Query,
                headers: Operations.adminAlertFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlert/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlert/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAlert)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAlert {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlert
            ///
            /// - Remark: Generated from `#/paths//adminAlert/find/get(adminAlertFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of AdminAlert type by its id
    ///
    /// - Remark: HTTP `GET /adminAlert/item`.
    /// - Remark: Generated from `#/paths//adminAlert/item/get(adminAlertItem)`.
    public enum adminAlertItem {
        public static let id: Swift.String = "adminAlertItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlert/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlert/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.adminAlertItem.Input.Query
            /// - Remark: Generated from `#/paths/adminAlert/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.adminAlertItem.Input.Query,
                headers: Operations.adminAlertItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlert/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlert/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AdminAlert)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AdminAlert {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlert
            ///
            /// - Remark: Generated from `#/paths//adminAlert/item/get(adminAlertItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of AdminAlert type by its ids
    ///
    /// - Remark: HTTP `GET /adminAlert/items`.
    /// - Remark: Generated from `#/paths//adminAlert/items/get(adminAlertItems)`.
    public enum adminAlertItems {
        public static let id: Swift.String = "adminAlertItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlert/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlert/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.adminAlertItems.Input.Query
            /// - Remark: Generated from `#/paths/adminAlert/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.adminAlertItems.Input.Query,
                headers: Operations.adminAlertItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlert/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlert/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AdminAlert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AdminAlert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlert
            ///
            /// - Remark: Generated from `#/paths//adminAlert/items/get(adminAlertItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of AdminAlert type
    ///
    /// - Remark: HTTP `GET /adminAlert/list`.
    /// - Remark: Generated from `#/paths//adminAlert/list/get(adminAlertList)`.
    public enum adminAlertList {
        public static let id: Swift.String = "adminAlertList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlert/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.adminAlertList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlert/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlert/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AdminAlert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AdminAlert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlert
            ///
            /// - Remark: Generated from `#/paths//adminAlert/list/get(adminAlertList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of AdminAlert type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /adminAlert/suggest`.
    /// - Remark: Generated from `#/paths//adminAlert/suggest/get(adminAlertSuggest)`.
    public enum adminAlertSuggest {
        public static let id: Swift.String = "adminAlertSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/adminAlert/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/adminAlert/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/adminAlert/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.adminAlertSuggest.Input.Query
            /// - Remark: Generated from `#/paths/adminAlert/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.adminAlertSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.adminAlertSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.adminAlertSuggest.Input.Query,
                headers: Operations.adminAlertSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/adminAlert/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/adminAlert/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.AdminAlert])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.AdminAlert] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.adminAlertSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.adminAlertSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AdminAlert
            ///
            /// - Remark: Generated from `#/paths//adminAlert/suggest/get(adminAlertSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.adminAlertSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.adminAlertSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ClearingHouse type by its name
    ///
    /// - Remark: HTTP `GET /clearingHouse/find`.
    /// - Remark: Generated from `#/paths//clearingHouse/find/get(clearingHouseFind)`.
    public enum clearingHouseFind {
        public static let id: Swift.String = "clearingHouseFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/clearingHouse/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/clearingHouse/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.clearingHouseFind.Input.Query
            /// - Remark: Generated from `#/paths/clearingHouse/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.clearingHouseFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.clearingHouseFind.Input.Query,
                headers: Operations.clearingHouseFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/clearingHouse/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/clearingHouse/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ClearingHouse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ClearingHouse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.clearingHouseFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.clearingHouseFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ClearingHouse
            ///
            /// - Remark: Generated from `#/paths//clearingHouse/find/get(clearingHouseFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.clearingHouseFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.clearingHouseFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ClearingHouse type by its id
    ///
    /// - Remark: HTTP `GET /clearingHouse/item`.
    /// - Remark: Generated from `#/paths//clearingHouse/item/get(clearingHouseItem)`.
    public enum clearingHouseItem {
        public static let id: Swift.String = "clearingHouseItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/clearingHouse/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/clearingHouse/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.clearingHouseItem.Input.Query
            /// - Remark: Generated from `#/paths/clearingHouse/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.clearingHouseItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.clearingHouseItem.Input.Query,
                headers: Operations.clearingHouseItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/clearingHouse/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/clearingHouse/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ClearingHouse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ClearingHouse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.clearingHouseItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.clearingHouseItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ClearingHouse
            ///
            /// - Remark: Generated from `#/paths//clearingHouse/item/get(clearingHouseItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.clearingHouseItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.clearingHouseItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ClearingHouse type by its ids
    ///
    /// - Remark: HTTP `GET /clearingHouse/items`.
    /// - Remark: Generated from `#/paths//clearingHouse/items/get(clearingHouseItems)`.
    public enum clearingHouseItems {
        public static let id: Swift.String = "clearingHouseItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/clearingHouse/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/clearingHouse/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.clearingHouseItems.Input.Query
            /// - Remark: Generated from `#/paths/clearingHouse/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.clearingHouseItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.clearingHouseItems.Input.Query,
                headers: Operations.clearingHouseItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/clearingHouse/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/clearingHouse/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ClearingHouse])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ClearingHouse] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.clearingHouseItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.clearingHouseItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ClearingHouse
            ///
            /// - Remark: Generated from `#/paths//clearingHouse/items/get(clearingHouseItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.clearingHouseItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.clearingHouseItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ClearingHouse type
    ///
    /// - Remark: HTTP `GET /clearingHouse/list`.
    /// - Remark: Generated from `#/paths//clearingHouse/list/get(clearingHouseList)`.
    public enum clearingHouseList {
        public static let id: Swift.String = "clearingHouseList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/clearingHouse/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.clearingHouseList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.clearingHouseList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/clearingHouse/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/clearingHouse/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ClearingHouse])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ClearingHouse] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.clearingHouseList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.clearingHouseList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ClearingHouse
            ///
            /// - Remark: Generated from `#/paths//clearingHouse/list/get(clearingHouseList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.clearingHouseList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.clearingHouseList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of ClearingHouse type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /clearingHouse/suggest`.
    /// - Remark: Generated from `#/paths//clearingHouse/suggest/get(clearingHouseSuggest)`.
    public enum clearingHouseSuggest {
        public static let id: Swift.String = "clearingHouseSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/clearingHouse/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/clearingHouse/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/clearingHouse/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.clearingHouseSuggest.Input.Query
            /// - Remark: Generated from `#/paths/clearingHouse/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.clearingHouseSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.clearingHouseSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.clearingHouseSuggest.Input.Query,
                headers: Operations.clearingHouseSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/clearingHouse/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/clearingHouse/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ClearingHouse])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ClearingHouse] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.clearingHouseSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.clearingHouseSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ClearingHouse
            ///
            /// - Remark: Generated from `#/paths//clearingHouse/suggest/get(clearingHouseSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.clearingHouseSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.clearingHouseSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Entitlement type by its id
    ///
    /// - Remark: HTTP `GET /entitlement/item`.
    /// - Remark: Generated from `#/paths//entitlement/item/get(entitlementItem)`.
    public enum entitlementItem {
        public static let id: Swift.String = "entitlementItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/entitlement/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/entitlement/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.entitlementItem.Input.Query
            /// - Remark: Generated from `#/paths/entitlement/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.entitlementItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.entitlementItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.entitlementItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.entitlementItem.Input.Query,
                headers: Operations.entitlementItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/entitlement/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/entitlement/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Entitlement)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Entitlement {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.entitlementItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.entitlementItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Entitlement
            ///
            /// - Remark: Generated from `#/paths//entitlement/item/get(entitlementItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.entitlementItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.entitlementItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Entitlement type by its ids
    ///
    /// - Remark: HTTP `GET /entitlement/items`.
    /// - Remark: Generated from `#/paths//entitlement/items/get(entitlementItems)`.
    public enum entitlementItems {
        public static let id: Swift.String = "entitlementItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/entitlement/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/entitlement/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.entitlementItems.Input.Query
            /// - Remark: Generated from `#/paths/entitlement/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.entitlementItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.entitlementItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.entitlementItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.entitlementItems.Input.Query,
                headers: Operations.entitlementItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/entitlement/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/entitlement/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Entitlement])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Entitlement] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.entitlementItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.entitlementItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Entitlement
            ///
            /// - Remark: Generated from `#/paths//entitlement/items/get(entitlementItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.entitlementItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.entitlementItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Entitlement type
    ///
    /// - Remark: HTTP `GET /entitlement/list`.
    /// - Remark: Generated from `#/paths//entitlement/list/get(entitlementList)`.
    public enum entitlementList {
        public static let id: Swift.String = "entitlementList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/entitlement/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.entitlementList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.entitlementList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.entitlementList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.entitlementList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/entitlement/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/entitlement/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Entitlement])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Entitlement] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.entitlementList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.entitlementList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Entitlement
            ///
            /// - Remark: Generated from `#/paths//entitlement/list/get(entitlementList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.entitlementList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.entitlementList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of OrderStrategyType type by its name
    ///
    /// - Remark: HTTP `GET /orderStrategyType/find`.
    /// - Remark: Generated from `#/paths//orderStrategyType/find/get(orderStrategyTypeFind)`.
    public enum orderStrategyTypeFind {
        public static let id: Swift.String = "orderStrategyTypeFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyType/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyType/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.orderStrategyTypeFind.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategyType/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyTypeFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyTypeFind.Input.Query,
                headers: Operations.orderStrategyTypeFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyType/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyType/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrderStrategyType)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OrderStrategyType {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyTypeFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyTypeFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyType
            ///
            /// - Remark: Generated from `#/paths//orderStrategyType/find/get(orderStrategyTypeFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyTypeFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyTypeFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of OrderStrategyType type by its id
    ///
    /// - Remark: HTTP `GET /orderStrategyType/item`.
    /// - Remark: Generated from `#/paths//orderStrategyType/item/get(orderStrategyTypeItem)`.
    public enum orderStrategyTypeItem {
        public static let id: Swift.String = "orderStrategyTypeItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyType/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyType/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.orderStrategyTypeItem.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategyType/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyTypeItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyTypeItem.Input.Query,
                headers: Operations.orderStrategyTypeItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyType/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyType/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.OrderStrategyType)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OrderStrategyType {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyTypeItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyTypeItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyType
            ///
            /// - Remark: Generated from `#/paths//orderStrategyType/item/get(orderStrategyTypeItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyTypeItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyTypeItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of OrderStrategyType type by its ids
    ///
    /// - Remark: HTTP `GET /orderStrategyType/items`.
    /// - Remark: Generated from `#/paths//orderStrategyType/items/get(orderStrategyTypeItems)`.
    public enum orderStrategyTypeItems {
        public static let id: Swift.String = "orderStrategyTypeItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyType/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyType/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.orderStrategyTypeItems.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategyType/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyTypeItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyTypeItems.Input.Query,
                headers: Operations.orderStrategyTypeItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyType/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyType/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategyType])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategyType] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyTypeItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyTypeItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyType
            ///
            /// - Remark: Generated from `#/paths//orderStrategyType/items/get(orderStrategyTypeItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyTypeItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyTypeItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of OrderStrategyType type
    ///
    /// - Remark: HTTP `GET /orderStrategyType/list`.
    /// - Remark: Generated from `#/paths//orderStrategyType/list/get(orderStrategyTypeList)`.
    public enum orderStrategyTypeList {
        public static let id: Swift.String = "orderStrategyTypeList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyType/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyTypeList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.orderStrategyTypeList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyType/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyType/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategyType])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategyType] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyTypeList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyTypeList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyType
            ///
            /// - Remark: Generated from `#/paths//orderStrategyType/list/get(orderStrategyTypeList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyTypeList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyTypeList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of OrderStrategyType type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /orderStrategyType/suggest`.
    /// - Remark: Generated from `#/paths//orderStrategyType/suggest/get(orderStrategyTypeSuggest)`.
    public enum orderStrategyTypeSuggest {
        public static let id: Swift.String = "orderStrategyTypeSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/orderStrategyType/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/orderStrategyType/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/orderStrategyType/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.orderStrategyTypeSuggest.Input.Query
            /// - Remark: Generated from `#/paths/orderStrategyType/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.orderStrategyTypeSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.orderStrategyTypeSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.orderStrategyTypeSuggest.Input.Query,
                headers: Operations.orderStrategyTypeSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/orderStrategyType/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/orderStrategyType/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.OrderStrategyType])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.OrderStrategyType] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.orderStrategyTypeSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.orderStrategyTypeSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OrderStrategyType
            ///
            /// - Remark: Generated from `#/paths//orderStrategyType/suggest/get(orderStrategyTypeSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.orderStrategyTypeSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.orderStrategyTypeSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Property type by its name
    ///
    /// - Remark: HTTP `GET /property/find`.
    /// - Remark: Generated from `#/paths//property/find/get(propertyFind)`.
    public enum propertyFind {
        public static let id: Swift.String = "propertyFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/property/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/property/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.propertyFind.Input.Query
            /// - Remark: Generated from `#/paths/property/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertyFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertyFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.propertyFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.propertyFind.Input.Query,
                headers: Operations.propertyFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/property/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/property/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Property)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Property {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.propertyFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.propertyFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Property
            ///
            /// - Remark: Generated from `#/paths//property/find/get(propertyFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.propertyFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.propertyFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Property type by its id
    ///
    /// - Remark: HTTP `GET /property/item`.
    /// - Remark: Generated from `#/paths//property/item/get(propertyItem)`.
    public enum propertyItem {
        public static let id: Swift.String = "propertyItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/property/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/property/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.propertyItem.Input.Query
            /// - Remark: Generated from `#/paths/property/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertyItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertyItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.propertyItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.propertyItem.Input.Query,
                headers: Operations.propertyItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/property/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/property/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Property)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Property {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.propertyItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.propertyItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Property
            ///
            /// - Remark: Generated from `#/paths//property/item/get(propertyItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.propertyItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.propertyItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Property type by its ids
    ///
    /// - Remark: HTTP `GET /property/items`.
    /// - Remark: Generated from `#/paths//property/items/get(propertyItems)`.
    public enum propertyItems {
        public static let id: Swift.String = "propertyItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/property/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/property/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.propertyItems.Input.Query
            /// - Remark: Generated from `#/paths/property/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertyItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertyItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.propertyItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.propertyItems.Input.Query,
                headers: Operations.propertyItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/property/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/property/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Property])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Property] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.propertyItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.propertyItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Property
            ///
            /// - Remark: Generated from `#/paths//property/items/get(propertyItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.propertyItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.propertyItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Property type
    ///
    /// - Remark: HTTP `GET /property/list`.
    /// - Remark: Generated from `#/paths//property/list/get(propertyList)`.
    public enum propertyList {
        public static let id: Swift.String = "propertyList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/property/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertyList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertyList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.propertyList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.propertyList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/property/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/property/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Property])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Property] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.propertyList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.propertyList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Property
            ///
            /// - Remark: Generated from `#/paths//property/list/get(propertyList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.propertyList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.propertyList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of Property type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /property/suggest`.
    /// - Remark: Generated from `#/paths//property/suggest/get(propertySuggest)`.
    public enum propertySuggest {
        public static let id: Swift.String = "propertySuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/property/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/property/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/property/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.propertySuggest.Input.Query
            /// - Remark: Generated from `#/paths/property/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertySuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.propertySuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.propertySuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.propertySuggest.Input.Query,
                headers: Operations.propertySuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/property/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/property/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Property])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Property] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.propertySuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.propertySuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Property
            ///
            /// - Remark: Generated from `#/paths//property/suggest/get(propertySuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.propertySuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.propertySuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ContactInfo type related to User entity
    ///
    /// - Remark: HTTP `GET /contactInfo/deps`.
    /// - Remark: Generated from `#/paths//contactInfo/deps/get(contactInfoDependents)`.
    public enum contactInfoDependents {
        public static let id: Swift.String = "contactInfoDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contactInfo/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/contactInfo/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.contactInfoDependents.Input.Query
            /// - Remark: Generated from `#/paths/contactInfo/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contactInfoDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contactInfoDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contactInfoDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contactInfoDependents.Input.Query,
                headers: Operations.contactInfoDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contactInfo/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contactInfo/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContactInfo])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContactInfo] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contactInfoDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contactInfoDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContactInfo
            ///
            /// - Remark: Generated from `#/paths//contactInfo/deps/get(contactInfoDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contactInfoDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contactInfoDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ContactInfo type by its id
    ///
    /// - Remark: HTTP `GET /contactInfo/item`.
    /// - Remark: Generated from `#/paths//contactInfo/item/get(contactInfoItem)`.
    public enum contactInfoItem {
        public static let id: Swift.String = "contactInfoItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contactInfo/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contactInfo/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.contactInfoItem.Input.Query
            /// - Remark: Generated from `#/paths/contactInfo/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contactInfoItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contactInfoItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contactInfoItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contactInfoItem.Input.Query,
                headers: Operations.contactInfoItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contactInfo/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contactInfo/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ContactInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ContactInfo {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contactInfoItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contactInfoItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContactInfo
            ///
            /// - Remark: Generated from `#/paths//contactInfo/item/get(contactInfoItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contactInfoItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contactInfoItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ContactInfo type by its ids
    ///
    /// - Remark: HTTP `GET /contactInfo/items`.
    /// - Remark: Generated from `#/paths//contactInfo/items/get(contactInfoItems)`.
    public enum contactInfoItems {
        public static let id: Swift.String = "contactInfoItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contactInfo/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contactInfo/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.contactInfoItems.Input.Query
            /// - Remark: Generated from `#/paths/contactInfo/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contactInfoItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contactInfoItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contactInfoItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contactInfoItems.Input.Query,
                headers: Operations.contactInfoItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contactInfo/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contactInfo/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContactInfo])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContactInfo] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contactInfoItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contactInfoItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContactInfo
            ///
            /// - Remark: Generated from `#/paths//contactInfo/items/get(contactInfoItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contactInfoItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contactInfoItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ContactInfo type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /contactInfo/ldeps`.
    /// - Remark: Generated from `#/paths//contactInfo/ldeps/get(contactInfoLDependents)`.
    public enum contactInfoLDependents {
        public static let id: Swift.String = "contactInfoLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/contactInfo/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/contactInfo/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.contactInfoLDependents.Input.Query
            /// - Remark: Generated from `#/paths/contactInfo/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contactInfoLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.contactInfoLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.contactInfoLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.contactInfoLDependents.Input.Query,
                headers: Operations.contactInfoLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/contactInfo/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/contactInfo/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ContactInfo])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ContactInfo] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.contactInfoLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.contactInfoLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ContactInfo
            ///
            /// - Remark: Generated from `#/paths//contactInfo/ldeps/get(contactInfoLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.contactInfoLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.contactInfoLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new entity of MarketDataSubscription
    ///
    /// - Remark: HTTP `POST /marketDataSubscription/create`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/create/post(marketDataSubscriptionCreate)`.
    public enum marketDataSubscriptionCreate {
        public static let id: Swift.String = "marketDataSubscriptionCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscription/create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionCreate.Input.Headers
            /// - Remark: Generated from `#/paths/marketDataSubscription/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.MarketDataSubscription)
            }
            public var body: Operations.marketDataSubscriptionCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.marketDataSubscriptionCreate.Input.Headers = .init(),
                body: Operations.marketDataSubscriptionCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscription/create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarketDataSubscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarketDataSubscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscription/create/post(marketDataSubscriptionCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of MarketDataSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/deps`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/deps/get(marketDataSubscriptionDependents)`.
    public enum marketDataSubscriptionDependents {
        public static let id: Swift.String = "marketDataSubscriptionDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscription/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/marketDataSubscription/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.marketDataSubscriptionDependents.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscription/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionDependents.Input.Query,
                headers: Operations.marketDataSubscriptionDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscription/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscription/deps/get(marketDataSubscriptionDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of MarketDataSubscription type by its id
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/item`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/item/get(marketDataSubscriptionItem)`.
    public enum marketDataSubscriptionItem {
        public static let id: Swift.String = "marketDataSubscriptionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscription/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.marketDataSubscriptionItem.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscription/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionItem.Input.Query,
                headers: Operations.marketDataSubscriptionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscription/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarketDataSubscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarketDataSubscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscription/item/get(marketDataSubscriptionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of MarketDataSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/items`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/items/get(marketDataSubscriptionItems)`.
    public enum marketDataSubscriptionItems {
        public static let id: Swift.String = "marketDataSubscriptionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscription/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.marketDataSubscriptionItems.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscription/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionItems.Input.Query,
                headers: Operations.marketDataSubscriptionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscription/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscription/items/get(marketDataSubscriptionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of MarketDataSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/ldeps/get(marketDataSubscriptionLDependents)`.
    public enum marketDataSubscriptionLDependents {
        public static let id: Swift.String = "marketDataSubscriptionLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscription/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/marketDataSubscription/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.marketDataSubscriptionLDependents.Input.Query
            /// - Remark: Generated from `#/paths/marketDataSubscription/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.marketDataSubscriptionLDependents.Input.Query,
                headers: Operations.marketDataSubscriptionLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscription/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscription/ldeps/get(marketDataSubscriptionLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of MarketDataSubscription type
    ///
    /// - Remark: HTTP `GET /marketDataSubscription/list`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/list/get(marketDataSubscriptionList)`.
    public enum marketDataSubscriptionList {
        public static let id: Swift.String = "marketDataSubscriptionList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscription/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.marketDataSubscriptionList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscription/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.MarketDataSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.MarketDataSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscription/list/get(marketDataSubscriptionList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing entity of MarketDataSubscription
    ///
    /// - Remark: HTTP `POST /marketDataSubscription/update`.
    /// - Remark: Generated from `#/paths//marketDataSubscription/update/post(marketDataSubscriptionUpdate)`.
    public enum marketDataSubscriptionUpdate {
        public static let id: Swift.String = "marketDataSubscriptionUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/marketDataSubscription/update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.marketDataSubscriptionUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.marketDataSubscriptionUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/marketDataSubscription/update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.MarketDataSubscription)
            }
            public var body: Operations.marketDataSubscriptionUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.marketDataSubscriptionUpdate.Input.Headers = .init(),
                body: Operations.marketDataSubscriptionUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/marketDataSubscription/update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/marketDataSubscription/update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarketDataSubscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarketDataSubscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.marketDataSubscriptionUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.marketDataSubscriptionUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//marketDataSubscription/update/post(marketDataSubscriptionUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.marketDataSubscriptionUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.marketDataSubscriptionUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Organization type by its name
    ///
    /// - Remark: HTTP `GET /organization/find`.
    /// - Remark: Generated from `#/paths//organization/find/get(organizationFind)`.
    public enum organizationFind {
        public static let id: Swift.String = "organizationFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.organizationFind.Input.Query
            /// - Remark: Generated from `#/paths/organization/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.organizationFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.organizationFind.Input.Query,
                headers: Operations.organizationFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Organization)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Organization {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.organizationFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.organizationFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Organization
            ///
            /// - Remark: Generated from `#/paths//organization/find/get(organizationFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.organizationFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.organizationFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Organization type by its id
    ///
    /// - Remark: HTTP `GET /organization/item`.
    /// - Remark: Generated from `#/paths//organization/item/get(organizationItem)`.
    public enum organizationItem {
        public static let id: Swift.String = "organizationItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.organizationItem.Input.Query
            /// - Remark: Generated from `#/paths/organization/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.organizationItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.organizationItem.Input.Query,
                headers: Operations.organizationItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Organization)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Organization {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.organizationItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.organizationItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Organization
            ///
            /// - Remark: Generated from `#/paths//organization/item/get(organizationItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.organizationItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.organizationItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Organization type by its ids
    ///
    /// - Remark: HTTP `GET /organization/items`.
    /// - Remark: Generated from `#/paths//organization/items/get(organizationItems)`.
    public enum organizationItems {
        public static let id: Swift.String = "organizationItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.organizationItems.Input.Query
            /// - Remark: Generated from `#/paths/organization/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.organizationItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.organizationItems.Input.Query,
                headers: Operations.organizationItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Organization])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Organization] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.organizationItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.organizationItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Organization
            ///
            /// - Remark: Generated from `#/paths//organization/items/get(organizationItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.organizationItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.organizationItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Organization type
    ///
    /// - Remark: HTTP `GET /organization/list`.
    /// - Remark: Generated from `#/paths//organization/list/get(organizationList)`.
    public enum organizationList {
        public static let id: Swift.String = "organizationList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.organizationList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.organizationList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Organization])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Organization] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.organizationList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.organizationList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Organization
            ///
            /// - Remark: Generated from `#/paths//organization/list/get(organizationList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.organizationList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.organizationList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of Organization type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /organization/suggest`.
    /// - Remark: Generated from `#/paths//organization/suggest/get(organizationSuggest)`.
    public enum organizationSuggest {
        public static let id: Swift.String = "organizationSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/organization/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/organization/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/organization/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.organizationSuggest.Input.Query
            /// - Remark: Generated from `#/paths/organization/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.organizationSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.organizationSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.organizationSuggest.Input.Query,
                headers: Operations.organizationSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/organization/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/organization/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Organization])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Organization] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.organizationSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.organizationSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Organization
            ///
            /// - Remark: Generated from `#/paths//organization/suggest/get(organizationSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.organizationSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.organizationSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of SecondMarketDataSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/deps`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/deps/get(secondMarketDataSubscriptionDependents)`.
    public enum secondMarketDataSubscriptionDependents {
        public static let id: Swift.String = "secondMarketDataSubscriptionDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.secondMarketDataSubscriptionDependents.Input.Query
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secondMarketDataSubscriptionDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.secondMarketDataSubscriptionDependents.Input.Query,
                headers: Operations.secondMarketDataSubscriptionDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secondMarketDataSubscription/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.SecondMarketDataSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.SecondMarketDataSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secondMarketDataSubscriptionDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.secondMarketDataSubscriptionDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//secondMarketDataSubscription/deps/get(secondMarketDataSubscriptionDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secondMarketDataSubscriptionDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secondMarketDataSubscriptionDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of SecondMarketDataSubscription type by its id
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/item`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/item/get(secondMarketDataSubscriptionItem)`.
    public enum secondMarketDataSubscriptionItem {
        public static let id: Swift.String = "secondMarketDataSubscriptionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.secondMarketDataSubscriptionItem.Input.Query
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secondMarketDataSubscriptionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.secondMarketDataSubscriptionItem.Input.Query,
                headers: Operations.secondMarketDataSubscriptionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secondMarketDataSubscription/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.SecondMarketDataSubscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SecondMarketDataSubscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secondMarketDataSubscriptionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.secondMarketDataSubscriptionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//secondMarketDataSubscription/item/get(secondMarketDataSubscriptionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secondMarketDataSubscriptionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secondMarketDataSubscriptionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of SecondMarketDataSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/items`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/items/get(secondMarketDataSubscriptionItems)`.
    public enum secondMarketDataSubscriptionItems {
        public static let id: Swift.String = "secondMarketDataSubscriptionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.secondMarketDataSubscriptionItems.Input.Query
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secondMarketDataSubscriptionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.secondMarketDataSubscriptionItems.Input.Query,
                headers: Operations.secondMarketDataSubscriptionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secondMarketDataSubscription/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.SecondMarketDataSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.SecondMarketDataSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secondMarketDataSubscriptionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.secondMarketDataSubscriptionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//secondMarketDataSubscription/items/get(secondMarketDataSubscriptionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secondMarketDataSubscriptionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secondMarketDataSubscriptionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of SecondMarketDataSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/ldeps/get(secondMarketDataSubscriptionLDependents)`.
    public enum secondMarketDataSubscriptionLDependents {
        public static let id: Swift.String = "secondMarketDataSubscriptionLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.secondMarketDataSubscriptionLDependents.Input.Query
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secondMarketDataSubscriptionLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.secondMarketDataSubscriptionLDependents.Input.Query,
                headers: Operations.secondMarketDataSubscriptionLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secondMarketDataSubscription/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.SecondMarketDataSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.SecondMarketDataSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secondMarketDataSubscriptionLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.secondMarketDataSubscriptionLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//secondMarketDataSubscription/ldeps/get(secondMarketDataSubscriptionLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secondMarketDataSubscriptionLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secondMarketDataSubscriptionLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of SecondMarketDataSubscription type
    ///
    /// - Remark: HTTP `GET /secondMarketDataSubscription/list`.
    /// - Remark: Generated from `#/paths//secondMarketDataSubscription/list/get(secondMarketDataSubscriptionList)`.
    public enum secondMarketDataSubscriptionList {
        public static let id: Swift.String = "secondMarketDataSubscriptionList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/secondMarketDataSubscription/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.secondMarketDataSubscriptionList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.secondMarketDataSubscriptionList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.secondMarketDataSubscriptionList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/secondMarketDataSubscription/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/secondMarketDataSubscription/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.SecondMarketDataSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.SecondMarketDataSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.secondMarketDataSubscriptionList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.secondMarketDataSubscriptionList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscription
            ///
            /// - Remark: Generated from `#/paths//secondMarketDataSubscription/list/get(secondMarketDataSubscriptionList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.secondMarketDataSubscriptionList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.secondMarketDataSubscriptionList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new entity of TradovateSubscription
    ///
    /// - Remark: HTTP `POST /tradovateSubscription/create`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/create/post(tradovateSubscriptionCreate)`.
    public enum tradovateSubscriptionCreate {
        public static let id: Swift.String = "tradovateSubscriptionCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscription/create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionCreate.Input.Headers
            /// - Remark: Generated from `#/paths/tradovateSubscription/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.TradovateSubscription)
            }
            public var body: Operations.tradovateSubscriptionCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.tradovateSubscriptionCreate.Input.Headers = .init(),
                body: Operations.tradovateSubscriptionCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscription/create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradovateSubscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradovateSubscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscription
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscription/create/post(tradovateSubscriptionCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of TradovateSubscription type related to User entity
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/deps`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/deps/get(tradovateSubscriptionDependents)`.
    public enum tradovateSubscriptionDependents {
        public static let id: Swift.String = "tradovateSubscriptionDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscription/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/tradovateSubscription/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.tradovateSubscriptionDependents.Input.Query
            /// - Remark: Generated from `#/paths/tradovateSubscription/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradovateSubscriptionDependents.Input.Query,
                headers: Operations.tradovateSubscriptionDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscription/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradovateSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradovateSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscription
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscription/deps/get(tradovateSubscriptionDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of TradovateSubscription type by its id
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/item`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/item/get(tradovateSubscriptionItem)`.
    public enum tradovateSubscriptionItem {
        public static let id: Swift.String = "tradovateSubscriptionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscription/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.tradovateSubscriptionItem.Input.Query
            /// - Remark: Generated from `#/paths/tradovateSubscription/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradovateSubscriptionItem.Input.Query,
                headers: Operations.tradovateSubscriptionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscription/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradovateSubscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradovateSubscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscription
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscription/item/get(tradovateSubscriptionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of TradovateSubscription type by its ids
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/items`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/items/get(tradovateSubscriptionItems)`.
    public enum tradovateSubscriptionItems {
        public static let id: Swift.String = "tradovateSubscriptionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscription/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.tradovateSubscriptionItems.Input.Query
            /// - Remark: Generated from `#/paths/tradovateSubscription/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradovateSubscriptionItems.Input.Query,
                headers: Operations.tradovateSubscriptionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscription/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradovateSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradovateSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscription
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscription/items/get(tradovateSubscriptionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of TradovateSubscription type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/ldeps`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/ldeps/get(tradovateSubscriptionLDependents)`.
    public enum tradovateSubscriptionLDependents {
        public static let id: Swift.String = "tradovateSubscriptionLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscription/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/tradovateSubscription/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.tradovateSubscriptionLDependents.Input.Query
            /// - Remark: Generated from `#/paths/tradovateSubscription/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.tradovateSubscriptionLDependents.Input.Query,
                headers: Operations.tradovateSubscriptionLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscription/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradovateSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradovateSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscription
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscription/ldeps/get(tradovateSubscriptionLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of TradovateSubscription type
    ///
    /// - Remark: HTTP `GET /tradovateSubscription/list`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/list/get(tradovateSubscriptionList)`.
    public enum tradovateSubscriptionList {
        public static let id: Swift.String = "tradovateSubscriptionList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscription/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.tradovateSubscriptionList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscription/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.TradovateSubscription])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.TradovateSubscription] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscription
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscription/list/get(tradovateSubscriptionList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing entity of TradovateSubscription
    ///
    /// - Remark: HTTP `POST /tradovateSubscription/update`.
    /// - Remark: Generated from `#/paths//tradovateSubscription/update/post(tradovateSubscriptionUpdate)`.
    public enum tradovateSubscriptionUpdate {
        public static let id: Swift.String = "tradovateSubscriptionUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/tradovateSubscription/update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tradovateSubscriptionUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.tradovateSubscriptionUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/tradovateSubscription/update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.TradovateSubscription)
            }
            public var body: Operations.tradovateSubscriptionUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.tradovateSubscriptionUpdate.Input.Headers = .init(),
                body: Operations.tradovateSubscriptionUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/tradovateSubscription/update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/tradovateSubscription/update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradovateSubscription)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradovateSubscription {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tradovateSubscriptionUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tradovateSubscriptionUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscription
            ///
            /// - Remark: Generated from `#/paths//tradovateSubscription/update/post(tradovateSubscriptionUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tradovateSubscriptionUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tradovateSubscriptionUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Called to accept a given trading permission granted by another party.
    ///
    /// - Remark: HTTP `POST /user/accepttradingpermission`.
    /// - Remark: Generated from `#/paths//user/accepttradingpermission/post(acceptTradingPermission)`.
    public enum acceptTradingPermission {
        public static let id: Swift.String = "acceptTradingPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/accepttradingpermission/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.acceptTradingPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.acceptTradingPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.acceptTradingPermission.Input.Headers
            /// - Remark: Generated from `#/paths/user/accepttradingpermission/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/accepttradingpermission/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AcceptTradingPermission)
            }
            public var body: Operations.acceptTradingPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.acceptTradingPermission.Input.Headers = .init(),
                body: Operations.acceptTradingPermission.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/accepttradingpermission/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/accepttradingpermission/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradingPermissionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradingPermissionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.acceptTradingPermission.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.acceptTradingPermission.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermissionResponse
            ///
            /// - Remark: Generated from `#/paths//user/accepttradingpermission/post(acceptTradingPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.acceptTradingPermission.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.acceptTradingPermission.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Used to setup a second market data subscription with active auto-renewal.
    ///
    /// - Remark: HTTP `POST /user/activatesecondmarketdatasubscriptionrenewal`.
    /// - Remark: Generated from `#/paths//user/activatesecondmarketdatasubscriptionrenewal/post(activateSecondMarketDataSubscriptionRenewal)`.
    public enum activateSecondMarketDataSubscriptionRenewal {
        public static let id: Swift.String = "activateSecondMarketDataSubscriptionRenewal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/activatesecondmarketdatasubscriptionrenewal/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activateSecondMarketDataSubscriptionRenewal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.activateSecondMarketDataSubscriptionRenewal.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.activateSecondMarketDataSubscriptionRenewal.Input.Headers
            /// - Remark: Generated from `#/paths/user/activatesecondmarketdatasubscriptionrenewal/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/activatesecondmarketdatasubscriptionrenewal/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ActivateSecondMarketDataSubscriptionRenewal)
            }
            public var body: Operations.activateSecondMarketDataSubscriptionRenewal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.activateSecondMarketDataSubscriptionRenewal.Input.Headers = .init(),
                body: Operations.activateSecondMarketDataSubscriptionRenewal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/activatesecondmarketdatasubscriptionrenewal/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/activatesecondmarketdatasubscriptionrenewal/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SecondMarketDataSubscriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SecondMarketDataSubscriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.activateSecondMarketDataSubscriptionRenewal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.activateSecondMarketDataSubscriptionRenewal.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscriptionResponse
            ///
            /// - Remark: Generated from `#/paths//user/activatesecondmarketdatasubscriptionrenewal/post(activateSecondMarketDataSubscriptionRenewal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.activateSecondMarketDataSubscriptionRenewal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.activateSecondMarketDataSubscriptionRenewal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Add a subscription to Market Data for a user.
    ///
    /// - Remark: HTTP `POST /user/addmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/addmarketdatasubscription/post(addMarketDataSubscription)`.
    public enum addMarketDataSubscription {
        public static let id: Swift.String = "addMarketDataSubscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/addmarketdatasubscription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addMarketDataSubscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addMarketDataSubscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.addMarketDataSubscription.Input.Headers
            /// - Remark: Generated from `#/paths/user/addmarketdatasubscription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/addmarketdatasubscription/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AddMarketDataSubscription)
            }
            public var body: Operations.addMarketDataSubscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.addMarketDataSubscription.Input.Headers = .init(),
                body: Operations.addMarketDataSubscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/addmarketdatasubscription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/addmarketdatasubscription/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MarketDataSubscriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MarketDataSubscriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.addMarketDataSubscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.addMarketDataSubscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// MarketDataSubscriptionResponse
            ///
            /// - Remark: Generated from `#/paths//user/addmarketdatasubscription/post(addMarketDataSubscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addMarketDataSubscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.addMarketDataSubscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Add a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/addsecondmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/addsecondmarketdatasubscription/post(addSecondMarketDataSubscription)`.
    public enum addSecondMarketDataSubscription {
        public static let id: Swift.String = "addSecondMarketDataSubscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/addsecondmarketdatasubscription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addSecondMarketDataSubscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addSecondMarketDataSubscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.addSecondMarketDataSubscription.Input.Headers
            /// - Remark: Generated from `#/paths/user/addsecondmarketdatasubscription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/addsecondmarketdatasubscription/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AddSecondMarketDataSubscription)
            }
            public var body: Operations.addSecondMarketDataSubscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.addSecondMarketDataSubscription.Input.Headers = .init(),
                body: Operations.addSecondMarketDataSubscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/addsecondmarketdatasubscription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/addsecondmarketdatasubscription/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SecondMarketDataSubscriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SecondMarketDataSubscriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.addSecondMarketDataSubscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.addSecondMarketDataSubscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscriptionResponse
            ///
            /// - Remark: Generated from `#/paths//user/addsecondmarketdatasubscription/post(addSecondMarketDataSubscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addSecondMarketDataSubscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.addSecondMarketDataSubscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Used to add a Tradovate Trader membership plan for a user.
    ///
    /// - Remark: HTTP `POST /user/addtradovatesubscription`.
    /// - Remark: Generated from `#/paths//user/addtradovatesubscription/post(addTradovateSubscription)`.
    public enum addTradovateSubscription {
        public static let id: Swift.String = "addTradovateSubscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/addtradovatesubscription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addTradovateSubscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addTradovateSubscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.addTradovateSubscription.Input.Headers
            /// - Remark: Generated from `#/paths/user/addtradovatesubscription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/addtradovatesubscription/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AddTradovateSubscription)
            }
            public var body: Operations.addTradovateSubscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.addTradovateSubscription.Input.Headers = .init(),
                body: Operations.addTradovateSubscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/addtradovatesubscription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/addtradovatesubscription/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradovateSubscriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradovateSubscriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.addTradovateSubscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.addTradovateSubscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscriptionResponse
            ///
            /// - Remark: Generated from `#/paths//user/addtradovatesubscription/post(addTradovateSubscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addTradovateSubscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.addTradovateSubscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /user/canceleverything`.
    /// - Remark: Generated from `#/paths//user/canceleverything/post(cancelEverything)`.
    public enum cancelEverything {
        public static let id: Swift.String = "cancelEverything"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/canceleverything/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelEverything.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelEverything.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelEverything.Input.Headers
            /// - Remark: Generated from `#/paths/user/canceleverything/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/canceleverything/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CancelEverything)
            }
            public var body: Operations.cancelEverything.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.cancelEverything.Input.Headers = .init(),
                body: Operations.cancelEverything.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/canceleverything/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/canceleverything/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CancelEverythingResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CancelEverythingResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelEverything.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelEverything.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CancelEverythingResponse
            ///
            /// - Remark: Generated from `#/paths//user/canceleverything/post(cancelEverything)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelEverything.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelEverything.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Cancel a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/cancelsecondmarketdatasubscription`.
    /// - Remark: Generated from `#/paths//user/cancelsecondmarketdatasubscription/post(cancelSecondMarketDataSubscription)`.
    public enum cancelSecondMarketDataSubscription {
        public static let id: Swift.String = "cancelSecondMarketDataSubscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelSecondMarketDataSubscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelSecondMarketDataSubscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelSecondMarketDataSubscription.Input.Headers
            /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscription/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CancelSecondMarketDataSubscription)
            }
            public var body: Operations.cancelSecondMarketDataSubscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.cancelSecondMarketDataSubscription.Input.Headers = .init(),
                body: Operations.cancelSecondMarketDataSubscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscription/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SecondMarketDataSubscriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SecondMarketDataSubscriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelSecondMarketDataSubscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelSecondMarketDataSubscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscriptionResponse
            ///
            /// - Remark: Generated from `#/paths//user/cancelsecondmarketdatasubscription/post(cancelSecondMarketDataSubscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelSecondMarketDataSubscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelSecondMarketDataSubscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Cancel the auto-renewal for a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/cancelsecondmarketdatasubscriptionrenewal`.
    /// - Remark: Generated from `#/paths//user/cancelsecondmarketdatasubscriptionrenewal/post(cancelSecondMarketDataSubscriptionRenewal)`.
    public enum cancelSecondMarketDataSubscriptionRenewal {
        public static let id: Swift.String = "cancelSecondMarketDataSubscriptionRenewal"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscriptionrenewal/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelSecondMarketDataSubscriptionRenewal.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelSecondMarketDataSubscriptionRenewal.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelSecondMarketDataSubscriptionRenewal.Input.Headers
            /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscriptionrenewal/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscriptionrenewal/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CancelSecondMarketDataSubscriptionRenewal)
            }
            public var body: Operations.cancelSecondMarketDataSubscriptionRenewal.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.cancelSecondMarketDataSubscriptionRenewal.Input.Headers = .init(),
                body: Operations.cancelSecondMarketDataSubscriptionRenewal.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscriptionrenewal/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/cancelsecondmarketdatasubscriptionrenewal/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SecondMarketDataSubscriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SecondMarketDataSubscriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelSecondMarketDataSubscriptionRenewal.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelSecondMarketDataSubscriptionRenewal.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscriptionResponse
            ///
            /// - Remark: Generated from `#/paths//user/cancelsecondmarketdatasubscriptionrenewal/post(cancelSecondMarketDataSubscriptionRenewal)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelSecondMarketDataSubscriptionRenewal.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelSecondMarketDataSubscriptionRenewal.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Cancel a Tradovate Trader membership plan.
    ///
    /// - Remark: HTTP `POST /user/canceltradovatesubscription`.
    /// - Remark: Generated from `#/paths//user/canceltradovatesubscription/post(cancelTradovateSubscription)`.
    public enum cancelTradovateSubscription {
        public static let id: Swift.String = "cancelTradovateSubscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/canceltradovatesubscription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelTradovateSubscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.cancelTradovateSubscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.cancelTradovateSubscription.Input.Headers
            /// - Remark: Generated from `#/paths/user/canceltradovatesubscription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/canceltradovatesubscription/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CancelTradovateSubscription)
            }
            public var body: Operations.cancelTradovateSubscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.cancelTradovateSubscription.Input.Headers = .init(),
                body: Operations.cancelTradovateSubscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/canceltradovatesubscription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/canceltradovatesubscription/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradovateSubscriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradovateSubscriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.cancelTradovateSubscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.cancelTradovateSubscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradovateSubscriptionResponse
            ///
            /// - Remark: Generated from `#/paths//user/canceltradovatesubscription/post(cancelTradovateSubscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.cancelTradovateSubscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.cancelTradovateSubscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Create a trading permission
    /// Create a new trading permission to account with ID `accountId` via that user's ID, `userId`.
    ///
    /// - Remark: HTTP `POST /user/createtradingpermission`.
    /// - Remark: Generated from `#/paths//user/createtradingpermission/post(createTradingPermission)`.
    public enum createTradingPermission {
        public static let id: Swift.String = "createTradingPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/createtradingpermission/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTradingPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.createTradingPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.createTradingPermission.Input.Headers
            /// - Remark: Generated from `#/paths/user/createtradingpermission/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/createtradingpermission/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CreateTradingPermission)
            }
            public var body: Operations.createTradingPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.createTradingPermission.Input.Headers = .init(),
                body: Operations.createTradingPermission.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/createtradingpermission/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/createtradingpermission/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradingPermissionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradingPermissionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.createTradingPermission.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.createTradingPermission.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermissionResponse
            ///
            /// - Remark: Generated from `#/paths//user/createtradingpermission/post(createTradingPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.createTradingPermission.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.createTradingPermission.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of User type by its name
    ///
    /// - Remark: HTTP `GET /user/find`.
    /// - Remark: Generated from `#/paths//user/find/get(userFind)`.
    public enum userFind {
        public static let id: Swift.String = "userFind"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/find/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/find/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) {
                    self.name = name
                }
            }
            public var query: Operations.userFind.Input.Query
            /// - Remark: Generated from `#/paths/user/find/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userFind.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userFind.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userFind.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userFind.Input.Query,
                headers: Operations.userFind.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/find/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/find/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userFind.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userFind.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User
            ///
            /// - Remark: Generated from `#/paths//user/find/get(userFind)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userFind.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userFind.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Query the granted trading permissions associated with this account.
    ///
    /// - Remark: HTTP `POST /user/getaccounttradingpermissions`.
    /// - Remark: Generated from `#/paths//user/getaccounttradingpermissions/post(getAccountTradingPermissions)`.
    public enum getAccountTradingPermissions {
        public static let id: Swift.String = "getAccountTradingPermissions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/getaccounttradingpermissions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountTradingPermissions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountTradingPermissions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountTradingPermissions.Input.Headers
            /// - Remark: Generated from `#/paths/user/getaccounttradingpermissions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/getaccounttradingpermissions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.GetAccountTradingPermissions)
            }
            public var body: Operations.getAccountTradingPermissions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.getAccountTradingPermissions.Input.Headers = .init(),
                body: Operations.getAccountTradingPermissions.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/getaccounttradingpermissions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/getaccounttradingpermissions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradingPermissionsResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradingPermissionsResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountTradingPermissions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountTradingPermissions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermissionsResponse
            ///
            /// - Remark: Generated from `#/paths//user/getaccounttradingpermissions/post(getAccountTradingPermissions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountTradingPermissions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountTradingPermissions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Query the current price of a second market data subscription for a user.
    ///
    /// - Remark: HTTP `POST /user/getsecondmarketdatasubscriptioncost`.
    /// - Remark: Generated from `#/paths//user/getsecondmarketdatasubscriptioncost/post(getSecondMarketDataSubscriptionCost)`.
    public enum getSecondMarketDataSubscriptionCost {
        public static let id: Swift.String = "getSecondMarketDataSubscriptionCost"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/getsecondmarketdatasubscriptioncost/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSecondMarketDataSubscriptionCost.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getSecondMarketDataSubscriptionCost.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.getSecondMarketDataSubscriptionCost.Input.Headers
            /// - Remark: Generated from `#/paths/user/getsecondmarketdatasubscriptioncost/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/getsecondmarketdatasubscriptioncost/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.GetSecondMarketDataSubscriptionCost)
            }
            public var body: Operations.getSecondMarketDataSubscriptionCost.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.getSecondMarketDataSubscriptionCost.Input.Headers = .init(),
                body: Operations.getSecondMarketDataSubscriptionCost.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/getsecondmarketdatasubscriptioncost/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/getsecondmarketdatasubscriptioncost/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SecondMarketDataSubscriptionCostResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SecondMarketDataSubscriptionCostResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getSecondMarketDataSubscriptionCost.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getSecondMarketDataSubscriptionCost.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SecondMarketDataSubscriptionCostResponse
            ///
            /// - Remark: Generated from `#/paths//user/getsecondmarketdatasubscriptioncost/post(getSecondMarketDataSubscriptionCost)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getSecondMarketDataSubscriptionCost.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getSecondMarketDataSubscriptionCost.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of User type by its id
    ///
    /// - Remark: HTTP `GET /user/item`.
    /// - Remark: Generated from `#/paths//user/item/get(userItem)`.
    public enum userItem {
        public static let id: Swift.String = "userItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.userItem.Input.Query
            /// - Remark: Generated from `#/paths/user/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userItem.Input.Query,
                headers: Operations.userItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.User)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.User {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User
            ///
            /// - Remark: Generated from `#/paths//user/item/get(userItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of User type by its ids
    ///
    /// - Remark: HTTP `GET /user/items`.
    /// - Remark: Generated from `#/paths//user/items/get(userItems)`.
    public enum userItems {
        public static let id: Swift.String = "userItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.userItems.Input.Query
            /// - Remark: Generated from `#/paths/user/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userItems.Input.Query,
                headers: Operations.userItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.User])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.User] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User
            ///
            /// - Remark: Generated from `#/paths//user/items/get(userItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of User type
    ///
    /// - Remark: HTTP `GET /user/list`.
    /// - Remark: Generated from `#/paths//user/list/get(userList)`.
    public enum userList {
        public static let id: Swift.String = "userList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.userList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.User])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.User] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User
            ///
            /// - Remark: Generated from `#/paths//user/list/get(userList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Used to modify account username and password.
    ///
    /// - Remark: HTTP `POST /user/modifycredentials`.
    /// - Remark: Generated from `#/paths//user/modifycredentials/post(modifyCredentials)`.
    public enum modifyCredentials {
        public static let id: Swift.String = "modifyCredentials"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/modifycredentials/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyCredentials.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyCredentials.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyCredentials.Input.Headers
            /// - Remark: Generated from `#/paths/user/modifycredentials/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/modifycredentials/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyCredentials)
            }
            public var body: Operations.modifyCredentials.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.modifyCredentials.Input.Headers = .init(),
                body: Operations.modifyCredentials.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/modifycredentials/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/modifycredentials/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccessTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccessTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyCredentials.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyCredentials.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccessTokenResponse
            ///
            /// - Remark: Generated from `#/paths//user/modifycredentials/post(modifyCredentials)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyCredentials.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyCredentials.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Change account email address information.
    ///
    /// - Remark: HTTP `POST /user/modifyemailaddress`.
    /// - Remark: Generated from `#/paths//user/modifyemailaddress/post(modifyEmailAddress)`.
    public enum modifyEmailAddress {
        public static let id: Swift.String = "modifyEmailAddress"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/modifyemailaddress/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyEmailAddress.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyEmailAddress.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyEmailAddress.Input.Headers
            /// - Remark: Generated from `#/paths/user/modifyemailaddress/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/modifyemailaddress/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyEmailAddress)
            }
            public var body: Operations.modifyEmailAddress.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.modifyEmailAddress.Input.Headers = .init(),
                body: Operations.modifyEmailAddress.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/modifyemailaddress/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/modifyemailaddress/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserStatusMessage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserStatusMessage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyEmailAddress.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyEmailAddress.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserStatusMessage
            ///
            /// - Remark: Generated from `#/paths//user/modifyemailaddress/post(modifyEmailAddress)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyEmailAddress.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyEmailAddress.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Change account password information.
    ///
    /// - Remark: HTTP `POST /user/modifypassword`.
    /// - Remark: Generated from `#/paths//user/modifypassword/post(modifyPassword)`.
    public enum modifyPassword {
        public static let id: Swift.String = "modifyPassword"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/modifypassword/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyPassword.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.modifyPassword.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.modifyPassword.Input.Headers
            /// - Remark: Generated from `#/paths/user/modifypassword/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/modifypassword/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ModifyPassword)
            }
            public var body: Operations.modifyPassword.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.modifyPassword.Input.Headers = .init(),
                body: Operations.modifyPassword.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/modifypassword/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/modifypassword/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccessTokenResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccessTokenResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.modifyPassword.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.modifyPassword.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// AccessTokenResponse
            ///
            /// - Remark: Generated from `#/paths//user/modifypassword/post(modifyPassword)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.modifyPassword.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.modifyPassword.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Request to open a Demo account for a user. 
    ///
    /// - Remark: HTTP `POST /user/opendemoaccount`.
    /// - Remark: Generated from `#/paths//user/opendemoaccount/post(openDemoAccount)`.
    public enum openDemoAccount {
        public static let id: Swift.String = "openDemoAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/opendemoaccount/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openDemoAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.openDemoAccount.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.openDemoAccount.Input.Headers
            /// - Remark: Generated from `#/paths/user/opendemoaccount/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/opendemoaccount/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.OpenDemoAccount)
            }
            public var body: Operations.openDemoAccount.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.openDemoAccount.Input.Headers = .init(),
                body: Operations.openDemoAccount.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/opendemoaccount/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/opendemoaccount/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.OpenDemoAccountResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.OpenDemoAccountResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.openDemoAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.openDemoAccount.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// OpenDemoAccountResponse
            ///
            /// - Remark: Generated from `#/paths//user/opendemoaccount/post(openDemoAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.openDemoAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.openDemoAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Send a request to grant trading permission for your account to another party.
    /// Once this request is reviewed by our accounting and compliance, the other party will be allowed to access your account as if it was one of that party's own accounts.
    ///
    /// - Remark: HTTP `POST /user/requesttradingpermission`.
    /// - Remark: Generated from `#/paths//user/requesttradingpermission/post(requestTradingPermission)`.
    public enum requestTradingPermission {
        public static let id: Swift.String = "requestTradingPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/requesttradingpermission/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.requestTradingPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.requestTradingPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.requestTradingPermission.Input.Headers
            /// - Remark: Generated from `#/paths/user/requesttradingpermission/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/requesttradingpermission/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RequestTradingPermission)
            }
            public var body: Operations.requestTradingPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.requestTradingPermission.Input.Headers = .init(),
                body: Operations.requestTradingPermission.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/requesttradingpermission/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/requesttradingpermission/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradingPermissionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradingPermissionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.requestTradingPermission.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.requestTradingPermission.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermissionResponse
            ///
            /// - Remark: Generated from `#/paths//user/requesttradingpermission/post(requestTradingPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.requestTradingPermission.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.requestTradingPermission.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Revoke an existing trading permission granted to another party.
    /// If a user wants to end the terms of a granted permission to trade using your account, a user can revoke those permissions using this endpoint.
    ///
    /// - Remark: HTTP `POST /user/revoketradingpermission`.
    /// - Remark: Generated from `#/paths//user/revoketradingpermission/post(revokeTradingPermission)`.
    public enum revokeTradingPermission {
        public static let id: Swift.String = "revokeTradingPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/revoketradingpermission/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.revokeTradingPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.revokeTradingPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.revokeTradingPermission.Input.Headers
            /// - Remark: Generated from `#/paths/user/revoketradingpermission/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/revoketradingpermission/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RevokeTradingPermission)
            }
            public var body: Operations.revokeTradingPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.revokeTradingPermission.Input.Headers = .init(),
                body: Operations.revokeTradingPermission.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/revoketradingpermission/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/revoketradingpermission/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.TradingPermissionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TradingPermissionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.revokeTradingPermission.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.revokeTradingPermission.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// TradingPermissionResponse
            ///
            /// - Remark: Generated from `#/paths//user/revoketradingpermission/post(revokeTradingPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.revokeTradingPermission.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.revokeTradingPermission.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /user/revoketradingpermissions`.
    /// - Remark: Generated from `#/paths//user/revoketradingpermissions/post(revokeTradingPermissions)`.
    public enum revokeTradingPermissions {
        public static let id: Swift.String = "revokeTradingPermissions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/revoketradingpermissions/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.revokeTradingPermissions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.revokeTradingPermissions.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.revokeTradingPermissions.Input.Headers
            /// - Remark: Generated from `#/paths/user/revoketradingpermissions/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/revoketradingpermissions/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.RevokeTradingPermissions)
            }
            public var body: Operations.revokeTradingPermissions.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.revokeTradingPermissions.Input.Headers = .init(),
                body: Operations.revokeTradingPermissions.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/revoketradingpermissions/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/revoketradingpermissions/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SimpleResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SimpleResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.revokeTradingPermissions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.revokeTradingPermissions.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SimpleResponse
            ///
            /// - Remark: Generated from `#/paths//user/revoketradingpermissions/post(revokeTradingPermissions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.revokeTradingPermissions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.revokeTradingPermissions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Used by B2B partners to create users for their own organizations.
    ///
    /// - Remark: HTTP `POST /user/signuporganizationmember`.
    /// - Remark: Generated from `#/paths//user/signuporganizationmember/post(signUpOrganizationMember)`.
    public enum signUpOrganizationMember {
        public static let id: Swift.String = "signUpOrganizationMember"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/signuporganizationmember/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.signUpOrganizationMember.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.signUpOrganizationMember.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.signUpOrganizationMember.Input.Headers
            /// - Remark: Generated from `#/paths/user/signuporganizationmember/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/signuporganizationmember/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SignUpOrganizationMember)
            }
            public var body: Operations.signUpOrganizationMember.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.signUpOrganizationMember.Input.Headers = .init(),
                body: Operations.signUpOrganizationMember.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/signuporganizationmember/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/signuporganizationmember/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SignUpResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SignUpResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.signUpOrganizationMember.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.signUpOrganizationMember.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SignUpResponse
            ///
            /// - Remark: Generated from `#/paths//user/signuporganizationmember/post(signUpOrganizationMember)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.signUpOrganizationMember.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.signUpOrganizationMember.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves entities of User type filtered by an occurrence of a text in one of its fields
    ///
    /// - Remark: HTTP `GET /user/suggest`.
    /// - Remark: Generated from `#/paths//user/suggest/get(userSuggest)`.
    public enum userSuggest {
        public static let id: Swift.String = "userSuggest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/suggest/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Text
                ///
                /// - Remark: Generated from `#/paths/user/suggest/GET/query/t`.
                public var t: Swift.String
                /// Max number of entities
                ///
                /// - Remark: Generated from `#/paths/user/suggest/GET/query/l`.
                public var l: Swift.Int32
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - t: Text
                ///   - l: Max number of entities
                public init(
                    t: Swift.String,
                    l: Swift.Int32
                ) {
                    self.t = t
                    self.l = l
                }
            }
            public var query: Operations.userSuggest.Input.Query
            /// - Remark: Generated from `#/paths/user/suggest/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSuggest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSuggest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userSuggest.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userSuggest.Input.Query,
                headers: Operations.userSuggest.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/suggest/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/suggest/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.User])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.User] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userSuggest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userSuggest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// User
            ///
            /// - Remark: Generated from `#/paths//user/suggest/get(userSuggest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userSuggest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userSuggest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Used with WebSocket protocol. Returns all data associated with the user. 
    /// This endpoint is essential for efficient use of the WebSocket API. See [WebSockets](/#tag/WebSockets) for more details, or view our WebSockets [JavaScript](https://github.com/tradovate/example-api-js) or [C#](https://github.com/tradovate/example-api-csharp-trading) tutorials.
    ///
    /// ```js
    /// const URL = 'wss://live.tradovateapi.com/v1/websocket'
    ///
    /// const myWebSocket = new WebSocket(URL)
    ///
    /// //authorize websocket with your access token
    /// myWebSocket.onopen = function() {
    ///     myWebSocket.send(`authorize\n0\n\n${accessToken}`)
    /// }
    ///
    /// const requestBody = {
    ///     users: [12345]
    /// }
    ///
    /// myWebSocket.send(`user/syncrequest\n1\n\n${JSON.stringify(requestBody)}`) 
    ///
    /// //starts a subscription to real-time user data.
    /// ```
    ///
    /// - Remark: HTTP `POST /user/syncrequest`.
    /// - Remark: Generated from `#/paths//user/syncrequest/post(syncRequest)`.
    public enum syncRequest {
        public static let id: Swift.String = "syncRequest"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/user/syncrequest/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.syncRequest.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.syncRequest.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.syncRequest.Input.Headers
            /// - Remark: Generated from `#/paths/user/syncrequest/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/syncrequest/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.SyncRequest)
            }
            public var body: Operations.syncRequest.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.syncRequest.Input.Headers = .init(),
                body: Operations.syncRequest.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/user/syncrequest/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/user/syncrequest/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SyncMessage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SyncMessage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.syncRequest.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.syncRequest.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SyncMessage
            ///
            /// - Remark: Generated from `#/paths//user/syncrequest/post(syncRequest)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.syncRequest.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.syncRequest.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### For use with Add-ons, allows for purchase of entitlements such as Market Replay.
    ///
    /// - Remark: HTTP `POST /userPlugin/addentitlementsubscription`.
    /// - Remark: Generated from `#/paths//userPlugin/addentitlementsubscription/post(addEntitlementSubscription)`.
    public enum addEntitlementSubscription {
        public static let id: Swift.String = "addEntitlementSubscription"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/addentitlementsubscription/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addEntitlementSubscription.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addEntitlementSubscription.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.addEntitlementSubscription.Input.Headers
            /// - Remark: Generated from `#/paths/userPlugin/addentitlementsubscription/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/addentitlementsubscription/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.AddEntitlementSubscription)
            }
            public var body: Operations.addEntitlementSubscription.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.addEntitlementSubscription.Input.Headers = .init(),
                body: Operations.addEntitlementSubscription.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/addentitlementsubscription/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/addentitlementsubscription/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.EntitlementSubscriptionResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.EntitlementSubscriptionResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.addEntitlementSubscription.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.addEntitlementSubscription.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// EntitlementSubscriptionResponse
            ///
            /// - Remark: Generated from `#/paths//userPlugin/addentitlementsubscription/post(addEntitlementSubscription)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addEntitlementSubscription.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.addEntitlementSubscription.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Change the permissions for a Trader plugin.
    ///
    /// - Remark: HTTP `POST /userPlugin/changepluginpermission`.
    /// - Remark: Generated from `#/paths//userPlugin/changepluginpermission/post(changePluginPermission)`.
    public enum changePluginPermission {
        public static let id: Swift.String = "changePluginPermission"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/changepluginpermission/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changePluginPermission.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.changePluginPermission.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.changePluginPermission.Input.Headers
            /// - Remark: Generated from `#/paths/userPlugin/changepluginpermission/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/changepluginpermission/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.ChangePluginPermission)
            }
            public var body: Operations.changePluginPermission.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.changePluginPermission.Input.Headers = .init(),
                body: Operations.changePluginPermission.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/changepluginpermission/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/changepluginpermission/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.SimpleResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.SimpleResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.changePluginPermission.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.changePluginPermission.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// SimpleResponse
            ///
            /// - Remark: Generated from `#/paths//userPlugin/changepluginpermission/post(changePluginPermission)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.changePluginPermission.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.changePluginPermission.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Creates a new entity of UserPlugin
    ///
    /// - Remark: HTTP `POST /userPlugin/create`.
    /// - Remark: Generated from `#/paths//userPlugin/create/post(userPluginCreate)`.
    public enum userPluginCreate {
        public static let id: Swift.String = "userPluginCreate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/create/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginCreate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginCreate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPluginCreate.Input.Headers
            /// - Remark: Generated from `#/paths/userPlugin/create/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/create/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserPlugin)
            }
            public var body: Operations.userPluginCreate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.userPluginCreate.Input.Headers = .init(),
                body: Operations.userPluginCreate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/create/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/create/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserPlugin)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserPlugin {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPluginCreate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPluginCreate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserPlugin
            ///
            /// - Remark: Generated from `#/paths//userPlugin/create/post(userPluginCreate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPluginCreate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPluginCreate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserPlugin type related to User entity
    ///
    /// - Remark: HTTP `GET /userPlugin/deps`.
    /// - Remark: Generated from `#/paths//userPlugin/deps/get(userPluginDependents)`.
    public enum userPluginDependents {
        public static let id: Swift.String = "userPluginDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/userPlugin/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.userPluginDependents.Input.Query
            /// - Remark: Generated from `#/paths/userPlugin/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPluginDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userPluginDependents.Input.Query,
                headers: Operations.userPluginDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserPlugin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserPlugin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPluginDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPluginDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserPlugin
            ///
            /// - Remark: Generated from `#/paths//userPlugin/deps/get(userPluginDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPluginDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPluginDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of UserPlugin type by its id
    ///
    /// - Remark: HTTP `GET /userPlugin/item`.
    /// - Remark: Generated from `#/paths//userPlugin/item/get(userPluginItem)`.
    public enum userPluginItem {
        public static let id: Swift.String = "userPluginItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.userPluginItem.Input.Query
            /// - Remark: Generated from `#/paths/userPlugin/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPluginItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userPluginItem.Input.Query,
                headers: Operations.userPluginItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserPlugin)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserPlugin {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPluginItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPluginItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserPlugin
            ///
            /// - Remark: Generated from `#/paths//userPlugin/item/get(userPluginItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPluginItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPluginItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of UserPlugin type by its ids
    ///
    /// - Remark: HTTP `GET /userPlugin/items`.
    /// - Remark: Generated from `#/paths//userPlugin/items/get(userPluginItems)`.
    public enum userPluginItems {
        public static let id: Swift.String = "userPluginItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.userPluginItems.Input.Query
            /// - Remark: Generated from `#/paths/userPlugin/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPluginItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userPluginItems.Input.Query,
                headers: Operations.userPluginItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserPlugin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserPlugin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPluginItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPluginItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserPlugin
            ///
            /// - Remark: Generated from `#/paths//userPlugin/items/get(userPluginItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPluginItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPluginItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserPlugin type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userPlugin/ldeps`.
    /// - Remark: Generated from `#/paths//userPlugin/ldeps/get(userPluginLDependents)`.
    public enum userPluginLDependents {
        public static let id: Swift.String = "userPluginLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/userPlugin/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.userPluginLDependents.Input.Query
            /// - Remark: Generated from `#/paths/userPlugin/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPluginLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userPluginLDependents.Input.Query,
                headers: Operations.userPluginLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserPlugin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserPlugin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPluginLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPluginLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserPlugin
            ///
            /// - Remark: Generated from `#/paths//userPlugin/ldeps/get(userPluginLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPluginLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPluginLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserPlugin type
    ///
    /// - Remark: HTTP `GET /userPlugin/list`.
    /// - Remark: Generated from `#/paths//userPlugin/list/get(userPluginList)`.
    public enum userPluginList {
        public static let id: Swift.String = "userPluginList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPluginList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.userPluginList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserPlugin])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserPlugin] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPluginList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPluginList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserPlugin
            ///
            /// - Remark: Generated from `#/paths//userPlugin/list/get(userPluginList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPluginList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPluginList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Updates an existing entity of UserPlugin
    ///
    /// - Remark: HTTP `POST /userPlugin/update`.
    /// - Remark: Generated from `#/paths//userPlugin/update/post(userPluginUpdate)`.
    public enum userPluginUpdate {
        public static let id: Swift.String = "userPluginUpdate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userPlugin/update/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginUpdate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPluginUpdate.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPluginUpdate.Input.Headers
            /// - Remark: Generated from `#/paths/userPlugin/update/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/update/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.UserPlugin)
            }
            public var body: Operations.userPluginUpdate.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.userPluginUpdate.Input.Headers = .init(),
                body: Operations.userPluginUpdate.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userPlugin/update/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userPlugin/update/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserPlugin)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserPlugin {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPluginUpdate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPluginUpdate.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserPlugin
            ///
            /// - Remark: Generated from `#/paths//userPlugin/update/post(userPluginUpdate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPluginUpdate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPluginUpdate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserProperty type related to User entity
    ///
    /// - Remark: HTTP `GET /userProperty/deps`.
    /// - Remark: Generated from `#/paths//userProperty/deps/get(userPropertyDependents)`.
    public enum userPropertyDependents {
        public static let id: Swift.String = "userPropertyDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userProperty/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/userProperty/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.userPropertyDependents.Input.Query
            /// - Remark: Generated from `#/paths/userProperty/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPropertyDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPropertyDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPropertyDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userPropertyDependents.Input.Query,
                headers: Operations.userPropertyDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userProperty/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userProperty/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserProperty])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserProperty] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPropertyDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPropertyDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserProperty
            ///
            /// - Remark: Generated from `#/paths//userProperty/deps/get(userPropertyDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPropertyDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPropertyDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of UserProperty type by its id
    ///
    /// - Remark: HTTP `GET /userProperty/item`.
    /// - Remark: Generated from `#/paths//userProperty/item/get(userPropertyItem)`.
    public enum userPropertyItem {
        public static let id: Swift.String = "userPropertyItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userProperty/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userProperty/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.userPropertyItem.Input.Query
            /// - Remark: Generated from `#/paths/userProperty/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPropertyItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPropertyItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPropertyItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userPropertyItem.Input.Query,
                headers: Operations.userPropertyItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userProperty/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userProperty/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserProperty)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserProperty {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPropertyItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPropertyItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserProperty
            ///
            /// - Remark: Generated from `#/paths//userProperty/item/get(userPropertyItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPropertyItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPropertyItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of UserProperty type by its ids
    ///
    /// - Remark: HTTP `GET /userProperty/items`.
    /// - Remark: Generated from `#/paths//userProperty/items/get(userPropertyItems)`.
    public enum userPropertyItems {
        public static let id: Swift.String = "userPropertyItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userProperty/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userProperty/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.userPropertyItems.Input.Query
            /// - Remark: Generated from `#/paths/userProperty/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPropertyItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPropertyItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPropertyItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userPropertyItems.Input.Query,
                headers: Operations.userPropertyItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userProperty/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userProperty/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserProperty])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserProperty] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPropertyItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPropertyItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserProperty
            ///
            /// - Remark: Generated from `#/paths//userProperty/items/get(userPropertyItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPropertyItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPropertyItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserProperty type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userProperty/ldeps`.
    /// - Remark: Generated from `#/paths//userProperty/ldeps/get(userPropertyLDependents)`.
    public enum userPropertyLDependents {
        public static let id: Swift.String = "userPropertyLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userProperty/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/userProperty/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.userPropertyLDependents.Input.Query
            /// - Remark: Generated from `#/paths/userProperty/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPropertyLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userPropertyLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userPropertyLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userPropertyLDependents.Input.Query,
                headers: Operations.userPropertyLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userProperty/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userProperty/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserProperty])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserProperty] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userPropertyLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userPropertyLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserProperty
            ///
            /// - Remark: Generated from `#/paths//userProperty/ldeps/get(userPropertyLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userPropertyLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userPropertyLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of UserSession type by its id
    ///
    /// - Remark: HTTP `GET /userSession/item`.
    /// - Remark: Generated from `#/paths//userSession/item/get(userSessionItem)`.
    public enum userSessionItem {
        public static let id: Swift.String = "userSessionItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userSession/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSession/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.userSessionItem.Input.Query
            /// - Remark: Generated from `#/paths/userSession/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userSessionItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userSessionItem.Input.Query,
                headers: Operations.userSessionItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSession/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userSession/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserSession)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserSession {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userSessionItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userSessionItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserSession
            ///
            /// - Remark: Generated from `#/paths//userSession/item/get(userSessionItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userSessionItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userSessionItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of UserSession type by its ids
    ///
    /// - Remark: HTTP `GET /userSession/items`.
    /// - Remark: Generated from `#/paths//userSession/items/get(userSessionItems)`.
    public enum userSessionItems {
        public static let id: Swift.String = "userSessionItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userSession/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSession/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.userSessionItems.Input.Query
            /// - Remark: Generated from `#/paths/userSession/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userSessionItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userSessionItems.Input.Query,
                headers: Operations.userSessionItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSession/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userSession/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserSession])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserSession] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userSessionItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userSessionItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserSession
            ///
            /// - Remark: Generated from `#/paths//userSession/items/get(userSessionItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userSessionItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userSessionItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserSessionStats type related to User entity
    ///
    /// - Remark: HTTP `GET /userSessionStats/deps`.
    /// - Remark: Generated from `#/paths//userSessionStats/deps/get(userSessionStatsDependents)`.
    public enum userSessionStatsDependents {
        public static let id: Swift.String = "userSessionStatsDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userSessionStats/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/userSessionStats/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.userSessionStatsDependents.Input.Query
            /// - Remark: Generated from `#/paths/userSessionStats/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userSessionStatsDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userSessionStatsDependents.Input.Query,
                headers: Operations.userSessionStatsDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSessionStats/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userSessionStats/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserSessionStats])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserSessionStats] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userSessionStatsDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userSessionStatsDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserSessionStats
            ///
            /// - Remark: Generated from `#/paths//userSessionStats/deps/get(userSessionStatsDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userSessionStatsDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userSessionStatsDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of UserSessionStats type by its id
    ///
    /// - Remark: HTTP `GET /userSessionStats/item`.
    /// - Remark: Generated from `#/paths//userSessionStats/item/get(userSessionStatsItem)`.
    public enum userSessionStatsItem {
        public static let id: Swift.String = "userSessionStatsItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userSessionStats/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSessionStats/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.userSessionStatsItem.Input.Query
            /// - Remark: Generated from `#/paths/userSessionStats/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userSessionStatsItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userSessionStatsItem.Input.Query,
                headers: Operations.userSessionStatsItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSessionStats/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userSessionStats/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.UserSessionStats)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.UserSessionStats {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userSessionStatsItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userSessionStatsItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserSessionStats
            ///
            /// - Remark: Generated from `#/paths//userSessionStats/item/get(userSessionStatsItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userSessionStatsItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userSessionStatsItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of UserSessionStats type by its ids
    ///
    /// - Remark: HTTP `GET /userSessionStats/items`.
    /// - Remark: Generated from `#/paths//userSessionStats/items/get(userSessionStatsItems)`.
    public enum userSessionStatsItems {
        public static let id: Swift.String = "userSessionStatsItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userSessionStats/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSessionStats/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.userSessionStatsItems.Input.Query
            /// - Remark: Generated from `#/paths/userSessionStats/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userSessionStatsItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userSessionStatsItems.Input.Query,
                headers: Operations.userSessionStatsItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSessionStats/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userSessionStats/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserSessionStats])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserSessionStats] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userSessionStatsItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userSessionStatsItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserSessionStats
            ///
            /// - Remark: Generated from `#/paths//userSessionStats/items/get(userSessionStatsItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userSessionStatsItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userSessionStatsItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserSessionStats type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /userSessionStats/ldeps`.
    /// - Remark: Generated from `#/paths//userSessionStats/ldeps/get(userSessionStatsLDependents)`.
    public enum userSessionStatsLDependents {
        public static let id: Swift.String = "userSessionStatsLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userSessionStats/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/userSessionStats/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.userSessionStatsLDependents.Input.Query
            /// - Remark: Generated from `#/paths/userSessionStats/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userSessionStatsLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.userSessionStatsLDependents.Input.Query,
                headers: Operations.userSessionStatsLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSessionStats/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userSessionStats/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserSessionStats])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserSessionStats] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userSessionStatsLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userSessionStatsLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserSessionStats
            ///
            /// - Remark: Generated from `#/paths//userSessionStats/ldeps/get(userSessionStatsLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userSessionStatsLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userSessionStatsLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of UserSessionStats type
    ///
    /// - Remark: HTTP `GET /userSessionStats/list`.
    /// - Remark: Generated from `#/paths//userSessionStats/list/get(userSessionStatsList)`.
    public enum userSessionStatsList {
        public static let id: Swift.String = "userSessionStatsList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/userSessionStats/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.userSessionStatsList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.userSessionStatsList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.userSessionStatsList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/userSessionStats/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/userSessionStats/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.UserSessionStats])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.UserSessionStats] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.userSessionStatsList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.userSessionStatsList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// UserSessionStats
            ///
            /// - Remark: Generated from `#/paths//userSessionStats/list/get(userSessionStatsList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.userSessionStatsList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.userSessionStatsList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// - Remark: HTTP `POST /fundTransaction/checkstripefundingeligibility`.
    /// - Remark: Generated from `#/paths//fundTransaction/checkstripefundingeligibility/post(checkStripeFundingEligibility)`.
    public enum checkStripeFundingEligibility {
        public static let id: Swift.String = "checkStripeFundingEligibility"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/fundTransaction/checkstripefundingeligibility/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checkStripeFundingEligibility.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.checkStripeFundingEligibility.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.checkStripeFundingEligibility.Input.Headers
            /// - Remark: Generated from `#/paths/fundTransaction/checkstripefundingeligibility/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fundTransaction/checkstripefundingeligibility/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CheckStripeFundingEligibility)
            }
            public var body: Operations.checkStripeFundingEligibility.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.checkStripeFundingEligibility.Input.Headers = .init(),
                body: Operations.checkStripeFundingEligibility.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/fundTransaction/checkstripefundingeligibility/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/fundTransaction/checkstripefundingeligibility/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.CheckStripeFundingEligibilityResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.CheckStripeFundingEligibilityResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.checkStripeFundingEligibility.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.checkStripeFundingEligibility.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// CheckStripeFundingEligibilityResponse
            ///
            /// - Remark: Generated from `#/paths//fundTransaction/checkstripefundingeligibility/post(checkStripeFundingEligibility)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.checkStripeFundingEligibility.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.checkStripeFundingEligibility.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Close the chat context.
    ///
    /// - Remark: HTTP `POST /chat/closechat`.
    /// - Remark: Generated from `#/paths//chat/closechat/post(closeChat)`.
    public enum closeChat {
        public static let id: Swift.String = "closeChat"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/closechat/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.closeChat.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.closeChat.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.closeChat.Input.Headers
            /// - Remark: Generated from `#/paths/chat/closechat/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/closechat/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.CloseChat)
            }
            public var body: Operations.closeChat.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.closeChat.Input.Headers = .init(),
                body: Operations.closeChat.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/closechat/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/closechat/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.closeChat.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.closeChat.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ChatResponse
            ///
            /// - Remark: Generated from `#/paths//chat/closechat/post(closeChat)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.closeChat.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.closeChat.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Chat type related to User entity
    ///
    /// - Remark: HTTP `GET /chat/deps`.
    /// - Remark: Generated from `#/paths//chat/deps/get(chatDependents)`.
    public enum chatDependents {
        public static let id: Swift.String = "chatDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of User entity
                ///
                /// - Remark: Generated from `#/paths/chat/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of User entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.chatDependents.Input.Query
            /// - Remark: Generated from `#/paths/chat/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.chatDependents.Input.Query,
                headers: Operations.chatDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Chat])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Chat] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Chat
            ///
            /// - Remark: Generated from `#/paths//chat/deps/get(chatDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of Chat type by its id
    ///
    /// - Remark: HTTP `GET /chat/item`.
    /// - Remark: Generated from `#/paths//chat/item/get(chatItem)`.
    public enum chatItem {
        public static let id: Swift.String = "chatItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.chatItem.Input.Query
            /// - Remark: Generated from `#/paths/chat/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.chatItem.Input.Query,
                headers: Operations.chatItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Chat)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Chat {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Chat
            ///
            /// - Remark: Generated from `#/paths//chat/item/get(chatItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of Chat type by its ids
    ///
    /// - Remark: HTTP `GET /chat/items`.
    /// - Remark: Generated from `#/paths//chat/items/get(chatItems)`.
    public enum chatItems {
        public static let id: Swift.String = "chatItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.chatItems.Input.Query
            /// - Remark: Generated from `#/paths/chat/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.chatItems.Input.Query,
                headers: Operations.chatItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Chat])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Chat] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Chat
            ///
            /// - Remark: Generated from `#/paths//chat/items/get(chatItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Chat type related to multiple entities of User type
    ///
    /// - Remark: HTTP `GET /chat/ldeps`.
    /// - Remark: Generated from `#/paths//chat/ldeps/get(chatLDependents)`.
    public enum chatLDependents {
        public static let id: Swift.String = "chatLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of User entities
                ///
                /// - Remark: Generated from `#/paths/chat/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of User entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.chatLDependents.Input.Query
            /// - Remark: Generated from `#/paths/chat/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.chatLDependents.Input.Query,
                headers: Operations.chatLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Chat])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Chat] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Chat
            ///
            /// - Remark: Generated from `#/paths//chat/ldeps/get(chatLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of Chat type
    ///
    /// - Remark: HTTP `GET /chat/list`.
    /// - Remark: Generated from `#/paths//chat/list/get(chatList)`.
    public enum chatList {
        public static let id: Swift.String = "chatList"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/list/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatList.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatList.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatList.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.chatList.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/list/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/list/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.Chat])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.Chat] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatList.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatList.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// Chat
            ///
            /// - Remark: Generated from `#/paths//chat/list/get(chatList)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatList.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatList.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Marks a chat message as read.
    ///
    /// - Remark: HTTP `POST /chat/markasreadchatmessage`.
    /// - Remark: Generated from `#/paths//chat/markasreadchatmessage/post(markAsReadChatMessage)`.
    public enum markAsReadChatMessage {
        public static let id: Swift.String = "markAsReadChatMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/markasreadchatmessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.markAsReadChatMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.markAsReadChatMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.markAsReadChatMessage.Input.Headers
            /// - Remark: Generated from `#/paths/chat/markasreadchatmessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/markasreadchatmessage/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.MarkAsReadChatMessage)
            }
            public var body: Operations.markAsReadChatMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.markAsReadChatMessage.Input.Headers = .init(),
                body: Operations.markAsReadChatMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/markasreadchatmessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/markasreadchatmessage/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatMessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatMessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.markAsReadChatMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.markAsReadChatMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ChatMessageResponse
            ///
            /// - Remark: Generated from `#/paths//chat/markasreadchatmessage/post(markAsReadChatMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.markAsReadChatMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.markAsReadChatMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// ### Post a chat message to a given chat's history.
    ///
    /// - Remark: HTTP `POST /chat/postchatmessage`.
    /// - Remark: Generated from `#/paths//chat/postchatmessage/post(postChatMessage)`.
    public enum postChatMessage {
        public static let id: Swift.String = "postChatMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chat/postchatmessage/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postChatMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.postChatMessage.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.postChatMessage.Input.Headers
            /// - Remark: Generated from `#/paths/chat/postchatmessage/POST/requestBody`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/postchatmessage/POST/requestBody/content/application\/json`.
                case json(Components.Schemas.PostChatMessage)
            }
            public var body: Operations.postChatMessage.Input.Body
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.postChatMessage.Input.Headers = .init(),
                body: Operations.postChatMessage.Input.Body
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chat/postchatmessage/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chat/postchatmessage/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatMessageResponse)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatMessageResponse {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.postChatMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.postChatMessage.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ChatMessageResponse
            ///
            /// - Remark: Generated from `#/paths//chat/postchatmessage/post(postChatMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.postChatMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.postChatMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ChatMessage type related to Chat entity
    ///
    /// - Remark: HTTP `GET /chatMessage/deps`.
    /// - Remark: Generated from `#/paths//chatMessage/deps/get(chatMessageDependents)`.
    public enum chatMessageDependents {
        public static let id: Swift.String = "chatMessageDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chatMessage/deps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// id of Chat entity
                ///
                /// - Remark: Generated from `#/paths/chatMessage/deps/GET/query/masterid`.
                public var masterid: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterid: id of Chat entity
                public init(masterid: Swift.Int64) {
                    self.masterid = masterid
                }
            }
            public var query: Operations.chatMessageDependents.Input.Query
            /// - Remark: Generated from `#/paths/chatMessage/deps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatMessageDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatMessageDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatMessageDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.chatMessageDependents.Input.Query,
                headers: Operations.chatMessageDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chatMessage/deps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chatMessage/deps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ChatMessage])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ChatMessage] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatMessageDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatMessageDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ChatMessage
            ///
            /// - Remark: Generated from `#/paths//chatMessage/deps/get(chatMessageDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatMessageDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatMessageDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves an entity of ChatMessage type by its id
    ///
    /// - Remark: HTTP `GET /chatMessage/item`.
    /// - Remark: Generated from `#/paths//chatMessage/item/get(chatMessageItem)`.
    public enum chatMessageItem {
        public static let id: Swift.String = "chatMessageItem"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chatMessage/item/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chatMessage/item/GET/query/id`.
                public var id: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - id:
                public init(id: Swift.Int64) {
                    self.id = id
                }
            }
            public var query: Operations.chatMessageItem.Input.Query
            /// - Remark: Generated from `#/paths/chatMessage/item/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatMessageItem.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatMessageItem.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatMessageItem.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.chatMessageItem.Input.Query,
                headers: Operations.chatMessageItem.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chatMessage/item/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chatMessage/item/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.ChatMessage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.ChatMessage {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatMessageItem.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatMessageItem.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ChatMessage
            ///
            /// - Remark: Generated from `#/paths//chatMessage/item/get(chatMessageItem)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatMessageItem.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatMessageItem.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves multiple entities of ChatMessage type by its ids
    ///
    /// - Remark: HTTP `GET /chatMessage/items`.
    /// - Remark: Generated from `#/paths//chatMessage/items/get(chatMessageItems)`.
    public enum chatMessageItems {
        public static let id: Swift.String = "chatMessageItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chatMessage/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chatMessage/items/GET/query/ids`.
                public var ids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ids:
                public init(ids: [Swift.Int64]) {
                    self.ids = ids
                }
            }
            public var query: Operations.chatMessageItems.Input.Query
            /// - Remark: Generated from `#/paths/chatMessage/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatMessageItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatMessageItems.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatMessageItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.chatMessageItems.Input.Query,
                headers: Operations.chatMessageItems.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chatMessage/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chatMessage/items/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ChatMessage])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ChatMessage] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatMessageItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatMessageItems.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ChatMessage
            ///
            /// - Remark: Generated from `#/paths//chatMessage/items/get(chatMessageItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatMessageItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatMessageItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
    /// Retrieves all entities of ChatMessage type related to multiple entities of Chat type
    ///
    /// - Remark: HTTP `GET /chatMessage/ldeps`.
    /// - Remark: Generated from `#/paths//chatMessage/ldeps/get(chatMessageLDependents)`.
    public enum chatMessageLDependents {
        public static let id: Swift.String = "chatMessageLDependents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/chatMessage/ldeps/GET/query`.
            public struct Query: Sendable, Hashable {
                /// ids of Chat entities
                ///
                /// - Remark: Generated from `#/paths/chatMessage/ldeps/GET/query/masterids`.
                public var masterids: [Swift.Int64]
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - masterids: ids of Chat entities
                public init(masterids: [Swift.Int64]) {
                    self.masterids = masterids
                }
            }
            public var query: Operations.chatMessageLDependents.Input.Query
            /// - Remark: Generated from `#/paths/chatMessage/ldeps/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatMessageLDependents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.chatMessageLDependents.AcceptableContentType>] = .defaultValues()) {
                    self.accept = accept
                }
            }
            public var headers: Operations.chatMessageLDependents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.chatMessageLDependents.Input.Query,
                headers: Operations.chatMessageLDependents.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/chatMessage/ldeps/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/chatMessage/ldeps/GET/responses/200/content/application\/json`.
                    case json([Components.Schemas.ChatMessage])
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: [Components.Schemas.ChatMessage] {
                        get throws {
                            switch self {
                            case let .json(body):
                                return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.chatMessageLDependents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.chatMessageLDependents.Output.Ok.Body) {
                    self.body = body
                }
            }
            /// ChatMessage
            ///
            /// - Remark: Generated from `#/paths//chatMessage/ldeps/get(chatMessageLDependents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.chatMessageLDependents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.chatMessageLDependents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response):
                        return response
                    default:
                        try throwUnexpectedResponseStatus(
                            expectedStatus: "ok",
                            response: self
                        )
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json":
                    self = .json
                default:
                    self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string):
                    return string
                case .json:
                    return "application/json"
                }
            }
            public static var allCases: [Self] {
                [
                    .json
                ]
            }
        }
    }
}
